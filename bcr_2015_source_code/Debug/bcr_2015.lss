
bcr_2015.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001218  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001218  000012cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000018c  0080006a  0080006a  000012d6  2**0
                  ALLOC
  3 .eeprom       00000010  00810000  00810000  000012d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000012e6  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00001316  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e84  00000000  00000000  00001586  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bfc  00000000  00000000  0000340a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e66  00000000  00000000  00004006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000062c  00000000  00000000  00004e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000875  00000000  00000000  00005498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001316  00000000  00000000  00005d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00007023  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "uint_test.h"
#include "../../lib/inc/common.h"
#include "../../lib/inc/hardware_feature.h"
#include "../../lib/inc/LedBug.h"

void vLedDebugTest(){
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
	//test led debug. 
	// total: 40s
	for(int i = 0; i < 10; i++){
		LED_BUG_BLINK;
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
#include "../../lib/inc/LedBug.h"

void vLedDebugTest(){
	//test led debug. 
	// total: 40s
	for(int i = 0; i < 10; i++){
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
		LED_BUG_BLINK;
		_delay_ms(500);
	}	
	vLedCtrl(LED_FAST_BLINK);
      24:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__vector_11>
      30:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	_delay_ms(10000);
	vLedCtrl(LED_SLOW_BLINK);
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
	_delay_ms(10000);
	vLedCtrl(LED_STARTUP_COMPELETE);
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3f       	cpi	r26, 0xF6	; 246
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a8 05 	call	0xb50	; 0xb50 <main>
      8a:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <v_init_debug_via_uart>:
	/*
     *  Initialize UART library for debugger, pass baud rate and AVR CPU clock
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )     
     */	
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 		
      92:	86 e2       	ldi	r24, 0x26	; 38
      94:	90 e0       	ldi	r25, 0x00	; 0
      96:	0e 94 53 05 	call	0xaa6	; 0xaa6 <uart_init>
	
	//stdout = &usartstd;
	ptr_rx_buff = (unsigned int *)calloc(DEBUG_BUFF_SIZE,sizeof(unsigned int));
      9a:	62 e0       	ldi	r22, 0x02	; 2
      9c:	70 e0       	ldi	r23, 0x00	; 0
      9e:	80 e4       	ldi	r24, 0x40	; 64
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	0e 94 98 07 	call	0xf30	; 0xf30 <calloc>
      a6:	90 93 bd 01 	sts	0x01BD, r25
      aa:	80 93 bc 01 	sts	0x01BC, r24
	ptr_command_data = (uint8_t *)calloc(DEBUG_BUFF_SIZE,sizeof(uint8_t));
      ae:	61 e0       	ldi	r22, 0x01	; 1
      b0:	70 e0       	ldi	r23, 0x00	; 0
      b2:	80 e4       	ldi	r24, 0x40	; 64
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 98 07 	call	0xf30	; 0xf30 <calloc>
      ba:	90 93 c1 01 	sts	0x01C1, r25
      be:	80 93 c0 01 	sts	0x01C0, r24
	index_rx_buf = 0;
      c2:	10 92 bf 01 	sts	0x01BF, r1
      c6:	10 92 be 01 	sts	0x01BE, r1
      ca:	08 95       	ret

000000cc <bDebugProcess>:
/*
	@brief:		This function have been handle of main function
	@param:		none
	@return:	none 
*/
PUBLIC bool bDebugProcess(void){
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
	
	// [Vo Huu Tai 8/8/2015 ]  Note!! unsigned int only, i don't know why ?? .. :'(
	unsigned int ucUartDataIn;
	ucUartDataIn = uart_getc();	
      d0:	0e 94 67 05 	call	0xace	; 0xace <uart_getc>

	if(ucUartDataIn & UART_NO_DATA){
      d4:	90 fd       	sbrc	r25, 0
      d6:	67 c0       	rjmp	.+206    	; 0x1a6 <bDebugProcess+0xda>
		return false; //nothing in UART buffer, return
	} else{
		#ifdef _IN_FILE_BUD_
		//uart_putc(ucUartDataIn);
		#endif
		if(ucUartDataIn == '>'){ //first UART data incoming
      d8:	8e 33       	cpi	r24, 0x3E	; 62
      da:	91 05       	cpc	r25, r1
      dc:	39 f4       	brne	.+14     	; 0xec <bDebugProcess+0x20>
			index_rx_buf = 0;
      de:	10 92 bf 01 	sts	0x01BF, r1
      e2:	10 92 be 01 	sts	0x01BE, r1
			bIsDubugCommandCompelete = false;
      e6:	10 92 6c 00 	sts	0x006C, r1
      ea:	5d c0       	rjmp	.+186    	; 0x1a6 <bDebugProcess+0xda>
		}
		else if(ucUartDataIn == '<'){//end UART data coming
      ec:	8c 33       	cpi	r24, 0x3C	; 60
      ee:	91 05       	cpc	r25, r1
      f0:	09 f0       	breq	.+2      	; 0xf4 <bDebugProcess+0x28>
      f2:	42 c0       	rjmp	.+132    	; 0x178 <bDebugProcess+0xac>
			
			sUartPacket.ucInfo = ptr_rx_buff[0];
      f4:	e0 91 bc 01 	lds	r30, 0x01BC
      f8:	f0 91 bd 01 	lds	r31, 0x01BD
      fc:	80 81       	ld	r24, Z
      fe:	80 93 b7 01 	sts	0x01B7, r24
			sUartPacket.ucDataLength = ptr_rx_buff[1];
     102:	82 81       	ldd	r24, Z+2	; 0x02
     104:	e8 eb       	ldi	r30, 0xB8	; 184
     106:	f1 e0       	ldi	r31, 0x01	; 1
     108:	80 83       	st	Z, r24
			
			for(uint8_t i = 0; i < sUartPacket.ucDataLength; i++){
     10a:	80 81       	ld	r24, Z
     10c:	88 23       	and	r24, r24
     10e:	c9 f0       	breq	.+50     	; 0x142 <bDebugProcess+0x76>
     110:	20 e0       	ldi	r18, 0x00	; 0
     112:	ef 01       	movw	r28, r30
				ptr_command_data[i] = ptr_rx_buff[i+2];
     114:	82 2f       	mov	r24, r18
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	e0 91 c0 01 	lds	r30, 0x01C0
     11c:	f0 91 c1 01 	lds	r31, 0x01C1
     120:	e8 0f       	add	r30, r24
     122:	f9 1f       	adc	r31, r25
     124:	02 96       	adiw	r24, 0x02	; 2
     126:	88 0f       	add	r24, r24
     128:	99 1f       	adc	r25, r25
     12a:	a0 91 bc 01 	lds	r26, 0x01BC
     12e:	b0 91 bd 01 	lds	r27, 0x01BD
     132:	a8 0f       	add	r26, r24
     134:	b9 1f       	adc	r27, r25
     136:	8c 91       	ld	r24, X
     138:	80 83       	st	Z, r24
		else if(ucUartDataIn == '<'){//end UART data coming
			
			sUartPacket.ucInfo = ptr_rx_buff[0];
			sUartPacket.ucDataLength = ptr_rx_buff[1];
			
			for(uint8_t i = 0; i < sUartPacket.ucDataLength; i++){
     13a:	2f 5f       	subi	r18, 0xFF	; 255
     13c:	88 81       	ld	r24, Y
     13e:	28 17       	cp	r18, r24
     140:	48 f3       	brcs	.-46     	; 0x114 <bDebugProcess+0x48>
				ptr_command_data[i] = ptr_rx_buff[i+2];
			}
			sUartPacket.ucPtrData = ptr_command_data;
     142:	80 91 c0 01 	lds	r24, 0x01C0
     146:	90 91 c1 01 	lds	r25, 0x01C1
     14a:	90 93 ba 01 	sts	0x01BA, r25
     14e:	80 93 b9 01 	sts	0x01B9, r24
			sUartPacket.ucCheckSum = ptr_rx_buff[sUartPacket.ucDataLength + 2];
     152:	e0 91 b8 01 	lds	r30, 0x01B8
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	32 96       	adiw	r30, 0x02	; 2
     15a:	ee 0f       	add	r30, r30
     15c:	ff 1f       	adc	r31, r31
     15e:	80 91 bc 01 	lds	r24, 0x01BC
     162:	90 91 bd 01 	lds	r25, 0x01BD
     166:	e8 0f       	add	r30, r24
     168:	f9 1f       	adc	r31, r25
     16a:	80 81       	ld	r24, Z
     16c:	80 93 bb 01 	sts	0x01BB, r24
			for(uint8_t i = 0; i < sUartPacket.ucDataLength; i++){
				vPutIntNum(sUartPacket.ucPtrData[i],DEC_TYPE);
			}
			vPutStr("========================\n");			
			#endif		   
			bIsDubugCommandCompelete = true;
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	80 93 6c 00 	sts	0x006C, r24
     176:	17 c0       	rjmp	.+46     	; 0x1a6 <bDebugProcess+0xda>
		}
		else { //get data
			bIsDubugCommandCompelete = false;
     178:	10 92 6c 00 	sts	0x006C, r1
			ptr_rx_buff[index_rx_buf++] = ucUartDataIn;			
     17c:	e0 91 bc 01 	lds	r30, 0x01BC
     180:	f0 91 bd 01 	lds	r31, 0x01BD
     184:	20 91 be 01 	lds	r18, 0x01BE
     188:	30 91 bf 01 	lds	r19, 0x01BF
     18c:	a9 01       	movw	r20, r18
     18e:	4f 5f       	subi	r20, 0xFF	; 255
     190:	5f 4f       	sbci	r21, 0xFF	; 255
     192:	50 93 bf 01 	sts	0x01BF, r21
     196:	40 93 be 01 	sts	0x01BE, r20
     19a:	22 0f       	add	r18, r18
     19c:	33 1f       	adc	r19, r19
     19e:	e2 0f       	add	r30, r18
     1a0:	f3 1f       	adc	r31, r19
     1a2:	91 83       	std	Z+1, r25	; 0x01
     1a4:	80 83       	st	Z, r24
		}		
	}	

	return false;
}
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	08 95       	ret

000001ae <bMsgIsOK>:
	@brief:		Check msg is OK
	@param:		none
	@return:	True: msg ready be used 
*/
PUBLIC bool bMsgIsOK(){
	if(bIsDubugCommandCompelete){
     1ae:	80 91 6c 00 	lds	r24, 0x006C
     1b2:	88 23       	and	r24, r24
     1b4:	21 f0       	breq	.+8      	; 0x1be <bMsgIsOK+0x10>
		if((sUartPacket.ucCheckSum | 0xff) == 0xff)return true;
     1b6:	80 91 bb 01 	lds	r24, 0x01BB
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	08 95       	ret
	}	
	return false;
     1be:	80 e0       	ldi	r24, 0x00	; 0
}
     1c0:	08 95       	ret

000001c2 <ucGetCMDInfo>:
	@brief:		Get command info
	@param:		none
	@return:	command info 
*/
PUBLIC uint8_t ucGetCMDInfo(){
	return sUartPacket.ucInfo;
     1c2:	80 91 b7 01 	lds	r24, 0x01B7
}
     1c6:	08 95       	ret

000001c8 <vSetCMDInfo>:
	@brief:		Set CMD info
	@param:		command info
	@return:	none 
*/
PUBLIC void vSetCMDInfo(uint8_t ucCMDType){
	sUartPacket.ucInfo = ucCMDType;
     1c8:	80 93 b7 01 	sts	0x01B7, r24
     1cc:	08 95       	ret

000001ce <ucGetData>:
/*
	@brief:		Get data of S_UART_PACKET
	@param:		pointer to saving data
	@return:	none 
*/
PUBLIC void ucGetData(uint8_t *ucPrtData){
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
	// [Vo Huu Tai 9/8/2015 ]  why
	//ucPrtData = sUartPacket.ucPtrData; //why, it not work
	for (int i = 0; i < sUartPacket.ucDataLength; i++)
     1d2:	20 91 b8 01 	lds	r18, 0x01B8
     1d6:	22 23       	and	r18, r18
     1d8:	b1 f0       	breq	.+44     	; 0x206 <ucGetData+0x38>
     1da:	e8 2f       	mov	r30, r24
     1dc:	f9 2f       	mov	r31, r25
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
	{
		ucPrtData[i] = sUartPacket.ucPtrData[i];
     1e2:	49 eb       	ldi	r20, 0xB9	; 185
     1e4:	51 e0       	ldi	r21, 0x01	; 1
	@return:	none 
*/
PUBLIC void ucGetData(uint8_t *ucPrtData){
	// [Vo Huu Tai 9/8/2015 ]  why
	//ucPrtData = sUartPacket.ucPtrData; //why, it not work
	for (int i = 0; i < sUartPacket.ucDataLength; i++)
     1e6:	68 eb       	ldi	r22, 0xB8	; 184
     1e8:	71 e0       	ldi	r23, 0x01	; 1
	{
		ucPrtData[i] = sUartPacket.ucPtrData[i];
     1ea:	ea 01       	movw	r28, r20
     1ec:	a8 81       	ld	r26, Y
     1ee:	b9 81       	ldd	r27, Y+1	; 0x01
     1f0:	a8 0f       	add	r26, r24
     1f2:	b9 1f       	adc	r27, r25
     1f4:	2c 91       	ld	r18, X
     1f6:	21 93       	st	Z+, r18
	@return:	none 
*/
PUBLIC void ucGetData(uint8_t *ucPrtData){
	// [Vo Huu Tai 9/8/2015 ]  why
	//ucPrtData = sUartPacket.ucPtrData; //why, it not work
	for (int i = 0; i < sUartPacket.ucDataLength; i++)
     1f8:	01 96       	adiw	r24, 0x01	; 1
     1fa:	db 01       	movw	r26, r22
     1fc:	2c 91       	ld	r18, X
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	82 17       	cp	r24, r18
     202:	93 07       	cpc	r25, r19
     204:	94 f3       	brlt	.-28     	; 0x1ea <ucGetData+0x1c>
	for(uint8_t i = 0; i < sUartPacket.ucDataLength; i++){
		vPutIntNum(ucPrtData[i],DEC_TYPE);
	}	
	vPutStr("ucGetData() END\n");
	#endif
}
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <ucCalChecSum>:
	@brief:		Internal function, Cal checksum
	@param:		UART PACKET
	@return:	Check sum of data  
	@Note:		Mine, check sum for only data, not for type and length,..
*/
PRIVATE uint8_t ucCalChecSum(struct S_UART_PACKET sPacket){
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	00 d0       	rcall	.+0      	; 0x212 <ucCalChecSum+0x6>
     212:	00 d0       	rcall	.+0      	; 0x214 <ucCalChecSum+0x8>
     214:	1f 92       	push	r1
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	49 83       	std	Y+1, r20	; 0x01
     21c:	5a 83       	std	Y+2, r21	; 0x02
     21e:	6b 83       	std	Y+3, r22	; 0x03
     220:	7c 83       	std	Y+4, r23	; 0x04
     222:	8d 83       	std	Y+5, r24	; 0x05
	
	int ucRet = 0;
	
	ucRet += sPacket.ucInfo;
	ucRet += sPacket.ucDataLength;
     224:	65 2f       	mov	r22, r21
     226:	70 e0       	ldi	r23, 0x00	; 0
     228:	9b 01       	movw	r18, r22
     22a:	24 0f       	add	r18, r20
     22c:	31 1d       	adc	r19, r1
     22e:	c9 01       	movw	r24, r18
	for (int i = 0; i < sPacket.ucDataLength; i++)
     230:	16 16       	cp	r1, r22
     232:	17 06       	cpc	r1, r23
     234:	64 f4       	brge	.+24     	; 0x24e <ucCalChecSum+0x42>
     236:	eb 81       	ldd	r30, Y+3	; 0x03
     238:	fc 81       	ldd	r31, Y+4	; 0x04
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
	{
		 ucRet += sPacket.ucPtrData[i];
     23e:	41 91       	ld	r20, Z+
     240:	84 0f       	add	r24, r20
     242:	91 1d       	adc	r25, r1
	
	int ucRet = 0;
	
	ucRet += sPacket.ucInfo;
	ucRet += sPacket.ucDataLength;
	for (int i = 0; i < sPacket.ucDataLength; i++)
     244:	2f 5f       	subi	r18, 0xFF	; 255
     246:	3f 4f       	sbci	r19, 0xFF	; 255
     248:	26 17       	cp	r18, r22
     24a:	37 07       	cpc	r19, r23
     24c:	c4 f3       	brlt	.-16     	; 0x23e <ucCalChecSum+0x32>
		 ucRet += sPacket.ucPtrData[i];
	}
	 ucRet ^= 0xFF;
	 return (uint8_t) ucRet;
	
}
     24e:	80 95       	com	r24
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <vSendMSG>:
/*
	@brief:		Sending msg via UART
	@param:		msg to send
	@return:	none 
*/
PUBLIC void vSendMSG(struct S_UART_PACKET K_MSG){
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	00 d0       	rcall	.+0      	; 0x272 <vSendMSG+0x12>
     272:	00 d0       	rcall	.+0      	; 0x274 <vSendMSG+0x14>
     274:	1f 92       	push	r1
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
     27a:	49 83       	std	Y+1, r20	; 0x01
     27c:	e5 2e       	mov	r14, r21
     27e:	5a 83       	std	Y+2, r21	; 0x02
     280:	6b 83       	std	Y+3, r22	; 0x03
     282:	7c 83       	std	Y+4, r23	; 0x04
     284:	8d 83       	std	Y+5, r24	; 0x05
	       >	type	datalength		data[0:length]	checksum	<
		   
		   >	0			1			48				xx		<
	
	*/
	uint8_t *ucPtrDataSend = (uint8_t*)calloc(DEBUG_BUFF_SIZE,sizeof(uint8_t));
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e4       	ldi	r24, 0x40	; 64
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 98 07 	call	0xf30	; 0xf30 <calloc>
     292:	8c 01       	movw	r16, r24
	
	ucPtrDataSend[0] = '>';
     294:	8e e3       	ldi	r24, 0x3E	; 62
     296:	f8 01       	movw	r30, r16
     298:	80 83       	st	Z, r24
	ucPtrDataSend[1] = K_MSG.ucInfo;
     29a:	89 81       	ldd	r24, Y+1	; 0x01
     29c:	81 83       	std	Z+1, r24	; 0x01
	ucPtrDataSend[2] = K_MSG.ucDataLength;
     29e:	e2 82       	std	Z+2, r14	; 0x02
	
	for(int i = 0; i < K_MSG.ucDataLength; i++){
     2a0:	f1 2c       	mov	r15, r1
     2a2:	1e 14       	cp	r1, r14
     2a4:	1f 04       	cpc	r1, r15
     2a6:	64 f4       	brge	.+24     	; 0x2c0 <vSendMSG+0x60>
     2a8:	ab 81       	ldd	r26, Y+3	; 0x03
     2aa:	bc 81       	ldd	r27, Y+4	; 0x04
     2ac:	33 96       	adiw	r30, 0x03	; 3
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
		ucPtrDataSend[3 + i] = K_MSG.ucPtrData[i];
     2b2:	8d 91       	ld	r24, X+
     2b4:	81 93       	st	Z+, r24
	
	ucPtrDataSend[0] = '>';
	ucPtrDataSend[1] = K_MSG.ucInfo;
	ucPtrDataSend[2] = K_MSG.ucDataLength;
	
	for(int i = 0; i < K_MSG.ucDataLength; i++){
     2b6:	2f 5f       	subi	r18, 0xFF	; 255
     2b8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ba:	2e 15       	cp	r18, r14
     2bc:	3f 05       	cpc	r19, r15
     2be:	cc f3       	brlt	.-14     	; 0x2b2 <vSendMSG+0x52>
		ucPtrDataSend[3 + i] = K_MSG.ucPtrData[i];
	}
	
	ucPtrDataSend[3 + K_MSG.ucDataLength] = ucCalChecSum(K_MSG);
     2c0:	67 01       	movw	r12, r14
     2c2:	f3 e0       	ldi	r31, 0x03	; 3
     2c4:	cf 0e       	add	r12, r31
     2c6:	d1 1c       	adc	r13, r1
     2c8:	c0 0e       	add	r12, r16
     2ca:	d1 1e       	adc	r13, r17
     2cc:	49 81       	ldd	r20, Y+1	; 0x01
     2ce:	5a 81       	ldd	r21, Y+2	; 0x02
     2d0:	6b 81       	ldd	r22, Y+3	; 0x03
     2d2:	7c 81       	ldd	r23, Y+4	; 0x04
     2d4:	8d 81       	ldd	r24, Y+5	; 0x05
     2d6:	0e 94 06 01 	call	0x20c	; 0x20c <ucCalChecSum>
     2da:	f6 01       	movw	r30, r12
     2dc:	80 83       	st	Z, r24
	ucPtrDataSend[4 + K_MSG.ucDataLength] = '<';	
     2de:	f8 01       	movw	r30, r16
     2e0:	ee 0d       	add	r30, r14
     2e2:	ff 1d       	adc	r31, r15
     2e4:	8c e3       	ldi	r24, 0x3C	; 60
     2e6:	84 83       	std	Z+4, r24	; 0x04
	
	
	for(uint8_t i = 0; i < (K_MSG.ucDataLength + 5); i++){
     2e8:	c7 01       	movw	r24, r14
     2ea:	05 96       	adiw	r24, 0x05	; 5
     2ec:	7c 01       	movw	r14, r24
     2ee:	d1 2c       	mov	r13, r1
		uart_putc(ucPtrDataSend[i]);
     2f0:	f8 01       	movw	r30, r16
     2f2:	ed 0d       	add	r30, r13
     2f4:	f1 1d       	adc	r31, r1
     2f6:	80 81       	ld	r24, Z
     2f8:	0e 94 80 05 	call	0xb00	; 0xb00 <uart_putc>
	
	ucPtrDataSend[3 + K_MSG.ucDataLength] = ucCalChecSum(K_MSG);
	ucPtrDataSend[4 + K_MSG.ucDataLength] = '<';	
	
	
	for(uint8_t i = 0; i < (K_MSG.ucDataLength + 5); i++){
     2fc:	d3 94       	inc	r13
     2fe:	2d 2d       	mov	r18, r13
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	2e 15       	cp	r18, r14
     304:	3f 05       	cpc	r19, r15
     306:	a4 f3       	brlt	.-24     	; 0x2f0 <vSendMSG+0x90>
		uart_putc(ucPtrDataSend[i]);
	}
	
	free(ucPtrDataSend);
     308:	c8 01       	movw	r24, r16
     30a:	0e 94 4c 08 	call	0x1098	; 0x1098 <free>
}
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	df 90       	pop	r13
     326:	cf 90       	pop	r12
     328:	08 95       	ret

0000032a <vOutLed7>:
/*
	@brief:		Send data data' LED 7 segment to slave board
	@param:		Data to be sent
	@return:	none 
*/
PUBLIC void vOutLed7(unsigned int uiData){
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	27 97       	sbiw	r28, 0x07	; 7
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	0f be       	out	0x3f, r0	; 63
     340:	cd bf       	out	0x3d, r28	; 61
     342:	8c 01       	movw	r16, r24
	if(uiData == uiOldDataLed7seg)return;
     344:	80 91 6a 00 	lds	r24, 0x006A
     348:	90 91 6b 00 	lds	r25, 0x006B
     34c:	08 17       	cp	r16, r24
     34e:	19 07       	cpc	r17, r25
     350:	29 f1       	breq	.+74     	; 0x39c <vOutLed7+0x72>
	
	
	struct S_UART_PACKET msg ;
	uint8_t ucPrtData[2];
	
	ucPrtData[0] = uiData / 100;
     352:	98 01       	movw	r18, r16
     354:	36 95       	lsr	r19
     356:	27 95       	ror	r18
     358:	36 95       	lsr	r19
     35a:	27 95       	ror	r18
     35c:	ab e7       	ldi	r26, 0x7B	; 123
     35e:	b4 e1       	ldi	r27, 0x14	; 20
     360:	0e 94 89 07 	call	0xf12	; 0xf12 <__umulhisi3>
     364:	96 95       	lsr	r25
     366:	87 95       	ror	r24
     368:	8e 83       	std	Y+6, r24	; 0x06
	ucPrtData[1] = uiData % 100;
     36a:	44 e6       	ldi	r20, 0x64	; 100
     36c:	48 9f       	mul	r20, r24
     36e:	90 01       	movw	r18, r0
     370:	49 9f       	mul	r20, r25
     372:	30 0d       	add	r19, r0
     374:	11 24       	eor	r1, r1
     376:	c8 01       	movw	r24, r16
     378:	82 1b       	sub	r24, r18
     37a:	93 0b       	sbc	r25, r19
     37c:	8f 83       	std	Y+7, r24	; 0x07
	
	msg.ucInfo = CMD_UPDATE_LED_7SEG;
	msg.ucDataLength = 2;
	msg.ucPtrData = ucPrtData;	
     37e:	ce 01       	movw	r24, r28
     380:	06 96       	adiw	r24, 0x06	; 6
     382:	68 2f       	mov	r22, r24
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	8b 83       	std	Y+3, r24	; 0x03
	
	vSendMSG(msg);	
     388:	40 e0       	ldi	r20, 0x00	; 0
     38a:	52 e0       	ldi	r21, 0x02	; 2
     38c:	7c 81       	ldd	r23, Y+4	; 0x04
     38e:	8d 81       	ldd	r24, Y+5	; 0x05
     390:	0e 94 30 01 	call	0x260	; 0x260 <vSendMSG>
	
	uiOldDataLed7seg = uiData;
     394:	10 93 6b 00 	sts	0x006B, r17
     398:	00 93 6a 00 	sts	0x006A, r16
}
     39c:	27 96       	adiw	r28, 0x07	; 7
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	de bf       	out	0x3e, r29	; 62
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	cd bf       	out	0x3d, r28	; 61
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	08 95       	ret

000003b2 <vBeep>:
/*
	@brief:		send msg control beep
	@param:		time beep in ms, form 000 to 9999 ms
	@return:	none 
*/
PUBLIC void vBeep(unsigned int uiBeepTime_ms){
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	27 97       	sbiw	r28, 0x07	; 7
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	cd bf       	out	0x3d, r28	; 61
     3c6:	ac 01       	movw	r20, r24
     3c8:	40 31       	cpi	r20, 0x10	; 16
     3ca:	87 e2       	ldi	r24, 0x27	; 39
     3cc:	58 07       	cpc	r21, r24
     3ce:	10 f0       	brcs	.+4      	; 0x3d4 <vBeep+0x22>
     3d0:	4f e0       	ldi	r20, 0x0F	; 15
     3d2:	57 e2       	ldi	r21, 0x27	; 39
	uint8_t ucPrtData[2];
	struct S_UART_PACKET msg ;
	
	if(uiBeepTime_ms > 9999)uiBeepTime_ms = 9999;
	
	ucPrtData[0] = uiBeepTime_ms / 100;
     3d4:	9a 01       	movw	r18, r20
     3d6:	36 95       	lsr	r19
     3d8:	27 95       	ror	r18
     3da:	36 95       	lsr	r19
     3dc:	27 95       	ror	r18
     3de:	ab e7       	ldi	r26, 0x7B	; 123
     3e0:	b4 e1       	ldi	r27, 0x14	; 20
     3e2:	0e 94 89 07 	call	0xf12	; 0xf12 <__umulhisi3>
     3e6:	96 95       	lsr	r25
     3e8:	87 95       	ror	r24
     3ea:	89 83       	std	Y+1, r24	; 0x01
	ucPrtData[1] = uiBeepTime_ms % 100;
     3ec:	64 e6       	ldi	r22, 0x64	; 100
     3ee:	68 9f       	mul	r22, r24
     3f0:	90 01       	movw	r18, r0
     3f2:	69 9f       	mul	r22, r25
     3f4:	30 0d       	add	r19, r0
     3f6:	11 24       	eor	r1, r1
     3f8:	42 1b       	sub	r20, r18
     3fa:	53 0b       	sbc	r21, r19
     3fc:	4a 83       	std	Y+2, r20	; 0x02

	
	msg.ucInfo = CMD_BEEP;
	msg.ucDataLength = 2;
	msg.ucPtrData = ucPrtData;
     3fe:	ce 01       	movw	r24, r28
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	68 2f       	mov	r22, r24
     404:	9e 83       	std	Y+6, r25	; 0x06
     406:	8d 83       	std	Y+5, r24	; 0x05
	
	vSendMSG(msg);	
     408:	41 e0       	ldi	r20, 0x01	; 1
     40a:	52 e0       	ldi	r21, 0x02	; 2
     40c:	7e 81       	ldd	r23, Y+6	; 0x06
     40e:	8f 81       	ldd	r24, Y+7	; 0x07
     410:	0e 94 30 01 	call	0x260	; 0x260 <vSendMSG>
}
     414:	27 96       	adiw	r28, 0x07	; 7
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	08 95       	ret

00000426 <iGetInlined>:
/*
	@brief:		Get inclined of mpu6050 board
	@param:		none
	@return:	inclined of sensor 
*/
PUBLIC int iGetInlined(){
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	00 d0       	rcall	.+0      	; 0x42c <iGetInlined+0x6>
     42c:	00 d0       	rcall	.+0      	; 0x42e <iGetInlined+0x8>
     42e:	00 d0       	rcall	.+0      	; 0x430 <iGetInlined+0xa>
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
	uint8_t ucPrtData[1] = {0};// = (uint8_t *)calloc(1,sizeof(uint8_t));	
     434:	19 82       	std	Y+1, r1	; 0x01
	
	struct S_UART_PACKET msg ;
	msg.ucInfo = CMD_SENSOR;
	msg.ucDataLength = 1;
	msg.ucPtrData = ucPrtData;
     436:	ce 01       	movw	r24, r28
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	68 2f       	mov	r22, r24
     43c:	9d 83       	std	Y+5, r25	; 0x05
     43e:	8c 83       	std	Y+4, r24	; 0x04
	vSendMSG(msg);	
     440:	42 e0       	ldi	r20, 0x02	; 2
     442:	51 e0       	ldi	r21, 0x01	; 1
     444:	7d 81       	ldd	r23, Y+5	; 0x05
     446:	8e 81       	ldd	r24, Y+6	; 0x06
     448:	0e 94 30 01 	call	0x260	; 0x260 <vSendMSG>
		
	return 0;
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	26 96       	adiw	r28, 0x06	; 6
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <vInitTimer0>:
				Normal mode.
				F = 12Mhz
				T = 5.33333us
				=> prescaler = 64
	*/
	TCCR0 = (1 << CS01) | (1<<CS00);
     462:	83 e0       	ldi	r24, 0x03	; 3
     464:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
     466:	89 b7       	in	r24, 0x39	; 57
     468:	81 60       	ori	r24, 0x01	; 1
     46a:	89 bf       	out	0x39, r24	; 57
     46c:	08 95       	ret

0000046e <vInitTimer1>:
				F = 12Mhz
				T = 15ms
				=> prescaler = 8.
				ICR1 = 15ms / ((1/12Mhz)*8) = 22500	
	*/
	TCCR1A = (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
     46e:	82 ea       	ldi	r24, 0xA2	; 162
     470:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
     472:	8a e1       	ldi	r24, 0x1A	; 26
     474:	8e bd       	out	0x2e, r24	; 46
	ICR1 = PWM_PERIOD_LEFT_MAX;
     476:	84 ee       	ldi	r24, 0xE4	; 228
     478:	97 e5       	ldi	r25, 0x57	; 87
     47a:	97 bd       	out	0x27, r25	; 39
     47c:	86 bd       	out	0x26, r24	; 38
	OCR1A = SERVO_CENTER; //Servo, 1ms <-> 1500 and 2ms <-> 3000
     47e:	80 e6       	ldi	r24, 0x60	; 96
     480:	99 e0       	ldi	r25, 0x09	; 9
     482:	9b bd       	out	0x2b, r25	; 43
     484:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 0;//Motor Left
     486:	19 bc       	out	0x29, r1	; 41
     488:	18 bc       	out	0x28, r1	; 40
     48a:	08 95       	ret

0000048c <vInitProgram>:
#include "../inc/hardware_config.h"
#include "../inc/debug.h"

void vInitProgram(){
	//disable local interrupt
	cli();
     48c:	f8 94       	cli
	
	//IO initialize
	LED_BUB_INIT;		//Led debug is output
     48e:	bf 9a       	sbi	0x17, 7	; 23
     490:	c7 9a       	sbi	0x18, 7	; 24
	KEY_INIT;			//Key is input
     492:	b8 98       	cbi	0x17, 0	; 23
     494:	c0 9a       	sbi	0x18, 0	; 24
     496:	b9 98       	cbi	0x17, 1	; 23
     498:	c1 9a       	sbi	0x18, 1	; 24
     49a:	ba 98       	cbi	0x17, 2	; 23
     49c:	c2 9a       	sbi	0x18, 2	; 24
	SWITCH_INIT;		//Switch is input
     49e:	a3 98       	cbi	0x14, 3	; 20
     4a0:	ab 9a       	sbi	0x15, 3	; 21
     4a2:	a2 98       	cbi	0x14, 2	; 20
     4a4:	aa 9a       	sbi	0x15, 2	; 21
     4a6:	a1 98       	cbi	0x14, 1	; 20
     4a8:	a9 9a       	sbi	0x15, 1	; 21
     4aa:	a0 98       	cbi	0x14, 0	; 20
     4ac:	a8 9a       	sbi	0x15, 0	; 21
     4ae:	a6 98       	cbi	0x14, 6	; 20
     4b0:	ae 9a       	sbi	0x15, 6	; 21
	MOTOR_LEFT_INIT;
     4b2:	bc 9a       	sbi	0x17, 4	; 23
     4b4:	c4 98       	cbi	0x18, 4	; 24
     4b6:	be 9a       	sbi	0x17, 6	; 23
     4b8:	c6 9a       	sbi	0x18, 6	; 24
     4ba:	8c 9a       	sbi	0x11, 4	; 17
	MOTOR_RIGHT_INIT;
     4bc:	bb 9a       	sbi	0x17, 3	; 23
     4be:	c3 98       	cbi	0x18, 3	; 24
     4c0:	bd 9a       	sbi	0x17, 5	; 23
     4c2:	c5 9a       	sbi	0x18, 5	; 24
     4c4:	8f 9a       	sbi	0x11, 7	; 17
	SERVO_INIT;
     4c6:	8d 9a       	sbi	0x11, 5	; 17
	SLAVE_ENABLE_INIT;
     4c8:	a4 9a       	sbi	0x14, 4	; 20
	SLAVE_ON;
     4ca:	ac 9a       	sbi	0x15, 4	; 21
	USB_DISABLE;
     4cc:	a7 98       	cbi	0x14, 7	; 20
     4ce:	a7 98       	cbi	0x14, 7	; 20
	//SENSOR_INTIT; //Use ADC
	ADC_INIT;
     4d0:	1a ba       	out	0x1a, r1	; 26
     4d2:	85 e8       	ldi	r24, 0x85	; 133
     4d4:	86 b9       	out	0x06, r24	; 6
     4d6:	80 e4       	ldi	r24, 0x40	; 64
     4d8:	87 b9       	out	0x07, r24	; 7
	
	//Timer and PWM
	vInitTimer0();
     4da:	0e 94 31 02 	call	0x462	; 0x462 <vInitTimer0>
	vInitTimer1();
     4de:	0e 94 37 02 	call	0x46e	; 0x46e <vInitTimer1>
				Non-inverting: COM2[1:0] = 10
				F = 12Mhz
				T = 5.5ms
				=> prescaler = 256.
	*/
	TCCR2 = (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (1 << CS22) | (1 << CS21);
     4e2:	8e e6       	ldi	r24, 0x6E	; 110
     4e4:	85 bd       	out	0x25, r24	; 37
	vInitTimer0();
	vInitTimer1();
	vInitTimer2();	
	
	//SERIAL
	v_init_debug_via_uart();
     4e6:	0e 94 49 00 	call	0x92	; 0x92 <v_init_debug_via_uart>
	//enable local interrupt
	sei();
     4ea:	78 94       	sei
     4ec:	08 95       	ret

000004ee <bKeyIsPress>:
 */ 
#include "../inc/hardware_feature.h"
#include "../inc/debug.h"

bool bKeyIsPress(uint8_t ucKeyID){
	uint8_t mask = (1<<ucKeyID);
     4ee:	21 e0       	ldi	r18, 0x01	; 1
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	a9 01       	movw	r20, r18
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <bKeyIsPress+0xc>
     4f6:	44 0f       	add	r20, r20
     4f8:	55 1f       	adc	r21, r21
     4fa:	8a 95       	dec	r24
     4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <bKeyIsPress+0x8>
     4fe:	ca 01       	movw	r24, r20
     500:	24 2f       	mov	r18, r20
	//key is pressed when pin = 0;
	if((PIN_KEY & mask) != mask){
     502:	36 b3       	in	r19, 0x16	; 22
     504:	34 23       	and	r19, r20
     506:	34 17       	cp	r19, r20
     508:	d1 f0       	breq	.+52     	; 0x53e <bKeyIsPress+0x50>
     50a:	ef e2       	ldi	r30, 0x2F	; 47
     50c:	f5 e7       	ldi	r31, 0x75	; 117
     50e:	31 97       	sbiw	r30, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <bKeyIsPress+0x20>
     512:	00 c0       	rjmp	.+0      	; 0x514 <bKeyIsPress+0x26>
     514:	00 00       	nop
		_delay_ms(10);
		if((PIN_KEY & mask) != mask){
     516:	96 b3       	in	r25, 0x16	; 22
     518:	89 23       	and	r24, r25
     51a:	84 17       	cp	r24, r20
     51c:	91 f0       	breq	.+36     	; 0x542 <bKeyIsPress+0x54>
     51e:	8f e2       	ldi	r24, 0x2F	; 47
     520:	95 e7       	ldi	r25, 0x75	; 117
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <bKeyIsPress+0x34>
     526:	00 c0       	rjmp	.+0      	; 0x528 <bKeyIsPress+0x3a>
     528:	00 00       	nop
			//LED_BUG_ON;
			_delay_ms(10);
			while((PIN_KEY&mask)!=mask);//waiting for key is released
     52a:	86 b3       	in	r24, 0x16	; 22
     52c:	82 23       	and	r24, r18
     52e:	82 13       	cpse	r24, r18
     530:	fc cf       	rjmp	.-8      	; 0x52a <bKeyIsPress+0x3c>
			//LED_BUG_OFF;
			vBeep(30);
     532:	8e e1       	ldi	r24, 0x1E	; 30
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <vBeep>
			return true;
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	08 95       	ret
		}
	}
	return false;
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	08 95       	ret
     542:	80 e0       	ldi	r24, 0x00	; 0
}
     544:	08 95       	ret

00000546 <ucGetSwitch>:

uint8_t ucGetSwitch(){
	uint8_t mask = (1<<SW1) | (1<<SW2) | (1<<SW3) | (1<<SW4);
	uint8_t binData = (~PIN_SWITCH) & mask; 	
     546:	83 b3       	in	r24, 0x13	; 19
     548:	80 95       	com	r24
	// Must swap switch bit
	//binData = 0000 1101 => 0000 1011 		
	return binData;
}
     54a:	8f 70       	andi	r24, 0x0F	; 15
     54c:	08 95       	ret

0000054e <vMotor>:

/*TaiVH1 -- Aug 11, 2015  brief: Add for control motor and servo*/

void vMotor(int iSpeedLeft, int iSpeedRight){
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	8c 01       	movw	r16, r24
     558:	eb 01       	movw	r28, r22
	uint8_t ucSwData = ucGetSwitch() + 5;//ucSwData = [0..20]
     55a:	0e 94 a3 02 	call	0x546	; 0x546 <ucGetSwitch>
	int iSpeedOfset = (PWM_PERIOD_LEFT_MAX-1)*((float)(ucSwData/20));
	iSpeedOfset = PWM_PERIOD_LEFT_MAX - 1; //Fix me
	//Speed motor left
	if(iSpeedLeft >= 0){
     55e:	11 23       	and	r17, r17
     560:	cc f0       	brlt	.+50     	; 0x594 <vMotor+0x46>
		sbi(PORT_MOTOR,DIR_L);
     562:	c4 9a       	sbi	0x18, 4	; 24
		OCR1B = iSpeedOfset * ((float)(iSpeedLeft * 0.01));
     564:	b8 01       	movw	r22, r16
     566:	88 27       	eor	r24, r24
     568:	77 fd       	sbrc	r23, 7
     56a:	80 95       	com	r24
     56c:	98 2f       	mov	r25, r24
     56e:	0e 94 9a 06 	call	0xd34	; 0xd34 <__floatsisf>
     572:	2a e0       	ldi	r18, 0x0A	; 10
     574:	37 ed       	ldi	r19, 0xD7	; 215
     576:	43 e2       	ldi	r20, 0x23	; 35
     578:	5c e3       	ldi	r21, 0x3C	; 60
     57a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__mulsf3>
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	36 ec       	ldi	r19, 0xC6	; 198
     582:	4f ea       	ldi	r20, 0xAF	; 175
     584:	56 e4       	ldi	r21, 0x46	; 70
     586:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__mulsf3>
     58a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__fixunssfsi>
     58e:	79 bd       	out	0x29, r23	; 41
     590:	68 bd       	out	0x28, r22	; 40
     592:	1b c0       	rjmp	.+54     	; 0x5ca <vMotor+0x7c>
	}
	else{
		cbi(PORT_MOTOR,DIR_L);
     594:	c4 98       	cbi	0x18, 4	; 24
		OCR1B = iSpeedOfset * (float)((-iSpeedLeft) * 0.01);
     596:	66 27       	eor	r22, r22
     598:	77 27       	eor	r23, r23
     59a:	60 1b       	sub	r22, r16
     59c:	71 0b       	sbc	r23, r17
     59e:	88 27       	eor	r24, r24
     5a0:	77 fd       	sbrc	r23, 7
     5a2:	80 95       	com	r24
     5a4:	98 2f       	mov	r25, r24
     5a6:	0e 94 9a 06 	call	0xd34	; 0xd34 <__floatsisf>
     5aa:	2a e0       	ldi	r18, 0x0A	; 10
     5ac:	37 ed       	ldi	r19, 0xD7	; 215
     5ae:	43 e2       	ldi	r20, 0x23	; 35
     5b0:	5c e3       	ldi	r21, 0x3C	; 60
     5b2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__mulsf3>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	36 ec       	ldi	r19, 0xC6	; 198
     5ba:	4f ea       	ldi	r20, 0xAF	; 175
     5bc:	56 e4       	ldi	r21, 0x46	; 70
     5be:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__mulsf3>
     5c2:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__fixunssfsi>
     5c6:	79 bd       	out	0x29, r23	; 41
     5c8:	68 bd       	out	0x28, r22	; 40
	}
	//Speed motor right
	iSpeedOfset = PEM_PERIOD_RIGHT_MAX - 1;
	if(iSpeedRight >= 0){
     5ca:	dd 23       	and	r29, r29
     5cc:	c4 f0       	brlt	.+48     	; 0x5fe <vMotor+0xb0>
		cbi(PORT_MOTOR,DIR_R);
     5ce:	c3 98       	cbi	0x18, 3	; 24
		OCR2  = iSpeedOfset * ((float)(iSpeedRight * 0.01));
     5d0:	be 01       	movw	r22, r28
     5d2:	88 27       	eor	r24, r24
     5d4:	77 fd       	sbrc	r23, 7
     5d6:	80 95       	com	r24
     5d8:	98 2f       	mov	r25, r24
     5da:	0e 94 9a 06 	call	0xd34	; 0xd34 <__floatsisf>
     5de:	2a e0       	ldi	r18, 0x0A	; 10
     5e0:	37 ed       	ldi	r19, 0xD7	; 215
     5e2:	43 e2       	ldi	r20, 0x23	; 35
     5e4:	5c e3       	ldi	r21, 0x3C	; 60
     5e6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__mulsf3>
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	4e e7       	ldi	r20, 0x7E	; 126
     5f0:	53 e4       	ldi	r21, 0x43	; 67
     5f2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__mulsf3>
     5f6:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__fixunssfsi>
     5fa:	63 bd       	out	0x23, r22	; 35
     5fc:	1a c0       	rjmp	.+52     	; 0x632 <vMotor+0xe4>
	}
	else{
		sbi(PORT_MOTOR,DIR_R);
     5fe:	c3 9a       	sbi	0x18, 3	; 24
		OCR2  = iSpeedOfset * ((float)((-iSpeedRight) * 0.01));
     600:	66 27       	eor	r22, r22
     602:	77 27       	eor	r23, r23
     604:	6c 1b       	sub	r22, r28
     606:	7d 0b       	sbc	r23, r29
     608:	88 27       	eor	r24, r24
     60a:	77 fd       	sbrc	r23, 7
     60c:	80 95       	com	r24
     60e:	98 2f       	mov	r25, r24
     610:	0e 94 9a 06 	call	0xd34	; 0xd34 <__floatsisf>
     614:	2a e0       	ldi	r18, 0x0A	; 10
     616:	37 ed       	ldi	r19, 0xD7	; 215
     618:	43 e2       	ldi	r20, 0x23	; 35
     61a:	5c e3       	ldi	r21, 0x3C	; 60
     61c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__mulsf3>
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	4e e7       	ldi	r20, 0x7E	; 126
     626:	53 e4       	ldi	r21, 0x43	; 67
     628:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__mulsf3>
     62c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__fixunssfsi>
     630:	63 bd       	out	0x23, r22	; 35
	}
}
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret

0000063c <vServo>:
	}else{
		cbi(PORT_MOTOR,BF_R);
	}
}
void vServo(int iAngle){
	OCR1A = SERVO_CENTER + iAngle*SERVO_ANGLE_STEP;
     63c:	84 5d       	subi	r24, 0xD4	; 212
     63e:	9e 4f       	sbci	r25, 0xFE	; 254
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	9b bd       	out	0x2b, r25	; 43
     64e:	8a bd       	out	0x2a, r24	; 42
     650:	08 95       	ret

00000652 <isTester>:
/*TaiVH1 -- Aug 11, 2015  brief: End add for motor and servo*/

// [Vo Huu Tai 12/8/2015 ]  Add for inclined and tester

bool isTester(){
	if((PIN_SWITCH&(1<<SW_TEST)) == (1<<SW_TEST) )return false;
     652:	83 b3       	in	r24, 0x13	; 19
     654:	86 fb       	bst	r24, 6
     656:	88 27       	eor	r24, r24
     658:	80 f9       	bld	r24, 0
	return true;
}
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	89 27       	eor	r24, r25
     65e:	08 95       	ret

00000660 <uiReadADC>:
uint16_t EEMEM  uiMyEppDataArr[8];
uint16_t uiAdAverage[8],uiAdMin[8],uiAdMax[8];

PUBLIC uint16_t uiReadADC(unsigned char chanenel)
{
	ADMUX = chanenel|ADC_VREF_TYPE;
     660:	80 64       	ori	r24, 0x40	; 64
     662:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
     664:	36 9a       	sbi	0x06, 6	; 6
	loop_until_bit_is_set(ADCSRA,ADIF);
     666:	34 9b       	sbis	0x06, 4	; 6
     668:	fe cf       	rjmp	.-4      	; 0x666 <uiReadADC+0x6>
	return ADCW;
     66a:	84 b1       	in	r24, 0x04	; 4
     66c:	95 b1       	in	r25, 0x05	; 5
}
     66e:	08 95       	ret

00000670 <vLearnColor>:
PUBLIC void vLearnColor()
{
     670:	6f 92       	push	r6
     672:	7f 92       	push	r7
     674:	8f 92       	push	r8
     676:	9f 92       	push	r9
     678:	af 92       	push	r10
     67a:	bf 92       	push	r11
     67c:	cf 92       	push	r12
     67e:	df 92       	push	r13
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	0f 2e       	mov	r0, r31
     68e:	f2 ec       	ldi	r31, 0xC2	; 194
     690:	cf 2e       	mov	r12, r31
     692:	f1 e0       	ldi	r31, 0x01	; 1
     694:	df 2e       	mov	r13, r31
     696:	f0 2d       	mov	r31, r0
     698:	0f 2e       	mov	r0, r31
     69a:	f2 ee       	ldi	r31, 0xE2	; 226
     69c:	ef 2e       	mov	r14, r31
     69e:	f1 e0       	ldi	r31, 0x01	; 1
     6a0:	ff 2e       	mov	r15, r31
     6a2:	f0 2d       	mov	r31, r0
	while(1)
	{  
		vOutLed7(99);
		//ADC0	ADC1	ADC2				ADC6	ADC7
		// xx	 xx		 xx	 x-x	xx	xx	 xx      --
		for(uint8_t i = 0; i < 7; i++)
     6a4:	61 2c       	mov	r6, r1
PUBLIC void vLearnColor()
{
	uint16_t temp = 0;
	while(1)
	{  
		vOutLed7(99);
     6a6:	83 e6       	ldi	r24, 0x63	; 99
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 95 01 	call	0x32a	; 0x32a <vOutLed7>
     6ae:	9c 2c       	mov	r9, r12
     6b0:	ad 2c       	mov	r10, r13
     6b2:	be 2c       	mov	r11, r14
     6b4:	7f 2c       	mov	r7, r15
     6b6:	87 01       	movw	r16, r14
     6b8:	e6 01       	movw	r28, r12
		//ADC0	ADC1	ADC2				ADC6	ADC7
		// xx	 xx		 xx	 x-x	xx	xx	 xx      --
		for(uint8_t i = 0; i < 7; i++)
     6ba:	86 2c       	mov	r8, r6
		{
			temp = uiReadADC(i);
     6bc:	88 2d       	mov	r24, r8
     6be:	0e 94 30 03 	call	0x660	; 0x660 <uiReadADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6c2:	28 ec       	ldi	r18, 0xC8	; 200
     6c4:	2a 95       	dec	r18
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <vLearnColor+0x54>
			_delay_us(50);
			if(uiAdMax[i] == 0) uiAdMax[i] = temp;
     6c8:	28 81       	ld	r18, Y
     6ca:	39 81       	ldd	r19, Y+1	; 0x01
     6cc:	21 15       	cp	r18, r1
     6ce:	31 05       	cpc	r19, r1
     6d0:	19 f4       	brne	.+6      	; 0x6d8 <vLearnColor+0x68>
     6d2:	99 83       	std	Y+1, r25	; 0x01
     6d4:	88 83       	st	Y, r24
     6d6:	05 c0       	rjmp	.+10     	; 0x6e2 <vLearnColor+0x72>
			else if(temp > uiAdMax[i]) uiAdMax[i] = temp;
     6d8:	28 17       	cp	r18, r24
     6da:	39 07       	cpc	r19, r25
     6dc:	10 f4       	brcc	.+4      	; 0x6e2 <vLearnColor+0x72>
     6de:	99 83       	std	Y+1, r25	; 0x01
     6e0:	88 83       	st	Y, r24
     6e2:	f8 01       	movw	r30, r16
			if(uiAdMin[i] == 0) uiAdMin[i] = temp;
     6e4:	20 81       	ld	r18, Z
     6e6:	31 81       	ldd	r19, Z+1	; 0x01
     6e8:	21 15       	cp	r18, r1
     6ea:	31 05       	cpc	r19, r1
     6ec:	19 f4       	brne	.+6      	; 0x6f4 <vLearnColor+0x84>
     6ee:	91 83       	std	Z+1, r25	; 0x01
     6f0:	80 83       	st	Z, r24
     6f2:	05 c0       	rjmp	.+10     	; 0x6fe <vLearnColor+0x8e>
			else if(temp < uiAdMin[i]){
     6f4:	82 17       	cp	r24, r18
     6f6:	93 07       	cpc	r25, r19
     6f8:	10 f4       	brcc	.+4      	; 0x6fe <vLearnColor+0x8e>
				uiAdMin[i] = temp;
     6fa:	91 83       	std	Z+1, r25	; 0x01
     6fc:	80 83       	st	Z, r24
	while(1)
	{  
		vOutLed7(99);
		//ADC0	ADC1	ADC2				ADC6	ADC7
		// xx	 xx		 xx	 x-x	xx	xx	 xx      --
		for(uint8_t i = 0; i < 7; i++)
     6fe:	83 94       	inc	r8
     700:	22 96       	adiw	r28, 0x02	; 2
     702:	0e 5f       	subi	r16, 0xFE	; 254
     704:	1f 4f       	sbci	r17, 0xFF	; 255
     706:	87 e0       	ldi	r24, 0x07	; 7
     708:	88 12       	cpse	r8, r24
     70a:	d8 cf       	rjmp	.-80     	; 0x6bc <vLearnColor+0x4c>
			if(uiAdMin[i] == 0) uiAdMin[i] = temp;
			else if(temp < uiAdMin[i]){
				uiAdMin[i] = temp;
			}
		}
		if(bKeyIsPress(KEY3)) break;//Exit
     70c:	82 e0       	ldi	r24, 0x02	; 2
     70e:	0e 94 77 02 	call	0x4ee	; 0x4ee <bKeyIsPress>
     712:	88 23       	and	r24, r24
     714:	41 f2       	breq	.-112    	; 0x6a6 <vLearnColor+0x36>
	}//end while(1)
	vOutLed7(66);
     716:	82 e4       	ldi	r24, 0x42	; 66
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 95 01 	call	0x32a	; 0x32a <vOutLed7>
	vBeep(100);	_delay_ms(100);	vBeep(100);
     71e:	84 e6       	ldi	r24, 0x64	; 100
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <vBeep>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     726:	9f e7       	ldi	r25, 0x7F	; 127
     728:	a9 ea       	ldi	r26, 0xA9	; 169
     72a:	b3 e0       	ldi	r27, 0x03	; 3
     72c:	91 50       	subi	r25, 0x01	; 1
     72e:	a0 40       	sbci	r26, 0x00	; 0
     730:	b0 40       	sbci	r27, 0x00	; 0
     732:	e1 f7       	brne	.-8      	; 0x72c <vLearnColor+0xbc>
     734:	00 c0       	rjmp	.+0      	; 0x736 <vLearnColor+0xc6>
     736:	00 00       	nop
     738:	84 e6       	ldi	r24, 0x64	; 100
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <vBeep>
	uiAdAverage[7] = 100;//Note, start bar is bit 0. if adc[7] < adc_average[7] it mean start bar is open
     740:	84 e6       	ldi	r24, 0x64	; 100
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	90 93 e1 01 	sts	0x01E1, r25
     748:	80 93 e0 01 	sts	0x01E0, r24
	write_eeprom_word(&uiMyEppDataArr[7] , uiAdAverage[7]);
     74c:	64 e6       	ldi	r22, 0x64	; 100
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	8e e0       	ldi	r24, 0x0E	; 14
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__eewr_word_m16a>
     758:	02 ed       	ldi	r16, 0xD2	; 210
     75a:	11 e0       	ldi	r17, 0x01	; 1
     75c:	0f 2e       	mov	r0, r31
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	cf 2e       	mov	r12, r31
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	df 2e       	mov	r13, r31
     766:	f0 2d       	mov	r31, r0
     768:	0f 2e       	mov	r0, r31
     76a:	f0 ef       	ldi	r31, 0xF0	; 240
     76c:	ef 2e       	mov	r14, r31
     76e:	f1 e0       	ldi	r31, 0x01	; 1
     770:	ff 2e       	mov	r15, r31
     772:	f0 2d       	mov	r31, r0
     774:	c9 2d       	mov	r28, r9
     776:	da 2d       	mov	r29, r10
     778:	8b 2c       	mov	r8, r11
     77a:	97 2c       	mov	r9, r7
	for (uint8_t i = 0; i < 7; i++)
	{
		uiAdAverage[i] = (uiAdMin[i] + uiAdMax[i])/2;
     77c:	f4 01       	movw	r30, r8
     77e:	81 91       	ld	r24, Z+
     780:	91 91       	ld	r25, Z+
     782:	4f 01       	movw	r8, r30
     784:	69 91       	ld	r22, Y+
     786:	79 91       	ld	r23, Y+
     788:	68 0f       	add	r22, r24
     78a:	79 1f       	adc	r23, r25
     78c:	76 95       	lsr	r23
     78e:	67 95       	ror	r22
     790:	d8 01       	movw	r26, r16
     792:	6d 93       	st	X+, r22
     794:	7d 93       	st	X+, r23
     796:	8d 01       	movw	r16, r26
		//adc_average[i] = adc_average[i]*19/20;
		//adc_average[i] = adc_average[i]*((float)1.25);
		write_eeprom_word(&uiMyEppDataArr[i] , uiAdAverage[i]);
     798:	c6 01       	movw	r24, r12
     79a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__eewr_word_m16a>
     79e:	b2 e0       	ldi	r27, 0x02	; 2
     7a0:	cb 0e       	add	r12, r27
     7a2:	d1 1c       	adc	r13, r1
	}//end while(1)
	vOutLed7(66);
	vBeep(100);	_delay_ms(100);	vBeep(100);
	uiAdAverage[7] = 100;//Note, start bar is bit 0. if adc[7] < adc_average[7] it mean start bar is open
	write_eeprom_word(&uiMyEppDataArr[7] , uiAdAverage[7]);
	for (uint8_t i = 0; i < 7; i++)
     7a4:	8e 14       	cp	r8, r14
     7a6:	9f 04       	cpc	r9, r15
     7a8:	49 f7       	brne	.-46     	; 0x77c <vLearnColor+0x10c>
		uiAdAverage[i] = (uiAdMin[i] + uiAdMax[i])/2;
		//adc_average[i] = adc_average[i]*19/20;
		//adc_average[i] = adc_average[i]*((float)1.25);
		write_eeprom_word(&uiMyEppDataArr[i] , uiAdAverage[i]);
	}
}
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	df 90       	pop	r13
     7b8:	cf 90       	pop	r12
     7ba:	bf 90       	pop	r11
     7bc:	af 90       	pop	r10
     7be:	9f 90       	pop	r9
     7c0:	8f 90       	pop	r8
     7c2:	7f 90       	pop	r7
     7c4:	6f 90       	pop	r6
     7c6:	08 95       	ret

000007c8 <ucGetRawSensor>:
PUBLIC uint8_t ucGetRawSensor()
{
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	02 ed       	ldi	r16, 0xD2	; 210
     7da:	11 e0       	ldi	r17, 0x01	; 1
     7dc:	c6 e0       	ldi	r28, 0x06	; 6
     7de:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t result = 0;
     7e0:	d1 2c       	mov	r13, r1
     7e2:	0f 2e       	mov	r0, r31
     7e4:	f6 e0       	ldi	r31, 0x06	; 6
     7e6:	cf 2e       	mov	r12, r31
     7e8:	f0 2d       	mov	r31, r0
		//swap bit here
		if(temp <= uiAdAverage[i]){
			sbi(result,6-i);
		}
		else{
			cbi(result,6-i);	
     7ea:	ee 24       	eor	r14, r14
     7ec:	e3 94       	inc	r14
     7ee:	f1 2c       	mov	r15, r1
	uint16_t temp = 0;
	//ADC0	ADC1	ADC2				ADC6	ADC7
	// xx	 xx		 xx	 x-x	xx	xx	 xx      --
	for(int i = 0; i < 7;i++)
	{
		temp = uiReadADC(i);
     7f0:	8c 2d       	mov	r24, r12
     7f2:	8c 1b       	sub	r24, r28
     7f4:	0e 94 30 03 	call	0x660	; 0x660 <uiReadADC>
		//swap bit here
		if(temp <= uiAdAverage[i]){
     7f8:	f8 01       	movw	r30, r16
     7fa:	21 91       	ld	r18, Z+
     7fc:	31 91       	ld	r19, Z+
     7fe:	8f 01       	movw	r16, r30
     800:	28 17       	cp	r18, r24
     802:	39 07       	cpc	r19, r25
     804:	48 f0       	brcs	.+18     	; 0x818 <ucGetRawSensor+0x50>
			sbi(result,6-i);
     806:	97 01       	movw	r18, r14
     808:	0c 2e       	mov	r0, r28
     80a:	02 c0       	rjmp	.+4      	; 0x810 <ucGetRawSensor+0x48>
     80c:	22 0f       	add	r18, r18
     80e:	33 1f       	adc	r19, r19
     810:	0a 94       	dec	r0
     812:	e2 f7       	brpl	.-8      	; 0x80c <ucGetRawSensor+0x44>
     814:	d2 2a       	or	r13, r18
     816:	09 c0       	rjmp	.+18     	; 0x82a <ucGetRawSensor+0x62>
		}
		else{
			cbi(result,6-i);	
     818:	97 01       	movw	r18, r14
     81a:	0c 2e       	mov	r0, r28
     81c:	02 c0       	rjmp	.+4      	; 0x822 <ucGetRawSensor+0x5a>
     81e:	22 0f       	add	r18, r18
     820:	33 1f       	adc	r19, r19
     822:	0a 94       	dec	r0
     824:	e2 f7       	brpl	.-8      	; 0x81e <ucGetRawSensor+0x56>
     826:	20 95       	com	r18
     828:	d2 22       	and	r13, r18
     82a:	21 97       	sbiw	r28, 0x01	; 1
     82c:	08 f7       	brcc	.-62     	; 0x7f0 <ucGetRawSensor+0x28>
		}		
	}
	cbi(result,7);
	//data_led = result;
	return result;
}
     82e:	8d 2d       	mov	r24, r13
     830:	8f 77       	andi	r24, 0x7F	; 127
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	0f 91       	pop	r16
     83a:	ff 90       	pop	r15
     83c:	ef 90       	pop	r14
     83e:	df 90       	pop	r13
     840:	cf 90       	pop	r12
     842:	08 95       	ret

00000844 <ucGetSensorData>:
PUBLIC uint8_t ucGetSensorData(uint8_t mask){
     844:	cf 93       	push	r28
     846:	c8 2f       	mov	r28, r24

	return (ucGetRawSensor() & mask);
     848:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <ucGetRawSensor>
}
     84c:	8c 23       	and	r24, r28
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <bStartBarIsStart>:
int iGetSensorPosition(){
	return 0;
}
bool bStartBarIsStart(){
	uint16_t ucDataADC = uiReadADC(7);
     852:	87 e0       	ldi	r24, 0x07	; 7
     854:	0e 94 30 03 	call	0x660	; 0x660 <uiReadADC>
	if(ucDataADC < 100) return true;//adc_average[7]
     858:	21 e0       	ldi	r18, 0x01	; 1
     85a:	84 36       	cpi	r24, 0x64	; 100
     85c:	91 05       	cpc	r25, r1
     85e:	08 f0       	brcs	.+2      	; 0x862 <bStartBarIsStart+0x10>
     860:	20 e0       	ldi	r18, 0x00	; 0
	return false;
}
     862:	82 2f       	mov	r24, r18
     864:	08 95       	ret

00000866 <vLoadE2P>:
void vLoadE2P(){
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	c0 e0       	ldi	r28, 0x00	; 0
     874:	d0 e0       	ldi	r29, 0x00	; 0
     876:	02 ed       	ldi	r16, 0xD2	; 210
     878:	11 e0       	ldi	r17, 0x01	; 1
     87a:	0f 2e       	mov	r0, r31
     87c:	f0 e1       	ldi	r31, 0x10	; 16
     87e:	ef 2e       	mov	r14, r31
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	ff 2e       	mov	r15, r31
     884:	f0 2d       	mov	r31, r0
	for(int i = 0;i < 8;i++){
		uiAdAverage[i] = read_eeprom_word(&uiMyEppDataArr[i]);
     886:	ce 01       	movw	r24, r28
     888:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__eerd_word_m16a>
     88c:	f8 01       	movw	r30, r16
     88e:	81 93       	st	Z+, r24
     890:	91 93       	st	Z+, r25
     892:	8f 01       	movw	r16, r30
     894:	22 96       	adiw	r28, 0x02	; 2
	uint16_t ucDataADC = uiReadADC(7);
	if(ucDataADC < 100) return true;//adc_average[7]
	return false;
}
void vLoadE2P(){
	for(int i = 0;i < 8;i++){
     896:	ce 15       	cp	r28, r14
     898:	df 05       	cpc	r29, r15
     89a:	a9 f7       	brne	.-22     	; 0x886 <vLoadE2P+0x20>
		uiAdAverage[i] = read_eeprom_word(&uiMyEppDataArr[i]);
	}
}
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	ff 90       	pop	r15
     8a6:	ef 90       	pop	r14
     8a8:	08 95       	ret

000008aa <vPeriodicDec>:
	@brief:		Decrease periodic counter
	@param:		none
	@return:	none 
*/
PRIVATE void vPeriodicDec(){	
	if((uigLedPeriodic == 0) || (uigLedPeriodic == NO_LIMIT)){
     8aa:	80 91 68 00 	lds	r24, 0x0068
     8ae:	90 91 69 00 	lds	r25, 0x0069
     8b2:	89 2b       	or	r24, r25
     8b4:	31 f0       	breq	.+12     	; 0x8c2 <vPeriodicDec+0x18>
     8b6:	80 91 68 00 	lds	r24, 0x0068
     8ba:	90 91 69 00 	lds	r25, 0x0069
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	39 f4       	brne	.+14     	; 0x8d0 <vPeriodicDec+0x26>
		uigLedPeriodic = NO_LIMIT;
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
     8c4:	9f ef       	ldi	r25, 0xFF	; 255
     8c6:	90 93 69 00 	sts	0x0069, r25
     8ca:	80 93 68 00 	sts	0x0068, r24
     8ce:	08 95       	ret
	}else
	uigLedPeriodic--;	
     8d0:	80 91 68 00 	lds	r24, 0x0068
     8d4:	90 91 69 00 	lds	r25, 0x0069
     8d8:	01 97       	sbiw	r24, 0x01	; 1
     8da:	90 93 69 00 	sts	0x0069, r25
     8de:	80 93 68 00 	sts	0x0068, r24
     8e2:	08 95       	ret

000008e4 <vIntervalDec>:
	@param:		none
	@return:	none 
*/
PRIVATE void vIntervalDec(){
	
	if((uigLedInterval == 0) || (uigLedInterval == NO_LIMIT)){
     8e4:	80 91 66 00 	lds	r24, 0x0066
     8e8:	90 91 67 00 	lds	r25, 0x0067
     8ec:	89 2b       	or	r24, r25
     8ee:	31 f0       	breq	.+12     	; 0x8fc <vIntervalDec+0x18>
     8f0:	80 91 66 00 	lds	r24, 0x0066
     8f4:	90 91 67 00 	lds	r25, 0x0067
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	39 f4       	brne	.+14     	; 0x90a <vIntervalDec+0x26>
		uigLedInterval = NO_LIMIT;
     8fc:	8f ef       	ldi	r24, 0xFF	; 255
     8fe:	9f ef       	ldi	r25, 0xFF	; 255
     900:	90 93 67 00 	sts	0x0067, r25
     904:	80 93 66 00 	sts	0x0066, r24
     908:	08 95       	ret
	}
	else
	uigLedInterval--;	
     90a:	80 91 66 00 	lds	r24, 0x0066
     90e:	90 91 67 00 	lds	r25, 0x0067
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	90 93 67 00 	sts	0x0067, r25
     918:	80 93 66 00 	sts	0x0066, r24
     91c:	08 95       	ret

0000091e <ucPareLedEvent>:
	@param:		led event
	@return:	Led Periodic counter
*/
PRIVATE uint16_t ucPareLedEvent(uint8_t led_event){
	uint16_t uiRet = NO_LIMIT;
	switch(led_event){
     91e:	82 30       	cpi	r24, 0x02	; 2
     920:	91 f0       	breq	.+36     	; 0x946 <ucPareLedEvent+0x28>
     922:	18 f4       	brcc	.+6      	; 0x92a <ucPareLedEvent+0xc>
     924:	81 30       	cpi	r24, 0x01	; 1
     926:	31 f0       	breq	.+12     	; 0x934 <ucPareLedEvent+0x16>
     928:	29 c0       	rjmp	.+82     	; 0x97c <ucPareLedEvent+0x5e>
     92a:	83 30       	cpi	r24, 0x03	; 3
     92c:	f1 f0       	breq	.+60     	; 0x96a <ucPareLedEvent+0x4c>
     92e:	84 30       	cpi	r24, 0x04	; 4
     930:	99 f0       	breq	.+38     	; 0x958 <ucPareLedEvent+0x3a>
     932:	24 c0       	rjmp	.+72     	; 0x97c <ucPareLedEvent+0x5e>
		case LED_FAST_BLINK:			
			uigLedInterval = LED_50_MS;			
     934:	85 e0       	ldi	r24, 0x05	; 5
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	90 93 67 00 	sts	0x0067, r25
     93c:	80 93 66 00 	sts	0x0066, r24
	@brief:		parse control for led
	@param:		led event
	@return:	Led Periodic counter
*/
PRIVATE uint16_t ucPareLedEvent(uint8_t led_event){
	uint16_t uiRet = NO_LIMIT;
     940:	8f ef       	ldi	r24, 0xFF	; 255
     942:	9f ef       	ldi	r25, 0xFF	; 255
	switch(led_event){
		case LED_FAST_BLINK:			
			uigLedInterval = LED_50_MS;			
			break;
     944:	08 95       	ret
		case LED_SLOW_BLINK:			
			uigLedInterval = LED_100_MS;			
     946:	8a e0       	ldi	r24, 0x0A	; 10
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	90 93 67 00 	sts	0x0067, r25
     94e:	80 93 66 00 	sts	0x0066, r24
	@brief:		parse control for led
	@param:		led event
	@return:	Led Periodic counter
*/
PRIVATE uint16_t ucPareLedEvent(uint8_t led_event){
	uint16_t uiRet = NO_LIMIT;
     952:	8f ef       	ldi	r24, 0xFF	; 255
     954:	9f ef       	ldi	r25, 0xFF	; 255
		case LED_FAST_BLINK:			
			uigLedInterval = LED_50_MS;			
			break;
		case LED_SLOW_BLINK:			
			uigLedInterval = LED_100_MS;			
			break;
     956:	08 95       	ret
		case LED_STARTUP_COMPELETE:			
			uigLedInterval = LED_50_MS;	
     958:	85 e0       	ldi	r24, 0x05	; 5
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	90 93 67 00 	sts	0x0067, r25
     960:	80 93 66 00 	sts	0x0066, r24
			uiRet = LED_1_S;	
     964:	84 e6       	ldi	r24, 0x64	; 100
     966:	90 e0       	ldi	r25, 0x00	; 0
			break;	
     968:	08 95       	ret
		case LED_START_BAR_OK:
			uigLedInterval = LED_50_MS;
     96a:	85 e0       	ldi	r24, 0x05	; 5
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	90 93 67 00 	sts	0x0067, r25
     972:	80 93 66 00 	sts	0x0066, r24
			uiRet = LED_500_MS;
     976:	82 e3       	ldi	r24, 0x32	; 50
     978:	90 e0       	ldi	r25, 0x00	; 0
			break;	
     97a:	08 95       	ret
	@brief:		parse control for led
	@param:		led event
	@return:	Led Periodic counter
*/
PRIVATE uint16_t ucPareLedEvent(uint8_t led_event){
	uint16_t uiRet = NO_LIMIT;
     97c:	8f ef       	ldi	r24, 0xFF	; 255
     97e:	9f ef       	ldi	r25, 0xFF	; 255
			break;	
		default:			
			break;
	}
	return uiRet;
}
     980:	08 95       	ret

00000982 <vLedFlash>:
/*
	@brief:		This function will control led, must called on ISR function
	@param:		none
	@return:	none 
*/
PUBLIC void vLedFlash(){
     982:	cf 93       	push	r28
	uint8_t ucStateTemp = ucgLedState;	
     984:	c0 91 6f 00 	lds	r28, 0x006F
	
	switch(ucStateTemp){
     988:	cc 23       	and	r28, r28
     98a:	61 f1       	breq	.+88     	; 0x9e4 <vLedFlash+0x62>
     98c:	c1 30       	cpi	r28, 0x01	; 1
     98e:	41 f5       	brne	.+80     	; 0x9e0 <vLedFlash+0x5e>
		case LED_STATE_NONE:	//State NONE do nothing.
			return;
		case LED_STATE_BLINK:		
			vPeriodicDec();
     990:	0e 94 55 04 	call	0x8aa	; 0x8aa <vPeriodicDec>
			if(uigLedPeriodic == 0){
     994:	80 91 68 00 	lds	r24, 0x0068
     998:	90 91 69 00 	lds	r25, 0x0069
     99c:	89 2b       	or	r24, r25
     99e:	29 f4       	brne	.+10     	; 0x9aa <vLedFlash+0x28>
				LED_BUG_OFF; //turn off led
     9a0:	c7 9a       	sbi	0x18, 7	; 24
				bgLedFlag = LED_FLAG_OFF;//set flag is off
     9a2:	10 92 6e 00 	sts	0x006E, r1
				ucStateTemp = LED_STATE_NONE;
     9a6:	c0 e0       	ldi	r28, 0x00	; 0
     9a8:	1b c0       	rjmp	.+54     	; 0x9e0 <vLedFlash+0x5e>
			}
			else{
				vIntervalDec();
     9aa:	0e 94 72 04 	call	0x8e4	; 0x8e4 <vIntervalDec>
				if(uigLedInterval == 0){
     9ae:	80 91 66 00 	lds	r24, 0x0066
     9b2:	90 91 67 00 	lds	r25, 0x0067
     9b6:	89 2b       	or	r24, r25
     9b8:	99 f4       	brne	.+38     	; 0x9e0 <vLedFlash+0x5e>
					switch (bgLedFlag)
     9ba:	80 91 6e 00 	lds	r24, 0x006E
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	00 97       	sbiw	r24, 0x00	; 0
     9c2:	31 f0       	breq	.+12     	; 0x9d0 <vLedFlash+0x4e>
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	41 f4       	brne	.+16     	; 0x9d8 <vLedFlash+0x56>
					{
						case LED_FLAG_ON:
							bgLedFlag = LED_FLAG_OFF;
     9c8:	10 92 6e 00 	sts	0x006E, r1
							LED_BUG_OFF;
     9cc:	c7 9a       	sbi	0x18, 7	; 24
							break;
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <vLedFlash+0x56>
						case LED_FLAG_OFF:
							bgLedFlag = LED_FLAG_ON;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	80 93 6e 00 	sts	0x006E, r24
							LED_BUG_ON;
     9d6:	c7 98       	cbi	0x18, 7	; 24
							break;
						default:							
							break;
					}					
					ucPareLedEvent(ucLedEvent);					
     9d8:	80 91 6d 00 	lds	r24, 0x006D
     9dc:	0e 94 8f 04 	call	0x91e	; 0x91e <ucPareLedEvent>
			}
			break;
		default:			
			break;		
	}		
	ucgLedState = ucStateTemp;		
     9e0:	c0 93 6f 00 	sts	0x006F, r28
}
     9e4:	cf 91       	pop	r28
     9e6:	08 95       	ret

000009e8 <vLedCtrl>:
/*
	@brief:		Call this function to control led
	@param:		event of led
	@return:	none 
*/
PUBLIC void vLedCtrl(uint8_t E_EVENT){
     9e8:	cf 93       	push	r28
     9ea:	c8 2f       	mov	r28, r24
	
	uigLedPeriodic = ucPareLedEvent(E_EVENT);
     9ec:	0e 94 8f 04 	call	0x91e	; 0x91e <ucPareLedEvent>
     9f0:	90 93 69 00 	sts	0x0069, r25
     9f4:	80 93 68 00 	sts	0x0068, r24
	ucgLedState = LED_STATE_BLINK;	
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	80 93 6f 00 	sts	0x006F, r24
	ucLedEvent = E_EVENT;
     9fe:	c0 93 6d 00 	sts	0x006D, r28
	
     a02:	cf 91       	pop	r28
     a04:	08 95       	ret

00000a06 <__vector_11>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     a06:	1f 92       	push	r1
     a08:	0f 92       	push	r0
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	0f 92       	push	r0
     a0e:	11 24       	eor	r1, r1
     a10:	2f 93       	push	r18
     a12:	8f 93       	push	r24
     a14:	9f 93       	push	r25
     a16:	ef 93       	push	r30
     a18:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     a1a:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
     a1c:	2c b1       	in	r18, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
     a1e:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     a20:	e0 91 72 00 	lds	r30, 0x0072
     a24:	ef 5f       	subi	r30, 0xFF	; 255
     a26:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART_RxTail ) {
     a28:	90 91 71 00 	lds	r25, 0x0071
     a2c:	e9 17       	cp	r30, r25
     a2e:	39 f0       	breq	.+14     	; 0xa3e <__vector_11+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     a30:	e0 93 72 00 	sts	0x0072, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	eb 58       	subi	r30, 0x8B	; 139
     a38:	ff 4f       	sbci	r31, 0xFF	; 255
     a3a:	20 83       	st	Z, r18
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <__vector_11+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     a3e:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
     a40:	90 91 70 00 	lds	r25, 0x0070
     a44:	89 2b       	or	r24, r25
     a46:	80 93 70 00 	sts	0x0070, r24
}
     a4a:	ff 91       	pop	r31
     a4c:	ef 91       	pop	r30
     a4e:	9f 91       	pop	r25
     a50:	8f 91       	pop	r24
     a52:	2f 91       	pop	r18
     a54:	0f 90       	pop	r0
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	0f 90       	pop	r0
     a5a:	1f 90       	pop	r1
     a5c:	18 95       	reti

00000a5e <__vector_12>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     a5e:	1f 92       	push	r1
     a60:	0f 92       	push	r0
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	0f 92       	push	r0
     a66:	11 24       	eor	r1, r1
     a68:	8f 93       	push	r24
     a6a:	9f 93       	push	r25
     a6c:	ef 93       	push	r30
     a6e:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     a70:	90 91 74 00 	lds	r25, 0x0074
     a74:	80 91 73 00 	lds	r24, 0x0073
     a78:	98 17       	cp	r25, r24
     a7a:	59 f0       	breq	.+22     	; 0xa92 <__vector_12+0x34>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     a7c:	e0 91 73 00 	lds	r30, 0x0073
     a80:	ef 5f       	subi	r30, 0xFF	; 255
        UART_TxTail = tmptail;
     a82:	e0 93 73 00 	sts	0x0073, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	eb 54       	subi	r30, 0x4B	; 75
     a8a:	ff 4f       	sbci	r31, 0xFF	; 255
     a8c:	80 81       	ld	r24, Z
     a8e:	8c b9       	out	0x0c, r24	; 12
     a90:	01 c0       	rjmp	.+2      	; 0xa94 <__vector_12+0x36>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     a92:	55 98       	cbi	0x0a, 5	; 10
    }
}
     a94:	ff 91       	pop	r31
     a96:	ef 91       	pop	r30
     a98:	9f 91       	pop	r25
     a9a:	8f 91       	pop	r24
     a9c:	0f 90       	pop	r0
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	0f 90       	pop	r0
     aa2:	1f 90       	pop	r1
     aa4:	18 95       	reti

00000aa6 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
     aa6:	10 92 74 00 	sts	0x0074, r1
    UART_TxTail = 0;
     aaa:	10 92 73 00 	sts	0x0073, r1
    UART_RxHead = 0;
     aae:	10 92 72 00 	sts	0x0072, r1
    UART_RxTail = 0;
     ab2:	10 92 71 00 	sts	0x0071, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
     ab6:	99 23       	and	r25, r25
     ab8:	1c f4       	brge	.+6      	; 0xac0 <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
     aba:	22 e0       	ldi	r18, 0x02	; 2
     abc:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
     abe:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
     ac0:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
     ac2:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
     ac4:	88 e9       	ldi	r24, 0x98	; 152
     ac6:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
     ac8:	86 e8       	ldi	r24, 0x86	; 134
     aca:	80 bd       	out	0x20, r24	; 32
     acc:	08 95       	ret

00000ace <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
     ace:	90 91 72 00 	lds	r25, 0x0072
     ad2:	80 91 71 00 	lds	r24, 0x0071
     ad6:	98 17       	cp	r25, r24
     ad8:	81 f0       	breq	.+32     	; 0xafa <uart_getc+0x2c>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     ada:	e0 91 71 00 	lds	r30, 0x0071
     ade:	ef 5f       	subi	r30, 0xFF	; 255
     ae0:	ef 73       	andi	r30, 0x3F	; 63
    UART_RxTail = tmptail; 
     ae2:	e0 93 71 00 	sts	0x0071, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	eb 58       	subi	r30, 0x8B	; 139
     aea:	ff 4f       	sbci	r31, 0xFF	; 255
     aec:	80 81       	ld	r24, Z
    
    data = (UART_LastRxError << 8) + data;
     aee:	90 91 70 00 	lds	r25, 0x0070
    UART_LastRxError = 0;
     af2:	10 92 70 00 	sts	0x0070, r1
    return data;
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	91 e0       	ldi	r25, 0x01	; 1
    
    data = (UART_LastRxError << 8) + data;
    UART_LastRxError = 0;
    return data;

}/* uart_getc */
     afe:	08 95       	ret

00000b00 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     b00:	20 91 74 00 	lds	r18, 0x0074
     b04:	2f 5f       	subi	r18, 0xFF	; 255
    
    while ( tmphead == UART_TxTail ){
     b06:	90 91 73 00 	lds	r25, 0x0073
     b0a:	29 17       	cp	r18, r25
     b0c:	e1 f3       	breq	.-8      	; 0xb06 <uart_putc+0x6>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     b0e:	e2 2f       	mov	r30, r18
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	eb 54       	subi	r30, 0x4B	; 75
     b14:	ff 4f       	sbci	r31, 0xFF	; 255
     b16:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     b18:	20 93 74 00 	sts	0x0074, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     b1c:	55 9a       	sbi	0x0a, 5	; 10
     b1e:	08 95       	ret

00000b20 <vAssassin>:

volatile uint16_t uiTimer0Cnt = 0;

void vAssassin(){
	// [Vo Huu Tai 10/8/2015 ]  over 1ms
	uiTimer0Cnt++;
     b20:	80 91 b5 01 	lds	r24, 0x01B5
     b24:	90 91 b6 01 	lds	r25, 0x01B6
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	90 93 b6 01 	sts	0x01B6, r25
     b2e:	80 93 b5 01 	sts	0x01B5, r24
	switch(uiTimer0Cnt){//I wish it is called very 10ms		
     b32:	80 91 b5 01 	lds	r24, 0x01B5
     b36:	90 91 b6 01 	lds	r25, 0x01B6
     b3a:	0a 97       	sbiw	r24, 0x0a	; 10
     b3c:	41 f4       	brne	.+16     	; 0xb4e <vAssassin+0x2e>
		case 10:
			iGetInlined();
     b3e:	0e 94 13 02 	call	0x426	; 0x426 <iGetInlined>
			vLedFlash();
     b42:	0e 94 c1 04 	call	0x982	; 0x982 <vLedFlash>
			uiTimer0Cnt = 0;
     b46:	10 92 b6 01 	sts	0x01B6, r1
     b4a:	10 92 b5 01 	sts	0x01B5, r1
     b4e:	08 95       	ret

00000b50 <main>:
	}
	// [Vo Huu Tai 14/8/2015 ]  BUGGY here :(((
}
int main(void)
{
	uint8_t *ucBuff = (uint8_t*)calloc(DEBUG_BUFF_SIZE,sizeof(uint8_t));
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	80 e4       	ldi	r24, 0x40	; 64
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 98 07 	call	0xf30	; 0xf30 <calloc>
     b5c:	ec 01       	movw	r28, r24
	int iSensorData = 0;
	vInitProgram();	
     b5e:	0e 94 46 02 	call	0x48c	; 0x48c <vInitProgram>
     b62:	2f ef       	ldi	r18, 0xFF	; 255
     b64:	8e e9       	ldi	r24, 0x9E	; 158
     b66:	94 e2       	ldi	r25, 0x24	; 36
     b68:	21 50       	subi	r18, 0x01	; 1
     b6a:	80 40       	sbci	r24, 0x00	; 0
     b6c:	90 40       	sbci	r25, 0x00	; 0
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <main+0x18>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <main+0x22>
     b72:	00 00       	nop
	_delay_ms(1000);//waiting for slaver ready, remove it ...
	/**
	       vOutLed7(1234);		// Xuat so 1234		   
		   vBeep(100);			// Phat ra tieng beeep 100 ms
	*/	
    vOutLed7(1234);
     b74:	82 ed       	ldi	r24, 0xD2	; 210
     b76:	94 e0       	ldi	r25, 0x04	; 4
     b78:	0e 94 95 01 	call	0x32a	; 0x32a <vOutLed7>
	vBeep(100);	
     b7c:	84 e6       	ldi	r24, 0x64	; 100
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <vBeep>
	vMotor(-30,-30);
     b84:	62 ee       	ldi	r22, 0xE2	; 226
     b86:	7f ef       	ldi	r23, 0xFF	; 255
     b88:	82 ee       	ldi	r24, 0xE2	; 226
     b8a:	9f ef       	ldi	r25, 0xFF	; 255
     b8c:	0e 94 a7 02 	call	0x54e	; 0x54e <vMotor>
	vServo(0);
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 1e 03 	call	0x63c	; 0x63c <vServo>
	while(1)
    {       	
		if(isTester()){//Get switch tester
     b98:	0e 94 29 03 	call	0x652	; 0x652 <isTester>
     b9c:	88 23       	and	r24, r24
     b9e:	a9 f1       	breq	.+106    	; 0xc0a <main+0xba>
			vOutLed7(ucGetSwitch());
     ba0:	0e 94 a3 02 	call	0x546	; 0x546 <ucGetSwitch>
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 95 01 	call	0x32a	; 0x32a <vOutLed7>
			bDebugProcess();
     baa:	0e 94 66 00 	call	0xcc	; 0xcc <bDebugProcess>
			if(bMsgIsOK()){
     bae:	0e 94 d7 00 	call	0x1ae	; 0x1ae <bMsgIsOK>
     bb2:	88 23       	and	r24, r24
     bb4:	d1 f0       	breq	.+52     	; 0xbea <main+0x9a>
				switch (ucGetCMDInfo())
     bb6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <ucGetCMDInfo>
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	b1 f4       	brne	.+44     	; 0xbea <main+0x9a>
				{
					case CMD_SENSOR:
					vSetCMDInfo(CMD_NONE);
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <vSetCMDInfo>
					ucGetData(ucBuff);
     bc4:	ce 01       	movw	r24, r28
     bc6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <ucGetData>
					if (ucBuff[0] == 1){//negative
     bca:	88 81       	ld	r24, Y
     bcc:	81 30       	cpi	r24, 0x01	; 1
     bce:	31 f4       	brne	.+12     	; 0xbdc <main+0x8c>
						iSensorData = -ucBuff[1];
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	90 e0       	ldi	r25, 0x00	; 0
						vOutLed7((-iSensorData + 1000));
     bd4:	88 51       	subi	r24, 0x18	; 24
     bd6:	9c 4f       	sbci	r25, 0xFC	; 252
     bd8:	0e 94 95 01 	call	0x32a	; 0x32a <vOutLed7>
					}
					if(ucBuff[0] == 0){
     bdc:	88 81       	ld	r24, Y
     bde:	81 11       	cpse	r24, r1
     be0:	04 c0       	rjmp	.+8      	; 0xbea <main+0x9a>
						iSensorData = ucBuff[1];
						vOutLed7(iSensorData);
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 95 01 	call	0x32a	; 0x32a <vOutLed7>
					break;
					default: break;
				}
			}
			
			if(bKeyIsPress(KEY1)){
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	0e 94 77 02 	call	0x4ee	; 0x4ee <bKeyIsPress>
     bf0:	88 23       	and	r24, r24
     bf2:	19 f0       	breq	.+6      	; 0xbfa <main+0xaa>
				vLedCtrl(LED_STARTUP_COMPELETE);
     bf4:	84 e0       	ldi	r24, 0x04	; 4
     bf6:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <vLedCtrl>
			}
			if(bStartBarIsStart()){
     bfa:	0e 94 29 04 	call	0x852	; 0x852 <bStartBarIsStart>
     bfe:	88 23       	and	r24, r24
     c00:	59 f2       	breq	.-106    	; 0xb98 <main+0x48>
				vLedCtrl(LED_STARTUP_COMPELETE); //Fix me
     c02:	84 e0       	ldi	r24, 0x04	; 4
     c04:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <vLedCtrl>
     c08:	c7 cf       	rjmp	.-114    	; 0xb98 <main+0x48>
			}
		}//end tester
		else{//normal running
			if(bKeyIsPress(KEY2)){//Key 2 learn color, and run
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	0e 94 77 02 	call	0x4ee	; 0x4ee <bKeyIsPress>
     c10:	88 23       	and	r24, r24
     c12:	21 f1       	breq	.+72     	; 0xc5c <main+0x10c>
				vLearnColor();
     c14:	0e 94 38 03 	call	0x670	; 0x670 <vLearnColor>
				iSensorData = 0;
     c18:	c0 e0       	ldi	r28, 0x00	; 0
     c1a:	d0 e0       	ldi	r29, 0x00	; 0
					if (bKeyIsPress(KEY1))
					{
						//xx xx xx  xx  xx xx xx    --
						iSensorData ++;
						if(iSensorData == 8){
							iSensorData = 0;
     c1c:	00 e0       	ldi	r16, 0x00	; 0
     c1e:	10 e0       	ldi	r17, 0x00	; 0
		else{//normal running
			if(bKeyIsPress(KEY2)){//Key 2 learn color, and run
				vLearnColor();
				iSensorData = 0;
				while(1){
					if (bKeyIsPress(KEY1))
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	0e 94 77 02 	call	0x4ee	; 0x4ee <bKeyIsPress>
     c26:	88 23       	and	r24, r24
     c28:	49 f0       	breq	.+18     	; 0xc3c <main+0xec>
					{
						//xx xx xx  xx  xx xx xx    --
						iSensorData ++;
     c2a:	21 96       	adiw	r28, 0x01	; 1
						if(iSensorData == 8){
     c2c:	c8 30       	cpi	r28, 0x08	; 8
     c2e:	d1 05       	cpc	r29, r1
     c30:	29 f4       	brne	.+10     	; 0xc3c <main+0xec>
							iSensorData = 0;
							vLedCtrl(LED_START_BAR_OK);
     c32:	83 e0       	ldi	r24, 0x03	; 3
     c34:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <vLedCtrl>
					if (bKeyIsPress(KEY1))
					{
						//xx xx xx  xx  xx xx xx    --
						iSensorData ++;
						if(iSensorData == 8){
							iSensorData = 0;
     c38:	c0 2f       	mov	r28, r16
     c3a:	d1 2f       	mov	r29, r17
							vLedCtrl(LED_START_BAR_OK);
						}						
					}
					//vOutLed7(read_adc(iSensorData));
					vOutLed7(ucGetSensorData(0xff));
     c3c:	8f ef       	ldi	r24, 0xFF	; 255
     c3e:	0e 94 22 04 	call	0x844	; 0x844 <ucGetSensorData>
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 95 01 	call	0x32a	; 0x32a <vOutLed7>
     c48:	9f e7       	ldi	r25, 0x7F	; 127
     c4a:	29 ea       	ldi	r18, 0xA9	; 169
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	91 50       	subi	r25, 0x01	; 1
     c50:	20 40       	sbci	r18, 0x00	; 0
     c52:	80 40       	sbci	r24, 0x00	; 0
     c54:	e1 f7       	brne	.-8      	; 0xc4e <main+0xfe>
     c56:	00 c0       	rjmp	.+0      	; 0xc58 <main+0x108>
     c58:	00 00       	nop
     c5a:	e2 cf       	rjmp	.-60     	; 0xc20 <main+0xd0>
					_delay_ms(100);
				}//end while 1
			}//end Key 2 learn color, and run
			if(bKeyIsPress(KEY1)){//Load epprom and run
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	0e 94 77 02 	call	0x4ee	; 0x4ee <bKeyIsPress>
     c62:	88 23       	and	r24, r24
     c64:	09 f4       	brne	.+2      	; 0xc68 <main+0x118>
     c66:	98 cf       	rjmp	.-208    	; 0xb98 <main+0x48>
				vLoadE2P();
     c68:	0e 94 33 04 	call	0x866	; 0x866 <vLoadE2P>
				while(1){
					vOutLed7(ucGetSensorData(0xff));
     c6c:	8f ef       	ldi	r24, 0xFF	; 255
     c6e:	0e 94 22 04 	call	0x844	; 0x844 <ucGetSensorData>
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 95 01 	call	0x32a	; 0x32a <vOutLed7>
     c78:	9f e7       	ldi	r25, 0x7F	; 127
     c7a:	29 ea       	ldi	r18, 0xA9	; 169
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	91 50       	subi	r25, 0x01	; 1
     c80:	20 40       	sbci	r18, 0x00	; 0
     c82:	80 40       	sbci	r24, 0x00	; 0
     c84:	e1 f7       	brne	.-8      	; 0xc7e <main+0x12e>
     c86:	00 c0       	rjmp	.+0      	; 0xc88 <main+0x138>
     c88:	00 00       	nop
     c8a:	f0 cf       	rjmp	.-32     	; 0xc6c <main+0x11c>

00000c8c <__vector_9>:
			}// end Load epprom and run
		} //end normal running
    }//end while(1)
}
ISR(TIMER0_OVF_vect)
{
     c8c:	1f 92       	push	r1
     c8e:	0f 92       	push	r0
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	0f 92       	push	r0
     c94:	11 24       	eor	r1, r1
     c96:	2f 93       	push	r18
     c98:	3f 93       	push	r19
     c9a:	4f 93       	push	r20
     c9c:	5f 93       	push	r21
     c9e:	6f 93       	push	r22
     ca0:	7f 93       	push	r23
     ca2:	8f 93       	push	r24
     ca4:	9f 93       	push	r25
     ca6:	af 93       	push	r26
     ca8:	bf 93       	push	r27
     caa:	ef 93       	push	r30
     cac:	ff 93       	push	r31
	TCNT0 = 68;	//~1ms
     cae:	84 e4       	ldi	r24, 0x44	; 68
     cb0:	82 bf       	out	0x32, r24	; 50
	//Add more cnt here..
	vAssassin();
     cb2:	0e 94 90 05 	call	0xb20	; 0xb20 <vAssassin>
     cb6:	ff 91       	pop	r31
     cb8:	ef 91       	pop	r30
     cba:	bf 91       	pop	r27
     cbc:	af 91       	pop	r26
     cbe:	9f 91       	pop	r25
     cc0:	8f 91       	pop	r24
     cc2:	7f 91       	pop	r23
     cc4:	6f 91       	pop	r22
     cc6:	5f 91       	pop	r21
     cc8:	4f 91       	pop	r20
     cca:	3f 91       	pop	r19
     ccc:	2f 91       	pop	r18
     cce:	0f 90       	pop	r0
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	0f 90       	pop	r0
     cd4:	1f 90       	pop	r1
     cd6:	18 95       	reti

00000cd8 <__fixunssfsi>:
     cd8:	70 d0       	rcall	.+224    	; 0xdba <__fp_splitA>
     cda:	88 f0       	brcs	.+34     	; 0xcfe <__fixunssfsi+0x26>
     cdc:	9f 57       	subi	r25, 0x7F	; 127
     cde:	90 f0       	brcs	.+36     	; 0xd04 <__fixunssfsi+0x2c>
     ce0:	b9 2f       	mov	r27, r25
     ce2:	99 27       	eor	r25, r25
     ce4:	b7 51       	subi	r27, 0x17	; 23
     ce6:	a0 f0       	brcs	.+40     	; 0xd10 <__fixunssfsi+0x38>
     ce8:	d1 f0       	breq	.+52     	; 0xd1e <__fixunssfsi+0x46>
     cea:	66 0f       	add	r22, r22
     cec:	77 1f       	adc	r23, r23
     cee:	88 1f       	adc	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	1a f0       	brmi	.+6      	; 0xcfa <__fixunssfsi+0x22>
     cf4:	ba 95       	dec	r27
     cf6:	c9 f7       	brne	.-14     	; 0xcea <__fixunssfsi+0x12>
     cf8:	12 c0       	rjmp	.+36     	; 0xd1e <__fixunssfsi+0x46>
     cfa:	b1 30       	cpi	r27, 0x01	; 1
     cfc:	81 f0       	breq	.+32     	; 0xd1e <__fixunssfsi+0x46>
     cfe:	77 d0       	rcall	.+238    	; 0xdee <__fp_zero>
     d00:	b1 e0       	ldi	r27, 0x01	; 1
     d02:	08 95       	ret
     d04:	74 c0       	rjmp	.+232    	; 0xdee <__fp_zero>
     d06:	67 2f       	mov	r22, r23
     d08:	78 2f       	mov	r23, r24
     d0a:	88 27       	eor	r24, r24
     d0c:	b8 5f       	subi	r27, 0xF8	; 248
     d0e:	39 f0       	breq	.+14     	; 0xd1e <__fixunssfsi+0x46>
     d10:	b9 3f       	cpi	r27, 0xF9	; 249
     d12:	cc f3       	brlt	.-14     	; 0xd06 <__fixunssfsi+0x2e>
     d14:	86 95       	lsr	r24
     d16:	77 95       	ror	r23
     d18:	67 95       	ror	r22
     d1a:	b3 95       	inc	r27
     d1c:	d9 f7       	brne	.-10     	; 0xd14 <__fixunssfsi+0x3c>
     d1e:	3e f4       	brtc	.+14     	; 0xd2e <__fixunssfsi+0x56>
     d20:	90 95       	com	r25
     d22:	80 95       	com	r24
     d24:	70 95       	com	r23
     d26:	61 95       	neg	r22
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	8f 4f       	sbci	r24, 0xFF	; 255
     d2c:	9f 4f       	sbci	r25, 0xFF	; 255
     d2e:	08 95       	ret

00000d30 <__floatunsisf>:
     d30:	e8 94       	clt
     d32:	09 c0       	rjmp	.+18     	; 0xd46 <__floatsisf+0x12>

00000d34 <__floatsisf>:
     d34:	97 fb       	bst	r25, 7
     d36:	3e f4       	brtc	.+14     	; 0xd46 <__floatsisf+0x12>
     d38:	90 95       	com	r25
     d3a:	80 95       	com	r24
     d3c:	70 95       	com	r23
     d3e:	61 95       	neg	r22
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	8f 4f       	sbci	r24, 0xFF	; 255
     d44:	9f 4f       	sbci	r25, 0xFF	; 255
     d46:	99 23       	and	r25, r25
     d48:	a9 f0       	breq	.+42     	; 0xd74 <__floatsisf+0x40>
     d4a:	f9 2f       	mov	r31, r25
     d4c:	96 e9       	ldi	r25, 0x96	; 150
     d4e:	bb 27       	eor	r27, r27
     d50:	93 95       	inc	r25
     d52:	f6 95       	lsr	r31
     d54:	87 95       	ror	r24
     d56:	77 95       	ror	r23
     d58:	67 95       	ror	r22
     d5a:	b7 95       	ror	r27
     d5c:	f1 11       	cpse	r31, r1
     d5e:	f8 cf       	rjmp	.-16     	; 0xd50 <__floatsisf+0x1c>
     d60:	fa f4       	brpl	.+62     	; 0xda0 <__floatsisf+0x6c>
     d62:	bb 0f       	add	r27, r27
     d64:	11 f4       	brne	.+4      	; 0xd6a <__floatsisf+0x36>
     d66:	60 ff       	sbrs	r22, 0
     d68:	1b c0       	rjmp	.+54     	; 0xda0 <__floatsisf+0x6c>
     d6a:	6f 5f       	subi	r22, 0xFF	; 255
     d6c:	7f 4f       	sbci	r23, 0xFF	; 255
     d6e:	8f 4f       	sbci	r24, 0xFF	; 255
     d70:	9f 4f       	sbci	r25, 0xFF	; 255
     d72:	16 c0       	rjmp	.+44     	; 0xda0 <__floatsisf+0x6c>
     d74:	88 23       	and	r24, r24
     d76:	11 f0       	breq	.+4      	; 0xd7c <__floatsisf+0x48>
     d78:	96 e9       	ldi	r25, 0x96	; 150
     d7a:	11 c0       	rjmp	.+34     	; 0xd9e <__floatsisf+0x6a>
     d7c:	77 23       	and	r23, r23
     d7e:	21 f0       	breq	.+8      	; 0xd88 <__floatsisf+0x54>
     d80:	9e e8       	ldi	r25, 0x8E	; 142
     d82:	87 2f       	mov	r24, r23
     d84:	76 2f       	mov	r23, r22
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <__floatsisf+0x5e>
     d88:	66 23       	and	r22, r22
     d8a:	71 f0       	breq	.+28     	; 0xda8 <__floatsisf+0x74>
     d8c:	96 e8       	ldi	r25, 0x86	; 134
     d8e:	86 2f       	mov	r24, r22
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	2a f0       	brmi	.+10     	; 0xda0 <__floatsisf+0x6c>
     d96:	9a 95       	dec	r25
     d98:	66 0f       	add	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	88 1f       	adc	r24, r24
     d9e:	da f7       	brpl	.-10     	; 0xd96 <__floatsisf+0x62>
     da0:	88 0f       	add	r24, r24
     da2:	96 95       	lsr	r25
     da4:	87 95       	ror	r24
     da6:	97 f9       	bld	r25, 7
     da8:	08 95       	ret

00000daa <__fp_split3>:
     daa:	57 fd       	sbrc	r21, 7
     dac:	90 58       	subi	r25, 0x80	; 128
     dae:	44 0f       	add	r20, r20
     db0:	55 1f       	adc	r21, r21
     db2:	59 f0       	breq	.+22     	; 0xdca <__fp_splitA+0x10>
     db4:	5f 3f       	cpi	r21, 0xFF	; 255
     db6:	71 f0       	breq	.+28     	; 0xdd4 <__fp_splitA+0x1a>
     db8:	47 95       	ror	r20

00000dba <__fp_splitA>:
     dba:	88 0f       	add	r24, r24
     dbc:	97 fb       	bst	r25, 7
     dbe:	99 1f       	adc	r25, r25
     dc0:	61 f0       	breq	.+24     	; 0xdda <__fp_splitA+0x20>
     dc2:	9f 3f       	cpi	r25, 0xFF	; 255
     dc4:	79 f0       	breq	.+30     	; 0xde4 <__fp_splitA+0x2a>
     dc6:	87 95       	ror	r24
     dc8:	08 95       	ret
     dca:	12 16       	cp	r1, r18
     dcc:	13 06       	cpc	r1, r19
     dce:	14 06       	cpc	r1, r20
     dd0:	55 1f       	adc	r21, r21
     dd2:	f2 cf       	rjmp	.-28     	; 0xdb8 <__fp_split3+0xe>
     dd4:	46 95       	lsr	r20
     dd6:	f1 df       	rcall	.-30     	; 0xdba <__fp_splitA>
     dd8:	08 c0       	rjmp	.+16     	; 0xdea <__fp_splitA+0x30>
     dda:	16 16       	cp	r1, r22
     ddc:	17 06       	cpc	r1, r23
     dde:	18 06       	cpc	r1, r24
     de0:	99 1f       	adc	r25, r25
     de2:	f1 cf       	rjmp	.-30     	; 0xdc6 <__fp_splitA+0xc>
     de4:	86 95       	lsr	r24
     de6:	71 05       	cpc	r23, r1
     de8:	61 05       	cpc	r22, r1
     dea:	08 94       	sec
     dec:	08 95       	ret

00000dee <__fp_zero>:
     dee:	e8 94       	clt

00000df0 <__fp_szero>:
     df0:	bb 27       	eor	r27, r27
     df2:	66 27       	eor	r22, r22
     df4:	77 27       	eor	r23, r23
     df6:	cb 01       	movw	r24, r22
     df8:	97 f9       	bld	r25, 7
     dfa:	08 95       	ret

00000dfc <__mulsf3>:
     dfc:	0b d0       	rcall	.+22     	; 0xe14 <__mulsf3x>
     dfe:	78 c0       	rjmp	.+240    	; 0xef0 <__fp_round>
     e00:	69 d0       	rcall	.+210    	; 0xed4 <__fp_pscA>
     e02:	28 f0       	brcs	.+10     	; 0xe0e <__mulsf3+0x12>
     e04:	6e d0       	rcall	.+220    	; 0xee2 <__fp_pscB>
     e06:	18 f0       	brcs	.+6      	; 0xe0e <__mulsf3+0x12>
     e08:	95 23       	and	r25, r21
     e0a:	09 f0       	breq	.+2      	; 0xe0e <__mulsf3+0x12>
     e0c:	5a c0       	rjmp	.+180    	; 0xec2 <__fp_inf>
     e0e:	5f c0       	rjmp	.+190    	; 0xece <__fp_nan>
     e10:	11 24       	eor	r1, r1
     e12:	ee cf       	rjmp	.-36     	; 0xdf0 <__fp_szero>

00000e14 <__mulsf3x>:
     e14:	ca df       	rcall	.-108    	; 0xdaa <__fp_split3>
     e16:	a0 f3       	brcs	.-24     	; 0xe00 <__mulsf3+0x4>

00000e18 <__mulsf3_pse>:
     e18:	95 9f       	mul	r25, r21
     e1a:	d1 f3       	breq	.-12     	; 0xe10 <__mulsf3+0x14>
     e1c:	95 0f       	add	r25, r21
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	55 1f       	adc	r21, r21
     e22:	62 9f       	mul	r22, r18
     e24:	f0 01       	movw	r30, r0
     e26:	72 9f       	mul	r23, r18
     e28:	bb 27       	eor	r27, r27
     e2a:	f0 0d       	add	r31, r0
     e2c:	b1 1d       	adc	r27, r1
     e2e:	63 9f       	mul	r22, r19
     e30:	aa 27       	eor	r26, r26
     e32:	f0 0d       	add	r31, r0
     e34:	b1 1d       	adc	r27, r1
     e36:	aa 1f       	adc	r26, r26
     e38:	64 9f       	mul	r22, r20
     e3a:	66 27       	eor	r22, r22
     e3c:	b0 0d       	add	r27, r0
     e3e:	a1 1d       	adc	r26, r1
     e40:	66 1f       	adc	r22, r22
     e42:	82 9f       	mul	r24, r18
     e44:	22 27       	eor	r18, r18
     e46:	b0 0d       	add	r27, r0
     e48:	a1 1d       	adc	r26, r1
     e4a:	62 1f       	adc	r22, r18
     e4c:	73 9f       	mul	r23, r19
     e4e:	b0 0d       	add	r27, r0
     e50:	a1 1d       	adc	r26, r1
     e52:	62 1f       	adc	r22, r18
     e54:	83 9f       	mul	r24, r19
     e56:	a0 0d       	add	r26, r0
     e58:	61 1d       	adc	r22, r1
     e5a:	22 1f       	adc	r18, r18
     e5c:	74 9f       	mul	r23, r20
     e5e:	33 27       	eor	r19, r19
     e60:	a0 0d       	add	r26, r0
     e62:	61 1d       	adc	r22, r1
     e64:	23 1f       	adc	r18, r19
     e66:	84 9f       	mul	r24, r20
     e68:	60 0d       	add	r22, r0
     e6a:	21 1d       	adc	r18, r1
     e6c:	82 2f       	mov	r24, r18
     e6e:	76 2f       	mov	r23, r22
     e70:	6a 2f       	mov	r22, r26
     e72:	11 24       	eor	r1, r1
     e74:	9f 57       	subi	r25, 0x7F	; 127
     e76:	50 40       	sbci	r21, 0x00	; 0
     e78:	8a f0       	brmi	.+34     	; 0xe9c <__mulsf3_pse+0x84>
     e7a:	e1 f0       	breq	.+56     	; 0xeb4 <__mulsf3_pse+0x9c>
     e7c:	88 23       	and	r24, r24
     e7e:	4a f0       	brmi	.+18     	; 0xe92 <__mulsf3_pse+0x7a>
     e80:	ee 0f       	add	r30, r30
     e82:	ff 1f       	adc	r31, r31
     e84:	bb 1f       	adc	r27, r27
     e86:	66 1f       	adc	r22, r22
     e88:	77 1f       	adc	r23, r23
     e8a:	88 1f       	adc	r24, r24
     e8c:	91 50       	subi	r25, 0x01	; 1
     e8e:	50 40       	sbci	r21, 0x00	; 0
     e90:	a9 f7       	brne	.-22     	; 0xe7c <__mulsf3_pse+0x64>
     e92:	9e 3f       	cpi	r25, 0xFE	; 254
     e94:	51 05       	cpc	r21, r1
     e96:	70 f0       	brcs	.+28     	; 0xeb4 <__mulsf3_pse+0x9c>
     e98:	14 c0       	rjmp	.+40     	; 0xec2 <__fp_inf>
     e9a:	aa cf       	rjmp	.-172    	; 0xdf0 <__fp_szero>
     e9c:	5f 3f       	cpi	r21, 0xFF	; 255
     e9e:	ec f3       	brlt	.-6      	; 0xe9a <__mulsf3_pse+0x82>
     ea0:	98 3e       	cpi	r25, 0xE8	; 232
     ea2:	dc f3       	brlt	.-10     	; 0xe9a <__mulsf3_pse+0x82>
     ea4:	86 95       	lsr	r24
     ea6:	77 95       	ror	r23
     ea8:	67 95       	ror	r22
     eaa:	b7 95       	ror	r27
     eac:	f7 95       	ror	r31
     eae:	e7 95       	ror	r30
     eb0:	9f 5f       	subi	r25, 0xFF	; 255
     eb2:	c1 f7       	brne	.-16     	; 0xea4 <__mulsf3_pse+0x8c>
     eb4:	fe 2b       	or	r31, r30
     eb6:	88 0f       	add	r24, r24
     eb8:	91 1d       	adc	r25, r1
     eba:	96 95       	lsr	r25
     ebc:	87 95       	ror	r24
     ebe:	97 f9       	bld	r25, 7
     ec0:	08 95       	ret

00000ec2 <__fp_inf>:
     ec2:	97 f9       	bld	r25, 7
     ec4:	9f 67       	ori	r25, 0x7F	; 127
     ec6:	80 e8       	ldi	r24, 0x80	; 128
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	08 95       	ret

00000ece <__fp_nan>:
     ece:	9f ef       	ldi	r25, 0xFF	; 255
     ed0:	80 ec       	ldi	r24, 0xC0	; 192
     ed2:	08 95       	ret

00000ed4 <__fp_pscA>:
     ed4:	00 24       	eor	r0, r0
     ed6:	0a 94       	dec	r0
     ed8:	16 16       	cp	r1, r22
     eda:	17 06       	cpc	r1, r23
     edc:	18 06       	cpc	r1, r24
     ede:	09 06       	cpc	r0, r25
     ee0:	08 95       	ret

00000ee2 <__fp_pscB>:
     ee2:	00 24       	eor	r0, r0
     ee4:	0a 94       	dec	r0
     ee6:	12 16       	cp	r1, r18
     ee8:	13 06       	cpc	r1, r19
     eea:	14 06       	cpc	r1, r20
     eec:	05 06       	cpc	r0, r21
     eee:	08 95       	ret

00000ef0 <__fp_round>:
     ef0:	09 2e       	mov	r0, r25
     ef2:	03 94       	inc	r0
     ef4:	00 0c       	add	r0, r0
     ef6:	11 f4       	brne	.+4      	; 0xefc <__fp_round+0xc>
     ef8:	88 23       	and	r24, r24
     efa:	52 f0       	brmi	.+20     	; 0xf10 <__fp_round+0x20>
     efc:	bb 0f       	add	r27, r27
     efe:	40 f4       	brcc	.+16     	; 0xf10 <__fp_round+0x20>
     f00:	bf 2b       	or	r27, r31
     f02:	11 f4       	brne	.+4      	; 0xf08 <__fp_round+0x18>
     f04:	60 ff       	sbrs	r22, 0
     f06:	04 c0       	rjmp	.+8      	; 0xf10 <__fp_round+0x20>
     f08:	6f 5f       	subi	r22, 0xFF	; 255
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	8f 4f       	sbci	r24, 0xFF	; 255
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	08 95       	ret

00000f12 <__umulhisi3>:
     f12:	a2 9f       	mul	r26, r18
     f14:	b0 01       	movw	r22, r0
     f16:	b3 9f       	mul	r27, r19
     f18:	c0 01       	movw	r24, r0
     f1a:	a3 9f       	mul	r26, r19
     f1c:	70 0d       	add	r23, r0
     f1e:	81 1d       	adc	r24, r1
     f20:	11 24       	eor	r1, r1
     f22:	91 1d       	adc	r25, r1
     f24:	b2 9f       	mul	r27, r18
     f26:	70 0d       	add	r23, r0
     f28:	81 1d       	adc	r24, r1
     f2a:	11 24       	eor	r1, r1
     f2c:	91 1d       	adc	r25, r1
     f2e:	08 95       	ret

00000f30 <calloc>:
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	86 9f       	mul	r24, r22
     f3a:	80 01       	movw	r16, r0
     f3c:	87 9f       	mul	r24, r23
     f3e:	10 0d       	add	r17, r0
     f40:	96 9f       	mul	r25, r22
     f42:	10 0d       	add	r17, r0
     f44:	11 24       	eor	r1, r1
     f46:	c8 01       	movw	r24, r16
     f48:	0e 94 b4 07 	call	0xf68	; 0xf68 <malloc>
     f4c:	ec 01       	movw	r28, r24
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	29 f0       	breq	.+10     	; 0xf5c <calloc+0x2c>
     f52:	a8 01       	movw	r20, r16
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	0e 94 db 08 	call	0x11b6	; 0x11b6 <memset>
     f5c:	ce 01       	movw	r24, r28
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	08 95       	ret

00000f68 <malloc>:
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	82 30       	cpi	r24, 0x02	; 2
     f6e:	91 05       	cpc	r25, r1
     f70:	10 f4       	brcc	.+4      	; 0xf76 <malloc+0xe>
     f72:	82 e0       	ldi	r24, 0x02	; 2
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	e0 91 f4 01 	lds	r30, 0x01F4
     f7a:	f0 91 f5 01 	lds	r31, 0x01F5
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	a0 e0       	ldi	r26, 0x00	; 0
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	30 97       	sbiw	r30, 0x00	; 0
     f88:	39 f1       	breq	.+78     	; 0xfd8 <malloc+0x70>
     f8a:	40 81       	ld	r20, Z
     f8c:	51 81       	ldd	r21, Z+1	; 0x01
     f8e:	48 17       	cp	r20, r24
     f90:	59 07       	cpc	r21, r25
     f92:	b8 f0       	brcs	.+46     	; 0xfc2 <malloc+0x5a>
     f94:	48 17       	cp	r20, r24
     f96:	59 07       	cpc	r21, r25
     f98:	71 f4       	brne	.+28     	; 0xfb6 <malloc+0x4e>
     f9a:	82 81       	ldd	r24, Z+2	; 0x02
     f9c:	93 81       	ldd	r25, Z+3	; 0x03
     f9e:	10 97       	sbiw	r26, 0x00	; 0
     fa0:	29 f0       	breq	.+10     	; 0xfac <malloc+0x44>
     fa2:	13 96       	adiw	r26, 0x03	; 3
     fa4:	9c 93       	st	X, r25
     fa6:	8e 93       	st	-X, r24
     fa8:	12 97       	sbiw	r26, 0x02	; 2
     faa:	2c c0       	rjmp	.+88     	; 0x1004 <malloc+0x9c>
     fac:	90 93 f5 01 	sts	0x01F5, r25
     fb0:	80 93 f4 01 	sts	0x01F4, r24
     fb4:	27 c0       	rjmp	.+78     	; 0x1004 <malloc+0x9c>
     fb6:	21 15       	cp	r18, r1
     fb8:	31 05       	cpc	r19, r1
     fba:	31 f0       	breq	.+12     	; 0xfc8 <malloc+0x60>
     fbc:	42 17       	cp	r20, r18
     fbe:	53 07       	cpc	r21, r19
     fc0:	18 f0       	brcs	.+6      	; 0xfc8 <malloc+0x60>
     fc2:	a9 01       	movw	r20, r18
     fc4:	db 01       	movw	r26, r22
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <malloc+0x62>
     fc8:	ef 01       	movw	r28, r30
     fca:	9a 01       	movw	r18, r20
     fcc:	bd 01       	movw	r22, r26
     fce:	df 01       	movw	r26, r30
     fd0:	02 80       	ldd	r0, Z+2	; 0x02
     fd2:	f3 81       	ldd	r31, Z+3	; 0x03
     fd4:	e0 2d       	mov	r30, r0
     fd6:	d7 cf       	rjmp	.-82     	; 0xf86 <malloc+0x1e>
     fd8:	21 15       	cp	r18, r1
     fda:	31 05       	cpc	r19, r1
     fdc:	f9 f0       	breq	.+62     	; 0x101c <malloc+0xb4>
     fde:	28 1b       	sub	r18, r24
     fe0:	39 0b       	sbc	r19, r25
     fe2:	24 30       	cpi	r18, 0x04	; 4
     fe4:	31 05       	cpc	r19, r1
     fe6:	80 f4       	brcc	.+32     	; 0x1008 <malloc+0xa0>
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	9b 81       	ldd	r25, Y+3	; 0x03
     fec:	61 15       	cp	r22, r1
     fee:	71 05       	cpc	r23, r1
     ff0:	21 f0       	breq	.+8      	; 0xffa <malloc+0x92>
     ff2:	fb 01       	movw	r30, r22
     ff4:	93 83       	std	Z+3, r25	; 0x03
     ff6:	82 83       	std	Z+2, r24	; 0x02
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <malloc+0x9a>
     ffa:	90 93 f5 01 	sts	0x01F5, r25
     ffe:	80 93 f4 01 	sts	0x01F4, r24
    1002:	fe 01       	movw	r30, r28
    1004:	32 96       	adiw	r30, 0x02	; 2
    1006:	44 c0       	rjmp	.+136    	; 0x1090 <malloc+0x128>
    1008:	fe 01       	movw	r30, r28
    100a:	e2 0f       	add	r30, r18
    100c:	f3 1f       	adc	r31, r19
    100e:	81 93       	st	Z+, r24
    1010:	91 93       	st	Z+, r25
    1012:	22 50       	subi	r18, 0x02	; 2
    1014:	31 09       	sbc	r19, r1
    1016:	39 83       	std	Y+1, r19	; 0x01
    1018:	28 83       	st	Y, r18
    101a:	3a c0       	rjmp	.+116    	; 0x1090 <malloc+0x128>
    101c:	20 91 f2 01 	lds	r18, 0x01F2
    1020:	30 91 f3 01 	lds	r19, 0x01F3
    1024:	23 2b       	or	r18, r19
    1026:	41 f4       	brne	.+16     	; 0x1038 <malloc+0xd0>
    1028:	20 91 62 00 	lds	r18, 0x0062
    102c:	30 91 63 00 	lds	r19, 0x0063
    1030:	30 93 f3 01 	sts	0x01F3, r19
    1034:	20 93 f2 01 	sts	0x01F2, r18
    1038:	20 91 60 00 	lds	r18, 0x0060
    103c:	30 91 61 00 	lds	r19, 0x0061
    1040:	21 15       	cp	r18, r1
    1042:	31 05       	cpc	r19, r1
    1044:	41 f4       	brne	.+16     	; 0x1056 <malloc+0xee>
    1046:	2d b7       	in	r18, 0x3d	; 61
    1048:	3e b7       	in	r19, 0x3e	; 62
    104a:	40 91 64 00 	lds	r20, 0x0064
    104e:	50 91 65 00 	lds	r21, 0x0065
    1052:	24 1b       	sub	r18, r20
    1054:	35 0b       	sbc	r19, r21
    1056:	e0 91 f2 01 	lds	r30, 0x01F2
    105a:	f0 91 f3 01 	lds	r31, 0x01F3
    105e:	e2 17       	cp	r30, r18
    1060:	f3 07       	cpc	r31, r19
    1062:	a0 f4       	brcc	.+40     	; 0x108c <malloc+0x124>
    1064:	2e 1b       	sub	r18, r30
    1066:	3f 0b       	sbc	r19, r31
    1068:	28 17       	cp	r18, r24
    106a:	39 07       	cpc	r19, r25
    106c:	78 f0       	brcs	.+30     	; 0x108c <malloc+0x124>
    106e:	ac 01       	movw	r20, r24
    1070:	4e 5f       	subi	r20, 0xFE	; 254
    1072:	5f 4f       	sbci	r21, 0xFF	; 255
    1074:	24 17       	cp	r18, r20
    1076:	35 07       	cpc	r19, r21
    1078:	48 f0       	brcs	.+18     	; 0x108c <malloc+0x124>
    107a:	4e 0f       	add	r20, r30
    107c:	5f 1f       	adc	r21, r31
    107e:	50 93 f3 01 	sts	0x01F3, r21
    1082:	40 93 f2 01 	sts	0x01F2, r20
    1086:	81 93       	st	Z+, r24
    1088:	91 93       	st	Z+, r25
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <malloc+0x128>
    108c:	e0 e0       	ldi	r30, 0x00	; 0
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	cf 01       	movw	r24, r30
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <free>:
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	09 f4       	brne	.+2      	; 0x10a2 <free+0xa>
    10a0:	87 c0       	rjmp	.+270    	; 0x11b0 <free+0x118>
    10a2:	fc 01       	movw	r30, r24
    10a4:	32 97       	sbiw	r30, 0x02	; 2
    10a6:	13 82       	std	Z+3, r1	; 0x03
    10a8:	12 82       	std	Z+2, r1	; 0x02
    10aa:	c0 91 f4 01 	lds	r28, 0x01F4
    10ae:	d0 91 f5 01 	lds	r29, 0x01F5
    10b2:	20 97       	sbiw	r28, 0x00	; 0
    10b4:	81 f4       	brne	.+32     	; 0x10d6 <free+0x3e>
    10b6:	20 81       	ld	r18, Z
    10b8:	31 81       	ldd	r19, Z+1	; 0x01
    10ba:	28 0f       	add	r18, r24
    10bc:	39 1f       	adc	r19, r25
    10be:	80 91 f2 01 	lds	r24, 0x01F2
    10c2:	90 91 f3 01 	lds	r25, 0x01F3
    10c6:	82 17       	cp	r24, r18
    10c8:	93 07       	cpc	r25, r19
    10ca:	79 f5       	brne	.+94     	; 0x112a <free+0x92>
    10cc:	f0 93 f3 01 	sts	0x01F3, r31
    10d0:	e0 93 f2 01 	sts	0x01F2, r30
    10d4:	6d c0       	rjmp	.+218    	; 0x11b0 <free+0x118>
    10d6:	de 01       	movw	r26, r28
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	ae 17       	cp	r26, r30
    10de:	bf 07       	cpc	r27, r31
    10e0:	50 f4       	brcc	.+20     	; 0x10f6 <free+0x5e>
    10e2:	12 96       	adiw	r26, 0x02	; 2
    10e4:	4d 91       	ld	r20, X+
    10e6:	5c 91       	ld	r21, X
    10e8:	13 97       	sbiw	r26, 0x03	; 3
    10ea:	9d 01       	movw	r18, r26
    10ec:	41 15       	cp	r20, r1
    10ee:	51 05       	cpc	r21, r1
    10f0:	09 f1       	breq	.+66     	; 0x1134 <free+0x9c>
    10f2:	da 01       	movw	r26, r20
    10f4:	f3 cf       	rjmp	.-26     	; 0x10dc <free+0x44>
    10f6:	b3 83       	std	Z+3, r27	; 0x03
    10f8:	a2 83       	std	Z+2, r26	; 0x02
    10fa:	40 81       	ld	r20, Z
    10fc:	51 81       	ldd	r21, Z+1	; 0x01
    10fe:	84 0f       	add	r24, r20
    1100:	95 1f       	adc	r25, r21
    1102:	8a 17       	cp	r24, r26
    1104:	9b 07       	cpc	r25, r27
    1106:	71 f4       	brne	.+28     	; 0x1124 <free+0x8c>
    1108:	8d 91       	ld	r24, X+
    110a:	9c 91       	ld	r25, X
    110c:	11 97       	sbiw	r26, 0x01	; 1
    110e:	84 0f       	add	r24, r20
    1110:	95 1f       	adc	r25, r21
    1112:	02 96       	adiw	r24, 0x02	; 2
    1114:	91 83       	std	Z+1, r25	; 0x01
    1116:	80 83       	st	Z, r24
    1118:	12 96       	adiw	r26, 0x02	; 2
    111a:	8d 91       	ld	r24, X+
    111c:	9c 91       	ld	r25, X
    111e:	13 97       	sbiw	r26, 0x03	; 3
    1120:	93 83       	std	Z+3, r25	; 0x03
    1122:	82 83       	std	Z+2, r24	; 0x02
    1124:	21 15       	cp	r18, r1
    1126:	31 05       	cpc	r19, r1
    1128:	29 f4       	brne	.+10     	; 0x1134 <free+0x9c>
    112a:	f0 93 f5 01 	sts	0x01F5, r31
    112e:	e0 93 f4 01 	sts	0x01F4, r30
    1132:	3e c0       	rjmp	.+124    	; 0x11b0 <free+0x118>
    1134:	d9 01       	movw	r26, r18
    1136:	13 96       	adiw	r26, 0x03	; 3
    1138:	fc 93       	st	X, r31
    113a:	ee 93       	st	-X, r30
    113c:	12 97       	sbiw	r26, 0x02	; 2
    113e:	4d 91       	ld	r20, X+
    1140:	5d 91       	ld	r21, X+
    1142:	a4 0f       	add	r26, r20
    1144:	b5 1f       	adc	r27, r21
    1146:	ea 17       	cp	r30, r26
    1148:	fb 07       	cpc	r31, r27
    114a:	79 f4       	brne	.+30     	; 0x116a <free+0xd2>
    114c:	80 81       	ld	r24, Z
    114e:	91 81       	ldd	r25, Z+1	; 0x01
    1150:	84 0f       	add	r24, r20
    1152:	95 1f       	adc	r25, r21
    1154:	02 96       	adiw	r24, 0x02	; 2
    1156:	d9 01       	movw	r26, r18
    1158:	11 96       	adiw	r26, 0x01	; 1
    115a:	9c 93       	st	X, r25
    115c:	8e 93       	st	-X, r24
    115e:	82 81       	ldd	r24, Z+2	; 0x02
    1160:	93 81       	ldd	r25, Z+3	; 0x03
    1162:	13 96       	adiw	r26, 0x03	; 3
    1164:	9c 93       	st	X, r25
    1166:	8e 93       	st	-X, r24
    1168:	12 97       	sbiw	r26, 0x02	; 2
    116a:	e0 e0       	ldi	r30, 0x00	; 0
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	9b 81       	ldd	r25, Y+3	; 0x03
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	19 f0       	breq	.+6      	; 0x117c <free+0xe4>
    1176:	fe 01       	movw	r30, r28
    1178:	ec 01       	movw	r28, r24
    117a:	f9 cf       	rjmp	.-14     	; 0x116e <free+0xd6>
    117c:	ce 01       	movw	r24, r28
    117e:	02 96       	adiw	r24, 0x02	; 2
    1180:	28 81       	ld	r18, Y
    1182:	39 81       	ldd	r19, Y+1	; 0x01
    1184:	82 0f       	add	r24, r18
    1186:	93 1f       	adc	r25, r19
    1188:	20 91 f2 01 	lds	r18, 0x01F2
    118c:	30 91 f3 01 	lds	r19, 0x01F3
    1190:	28 17       	cp	r18, r24
    1192:	39 07       	cpc	r19, r25
    1194:	69 f4       	brne	.+26     	; 0x11b0 <free+0x118>
    1196:	30 97       	sbiw	r30, 0x00	; 0
    1198:	29 f4       	brne	.+10     	; 0x11a4 <free+0x10c>
    119a:	10 92 f5 01 	sts	0x01F5, r1
    119e:	10 92 f4 01 	sts	0x01F4, r1
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <free+0x110>
    11a4:	13 82       	std	Z+3, r1	; 0x03
    11a6:	12 82       	std	Z+2, r1	; 0x02
    11a8:	d0 93 f3 01 	sts	0x01F3, r29
    11ac:	c0 93 f2 01 	sts	0x01F2, r28
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	08 95       	ret

000011b6 <memset>:
    11b6:	dc 01       	movw	r26, r24
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <memset+0x6>
    11ba:	6d 93       	st	X+, r22
    11bc:	41 50       	subi	r20, 0x01	; 1
    11be:	50 40       	sbci	r21, 0x00	; 0
    11c0:	e0 f7       	brcc	.-8      	; 0x11ba <memset+0x4>
    11c2:	08 95       	ret

000011c4 <__eerd_word_m16a>:
    11c4:	a8 e1       	ldi	r26, 0x18	; 24
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	42 e0       	ldi	r20, 0x02	; 2
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__eerd_blraw_m16a>

000011d0 <__eewr_word_m16a>:
    11d0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__eewr_byte_m16a>
    11d4:	27 2f       	mov	r18, r23
    11d6:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__eewr_r18_m16a>

000011da <__eerd_block_m16a>:
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22

000011de <__eerd_blraw_m16a>:
    11de:	fc 01       	movw	r30, r24
    11e0:	e1 99       	sbic	0x1c, 1	; 28
    11e2:	fe cf       	rjmp	.-4      	; 0x11e0 <__eerd_blraw_m16a+0x2>
    11e4:	06 c0       	rjmp	.+12     	; 0x11f2 <__eerd_blraw_m16a+0x14>
    11e6:	ff bb       	out	0x1f, r31	; 31
    11e8:	ee bb       	out	0x1e, r30	; 30
    11ea:	e0 9a       	sbi	0x1c, 0	; 28
    11ec:	31 96       	adiw	r30, 0x01	; 1
    11ee:	0d b2       	in	r0, 0x1d	; 29
    11f0:	0d 92       	st	X+, r0
    11f2:	41 50       	subi	r20, 0x01	; 1
    11f4:	50 40       	sbci	r21, 0x00	; 0
    11f6:	b8 f7       	brcc	.-18     	; 0x11e6 <__eerd_blraw_m16a+0x8>
    11f8:	08 95       	ret

000011fa <__eewr_byte_m16a>:
    11fa:	26 2f       	mov	r18, r22

000011fc <__eewr_r18_m16a>:
    11fc:	e1 99       	sbic	0x1c, 1	; 28
    11fe:	fe cf       	rjmp	.-4      	; 0x11fc <__eewr_r18_m16a>
    1200:	9f bb       	out	0x1f, r25	; 31
    1202:	8e bb       	out	0x1e, r24	; 30
    1204:	2d bb       	out	0x1d, r18	; 29
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	e2 9a       	sbi	0x1c, 2	; 28
    120c:	e1 9a       	sbi	0x1c, 1	; 28
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	08 95       	ret

00001214 <_exit>:
    1214:	f8 94       	cli

00001216 <__stop_program>:
    1216:	ff cf       	rjmp	.-2      	; 0x1216 <__stop_program>
