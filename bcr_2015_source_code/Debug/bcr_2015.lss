
bcr_2015.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020ee  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000020ee  000021a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001aa  0080008a  0080008a  000021cc  2**0
                  ALLOC
  3 .eeprom       00000010  00810000  00810000  000021cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000021dc  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  0000220c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dab  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce6  00000000  00000000  0000528f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000107b  00000000  00000000  00005f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a0  00000000  00000000  00006ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a17  00000000  00000000  00007790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001870  00000000  00000000  000081a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  00009a17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "uint_test.h"
#include "../../lib/inc/common.h"
#include "../../lib/inc/hardware_feature.h"
#include "../../lib/inc/LedBug.h"

void vLedDebugTest(){
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
	//test led debug. 
	// total: 40s
	for(int i = 0; i < 10; i++){
		LED_BUG_BLINK;
       4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       8:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <__vector_2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
#include "../../lib/inc/LedBug.h"

void vLedDebugTest(){
	//test led debug. 
	// total: 40s
	for(int i = 0; i < 10; i++){
      20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
		LED_BUG_BLINK;
		_delay_ms(500);
	}	
	vLedCtrl(LED_FAST_BLINK);
      24:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <__vector_9>
      28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      2c:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__vector_11>
      30:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__vector_12>
      34:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
	_delay_ms(10000);
	vLedCtrl(LED_SLOW_BLINK);
      40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      4c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      50:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      54:	7c 08       	sbc	r7, r12
      56:	02 09       	sbc	r16, r2
      58:	79 09       	sbc	r23, r9
	_delay_ms(10000);
	vLedCtrl(LED_STARTUP_COMPELETE);
      5a:	55 0c       	add	r5, r5
      5c:	55 0c       	add	r5, r5
      5e:	55 0c       	add	r5, r5
      60:	55 0c       	add	r5, r5
      62:	55 0c       	add	r5, r5
      64:	55 0c       	add	r5, r5
      66:	55 0c       	add	r5, r5
      68:	04 0a       	sbc	r0, r20
      6a:	1e 0a       	sbc	r1, r30
      6c:	b2 0a       	sbc	r11, r18
      6e:	55 0c       	add	r5, r5
      70:	55 0c       	add	r5, r5
      72:	55 0c       	add	r5, r5
      74:	55 0c       	add	r5, r5
      76:	55 0c       	add	r5, r5
      78:	55 0c       	add	r5, r5
      7a:	55 0c       	add	r5, r5
      7c:	0e 0b       	sbc	r16, r30
      7e:	26 0b       	sbc	r18, r22
      80:	32 0b       	sbc	r19, r18
      82:	55 0c       	add	r5, r5
      84:	55 0c       	add	r5, r5
      86:	55 0c       	add	r5, r5
      88:	55 0c       	add	r5, r5
      8a:	55 0c       	add	r5, r5
      8c:	55 0c       	add	r5, r5
      8e:	55 0c       	add	r5, r5
      90:	d7 0a       	sbc	r13, r23
      92:	ef 0a       	sbc	r14, r31
      94:	fb 0a       	sbc	r15, r27
      96:	55 0c       	add	r5, r5
      98:	55 0c       	add	r5, r5
      9a:	55 0c       	add	r5, r5
      9c:	55 0c       	add	r5, r5
      9e:	55 0c       	add	r5, r5
      a0:	55 0c       	add	r5, r5
      a2:	55 0c       	add	r5, r5
      a4:	55 0c       	add	r5, r5
      a6:	45 0b       	sbc	r20, r21
      a8:	66 0b       	sbc	r22, r22
      aa:	80 0b       	sbc	r24, r16
      ac:	99 0b       	sbc	r25, r25
      ae:	bb 0b       	sbc	r27, r27
      b0:	55 0c       	add	r5, r5
      b2:	55 0c       	add	r5, r5
      b4:	55 0c       	add	r5, r5
      b6:	55 0c       	add	r5, r5
      b8:	55 0c       	add	r5, r5
      ba:	ca 0b       	sbc	r28, r26
      bc:	ec 0b       	sbc	r30, r28
      be:	08 0c       	add	r0, r8
      c0:	24 0c       	add	r2, r4
      c2:	46 0c       	add	r4, r6

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf e5       	ldi	r28, 0x5F	; 95
      ca:	d4 e0       	ldi	r29, 0x04	; 4
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	10 e0       	ldi	r17, 0x00	; 0
      d2:	a0 e6       	ldi	r26, 0x60	; 96
      d4:	b0 e0       	ldi	r27, 0x00	; 0
      d6:	ee ee       	ldi	r30, 0xEE	; 238
      d8:	f0 e2       	ldi	r31, 0x20	; 32
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	aa 38       	cpi	r26, 0x8A	; 138
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	22 e0       	ldi	r18, 0x02	; 2
      e8:	aa e8       	ldi	r26, 0x8A	; 138
      ea:	b0 e0       	ldi	r27, 0x00	; 0
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a4 33       	cpi	r26, 0x34	; 52
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
      f6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <main>
      fa:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <_exit>

000000fe <__bad_interrupt>:
      fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <v_init_debug_via_uart>:
	/*
     *  Initialize UART library for debugger, pass baud rate and AVR CPU clock
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )     
     */	
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 		
     102:	86 e2       	ldi	r24, 0x26	; 38
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	0e 94 20 07 	call	0xe40	; 0xe40 <uart_init>
	
	//stdout = &usartstd;
	ptr_rx_buff = (unsigned int *)calloc(DEBUG_BUFF_SIZE,sizeof(unsigned int));
     10a:	62 e0       	ldi	r22, 0x02	; 2
     10c:	70 e0       	ldi	r23, 0x00	; 0
     10e:	80 e4       	ldi	r24, 0x40	; 64
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <calloc>
     116:	90 93 f9 01 	sts	0x01F9, r25
     11a:	80 93 f8 01 	sts	0x01F8, r24
	ptr_command_data = (uint8_t *)calloc(DEBUG_BUFF_SIZE,sizeof(uint8_t));
     11e:	61 e0       	ldi	r22, 0x01	; 1
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	80 e4       	ldi	r24, 0x40	; 64
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <calloc>
     12a:	90 93 fd 01 	sts	0x01FD, r25
     12e:	80 93 fc 01 	sts	0x01FC, r24
	index_rx_buf = 0;
     132:	10 92 fb 01 	sts	0x01FB, r1
     136:	10 92 fa 01 	sts	0x01FA, r1
     13a:	08 95       	ret

0000013c <bDebugProcess>:
/*
	@brief:		This function have been handle of main function
	@param:		none
	@return:	none 
*/
PUBLIC bool bDebugProcess(void){
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
	
	// [Vo Huu Tai 8/8/2015 ]  Note!! unsigned int only, i don't know why ?? .. :'(
	unsigned int ucUartDataIn;
	ucUartDataIn = uart_getc();	
     140:	0e 94 34 07 	call	0xe68	; 0xe68 <uart_getc>

	if(ucUartDataIn & UART_NO_DATA){
     144:	90 fd       	sbrc	r25, 0
     146:	67 c0       	rjmp	.+206    	; 0x216 <bDebugProcess+0xda>
		return false; //nothing in UART buffer, return
	} else{
		#ifdef _IN_FILE_BUD_
		//uart_putc(ucUartDataIn);
		#endif
		if(ucUartDataIn == '>'){ //first UART data incoming
     148:	8e 33       	cpi	r24, 0x3E	; 62
     14a:	91 05       	cpc	r25, r1
     14c:	39 f4       	brne	.+14     	; 0x15c <bDebugProcess+0x20>
			index_rx_buf = 0;
     14e:	10 92 fb 01 	sts	0x01FB, r1
     152:	10 92 fa 01 	sts	0x01FA, r1
			bIsDubugCommandCompelete = false;
     156:	10 92 8c 00 	sts	0x008C, r1
     15a:	5d c0       	rjmp	.+186    	; 0x216 <bDebugProcess+0xda>
		}
		else if(ucUartDataIn == '<'){//end UART data coming
     15c:	8c 33       	cpi	r24, 0x3C	; 60
     15e:	91 05       	cpc	r25, r1
     160:	09 f0       	breq	.+2      	; 0x164 <bDebugProcess+0x28>
     162:	42 c0       	rjmp	.+132    	; 0x1e8 <bDebugProcess+0xac>
			
			sUartPacket.ucInfo = ptr_rx_buff[0];
     164:	e0 91 f8 01 	lds	r30, 0x01F8
     168:	f0 91 f9 01 	lds	r31, 0x01F9
     16c:	80 81       	ld	r24, Z
     16e:	80 93 f3 01 	sts	0x01F3, r24
			sUartPacket.ucDataLength = ptr_rx_buff[1];
     172:	82 81       	ldd	r24, Z+2	; 0x02
     174:	e4 ef       	ldi	r30, 0xF4	; 244
     176:	f1 e0       	ldi	r31, 0x01	; 1
     178:	80 83       	st	Z, r24
			
			for(uint8_t i = 0; i < sUartPacket.ucDataLength; i++){
     17a:	80 81       	ld	r24, Z
     17c:	88 23       	and	r24, r24
     17e:	c9 f0       	breq	.+50     	; 0x1b2 <bDebugProcess+0x76>
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	ef 01       	movw	r28, r30
				ptr_command_data[i] = ptr_rx_buff[i+2];
     184:	82 2f       	mov	r24, r18
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	e0 91 fc 01 	lds	r30, 0x01FC
     18c:	f0 91 fd 01 	lds	r31, 0x01FD
     190:	e8 0f       	add	r30, r24
     192:	f9 1f       	adc	r31, r25
     194:	02 96       	adiw	r24, 0x02	; 2
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	a0 91 f8 01 	lds	r26, 0x01F8
     19e:	b0 91 f9 01 	lds	r27, 0x01F9
     1a2:	a8 0f       	add	r26, r24
     1a4:	b9 1f       	adc	r27, r25
     1a6:	8c 91       	ld	r24, X
     1a8:	80 83       	st	Z, r24
		else if(ucUartDataIn == '<'){//end UART data coming
			
			sUartPacket.ucInfo = ptr_rx_buff[0];
			sUartPacket.ucDataLength = ptr_rx_buff[1];
			
			for(uint8_t i = 0; i < sUartPacket.ucDataLength; i++){
     1aa:	2f 5f       	subi	r18, 0xFF	; 255
     1ac:	88 81       	ld	r24, Y
     1ae:	28 17       	cp	r18, r24
     1b0:	48 f3       	brcs	.-46     	; 0x184 <bDebugProcess+0x48>
				ptr_command_data[i] = ptr_rx_buff[i+2];
			}
			sUartPacket.ucPtrData = ptr_command_data;
     1b2:	80 91 fc 01 	lds	r24, 0x01FC
     1b6:	90 91 fd 01 	lds	r25, 0x01FD
     1ba:	90 93 f6 01 	sts	0x01F6, r25
     1be:	80 93 f5 01 	sts	0x01F5, r24
			sUartPacket.ucCheckSum = ptr_rx_buff[sUartPacket.ucDataLength + 2];
     1c2:	e0 91 f4 01 	lds	r30, 0x01F4
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	32 96       	adiw	r30, 0x02	; 2
     1ca:	ee 0f       	add	r30, r30
     1cc:	ff 1f       	adc	r31, r31
     1ce:	80 91 f8 01 	lds	r24, 0x01F8
     1d2:	90 91 f9 01 	lds	r25, 0x01F9
     1d6:	e8 0f       	add	r30, r24
     1d8:	f9 1f       	adc	r31, r25
     1da:	80 81       	ld	r24, Z
     1dc:	80 93 f7 01 	sts	0x01F7, r24
			for(uint8_t i = 0; i < sUartPacket.ucDataLength; i++){
				vPutIntNum(sUartPacket.ucPtrData[i],DEC_TYPE);
			}
			vPutStr("========================\n");			
			#endif		   
			bIsDubugCommandCompelete = true;
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	80 93 8c 00 	sts	0x008C, r24
     1e6:	17 c0       	rjmp	.+46     	; 0x216 <bDebugProcess+0xda>
		}
		else { //get data
			bIsDubugCommandCompelete = false;
     1e8:	10 92 8c 00 	sts	0x008C, r1
			ptr_rx_buff[index_rx_buf++] = ucUartDataIn;			
     1ec:	e0 91 f8 01 	lds	r30, 0x01F8
     1f0:	f0 91 f9 01 	lds	r31, 0x01F9
     1f4:	20 91 fa 01 	lds	r18, 0x01FA
     1f8:	30 91 fb 01 	lds	r19, 0x01FB
     1fc:	a9 01       	movw	r20, r18
     1fe:	4f 5f       	subi	r20, 0xFF	; 255
     200:	5f 4f       	sbci	r21, 0xFF	; 255
     202:	50 93 fb 01 	sts	0x01FB, r21
     206:	40 93 fa 01 	sts	0x01FA, r20
     20a:	22 0f       	add	r18, r18
     20c:	33 1f       	adc	r19, r19
     20e:	e2 0f       	add	r30, r18
     210:	f3 1f       	adc	r31, r19
     212:	91 83       	std	Z+1, r25	; 0x01
     214:	80 83       	st	Z, r24
		}		
	}	

	return false;
}
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <bMsgIsOK>:
	@brief:		Check msg is OK
	@param:		none
	@return:	True: msg ready be used 
*/
PUBLIC bool bMsgIsOK(){
	if(bIsDubugCommandCompelete){
     21e:	80 91 8c 00 	lds	r24, 0x008C
     222:	88 23       	and	r24, r24
     224:	21 f0       	breq	.+8      	; 0x22e <bMsgIsOK+0x10>
		if((sUartPacket.ucCheckSum | 0xff) == 0xff)return true;
     226:	80 91 f7 01 	lds	r24, 0x01F7
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	08 95       	ret
	}	
	return false;
     22e:	80 e0       	ldi	r24, 0x00	; 0
}
     230:	08 95       	ret

00000232 <ucGetCMDInfo>:
	@brief:		Get command info
	@param:		none
	@return:	command info 
*/
PUBLIC uint8_t ucGetCMDInfo(){
	return sUartPacket.ucInfo;
     232:	80 91 f3 01 	lds	r24, 0x01F3
}
     236:	08 95       	ret

00000238 <vSetCMDInfo>:
	@brief:		Set CMD info
	@param:		command info
	@return:	none 
*/
PUBLIC void vSetCMDInfo(uint8_t ucCMDType){
	sUartPacket.ucInfo = ucCMDType;
     238:	80 93 f3 01 	sts	0x01F3, r24
     23c:	08 95       	ret

0000023e <ucGetData>:
/*
	@brief:		Get data of S_UART_PACKET
	@param:		pointer to saving data
	@return:	none 
*/
PUBLIC void ucGetData(uint8_t *ucPrtData){
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
	// [Vo Huu Tai 9/8/2015 ]  why
	//ucPrtData = sUartPacket.ucPtrData; //why, it not work
	for (int i = 0; i < sUartPacket.ucDataLength; i++)
     242:	20 91 f4 01 	lds	r18, 0x01F4
     246:	22 23       	and	r18, r18
     248:	b1 f0       	breq	.+44     	; 0x276 <ucGetData+0x38>
     24a:	e8 2f       	mov	r30, r24
     24c:	f9 2f       	mov	r31, r25
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
	{
		ucPrtData[i] = sUartPacket.ucPtrData[i];
     252:	45 ef       	ldi	r20, 0xF5	; 245
     254:	51 e0       	ldi	r21, 0x01	; 1
	@return:	none 
*/
PUBLIC void ucGetData(uint8_t *ucPrtData){
	// [Vo Huu Tai 9/8/2015 ]  why
	//ucPrtData = sUartPacket.ucPtrData; //why, it not work
	for (int i = 0; i < sUartPacket.ucDataLength; i++)
     256:	64 ef       	ldi	r22, 0xF4	; 244
     258:	71 e0       	ldi	r23, 0x01	; 1
	{
		ucPrtData[i] = sUartPacket.ucPtrData[i];
     25a:	ea 01       	movw	r28, r20
     25c:	a8 81       	ld	r26, Y
     25e:	b9 81       	ldd	r27, Y+1	; 0x01
     260:	a8 0f       	add	r26, r24
     262:	b9 1f       	adc	r27, r25
     264:	2c 91       	ld	r18, X
     266:	21 93       	st	Z+, r18
	@return:	none 
*/
PUBLIC void ucGetData(uint8_t *ucPrtData){
	// [Vo Huu Tai 9/8/2015 ]  why
	//ucPrtData = sUartPacket.ucPtrData; //why, it not work
	for (int i = 0; i < sUartPacket.ucDataLength; i++)
     268:	01 96       	adiw	r24, 0x01	; 1
     26a:	db 01       	movw	r26, r22
     26c:	2c 91       	ld	r18, X
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	82 17       	cp	r24, r18
     272:	93 07       	cpc	r25, r19
     274:	94 f3       	brlt	.-28     	; 0x25a <ucGetData+0x1c>
	for(uint8_t i = 0; i < sUartPacket.ucDataLength; i++){
		vPutIntNum(ucPrtData[i],DEC_TYPE);
	}	
	vPutStr("ucGetData() END\n");
	#endif
}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <ucCalChecSum>:
	@brief:		Internal function, Cal checksum
	@param:		UART PACKET
	@return:	Check sum of data  
	@Note:		Mine, check sum for only data, not for type and length,..
*/
PRIVATE uint8_t ucCalChecSum(struct S_UART_PACKET sPacket){
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	00 d0       	rcall	.+0      	; 0x282 <ucCalChecSum+0x6>
     282:	00 d0       	rcall	.+0      	; 0x284 <ucCalChecSum+0x8>
     284:	1f 92       	push	r1
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	49 83       	std	Y+1, r20	; 0x01
     28c:	5a 83       	std	Y+2, r21	; 0x02
     28e:	6b 83       	std	Y+3, r22	; 0x03
     290:	7c 83       	std	Y+4, r23	; 0x04
     292:	8d 83       	std	Y+5, r24	; 0x05
	
	int ucRet = 0;
	
	ucRet += sPacket.ucInfo;
	ucRet += sPacket.ucDataLength;
     294:	65 2f       	mov	r22, r21
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	9b 01       	movw	r18, r22
     29a:	24 0f       	add	r18, r20
     29c:	31 1d       	adc	r19, r1
     29e:	c9 01       	movw	r24, r18
	for (int i = 0; i < sPacket.ucDataLength; i++)
     2a0:	16 16       	cp	r1, r22
     2a2:	17 06       	cpc	r1, r23
     2a4:	64 f4       	brge	.+24     	; 0x2be <ucCalChecSum+0x42>
     2a6:	eb 81       	ldd	r30, Y+3	; 0x03
     2a8:	fc 81       	ldd	r31, Y+4	; 0x04
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
	{
		 ucRet += sPacket.ucPtrData[i];
     2ae:	41 91       	ld	r20, Z+
     2b0:	84 0f       	add	r24, r20
     2b2:	91 1d       	adc	r25, r1
	
	int ucRet = 0;
	
	ucRet += sPacket.ucInfo;
	ucRet += sPacket.ucDataLength;
	for (int i = 0; i < sPacket.ucDataLength; i++)
     2b4:	2f 5f       	subi	r18, 0xFF	; 255
     2b6:	3f 4f       	sbci	r19, 0xFF	; 255
     2b8:	26 17       	cp	r18, r22
     2ba:	37 07       	cpc	r19, r23
     2bc:	c4 f3       	brlt	.-16     	; 0x2ae <ucCalChecSum+0x32>
		 ucRet += sPacket.ucPtrData[i];
	}
	 ucRet ^= 0xFF;
	 return (uint8_t) ucRet;
	
}
     2be:	80 95       	com	r24
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <vSendMSG>:
/*
	@brief:		Sending msg via UART
	@param:		msg to send
	@return:	none 
*/
PUBLIC void vSendMSG(struct S_UART_PACKET K_MSG){
     2d0:	cf 92       	push	r12
     2d2:	df 92       	push	r13
     2d4:	ef 92       	push	r14
     2d6:	ff 92       	push	r15
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <vSendMSG+0x12>
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <vSendMSG+0x14>
     2e4:	1f 92       	push	r1
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	49 83       	std	Y+1, r20	; 0x01
     2ec:	e5 2e       	mov	r14, r21
     2ee:	5a 83       	std	Y+2, r21	; 0x02
     2f0:	6b 83       	std	Y+3, r22	; 0x03
     2f2:	7c 83       	std	Y+4, r23	; 0x04
     2f4:	8d 83       	std	Y+5, r24	; 0x05
	       >	type	datalength		data[0:length]	checksum	<
		   
		   >	0			1			48				xx		<
	
	*/
	uint8_t *ucPtrDataSend = (uint8_t*)calloc(DEBUG_BUFF_SIZE,sizeof(uint8_t));
     2f6:	61 e0       	ldi	r22, 0x01	; 1
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	80 e4       	ldi	r24, 0x40	; 64
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <calloc>
     302:	8c 01       	movw	r16, r24
	
	ucPtrDataSend[0] = '>';
     304:	8e e3       	ldi	r24, 0x3E	; 62
     306:	f8 01       	movw	r30, r16
     308:	80 83       	st	Z, r24
	ucPtrDataSend[1] = K_MSG.ucInfo;
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	81 83       	std	Z+1, r24	; 0x01
	ucPtrDataSend[2] = K_MSG.ucDataLength;
     30e:	e2 82       	std	Z+2, r14	; 0x02
	
	for(int i = 0; i < K_MSG.ucDataLength; i++){
     310:	f1 2c       	mov	r15, r1
     312:	1e 14       	cp	r1, r14
     314:	1f 04       	cpc	r1, r15
     316:	64 f4       	brge	.+24     	; 0x330 <vSendMSG+0x60>
     318:	ab 81       	ldd	r26, Y+3	; 0x03
     31a:	bc 81       	ldd	r27, Y+4	; 0x04
     31c:	33 96       	adiw	r30, 0x03	; 3
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
		ucPtrDataSend[3 + i] = K_MSG.ucPtrData[i];
     322:	8d 91       	ld	r24, X+
     324:	81 93       	st	Z+, r24
	
	ucPtrDataSend[0] = '>';
	ucPtrDataSend[1] = K_MSG.ucInfo;
	ucPtrDataSend[2] = K_MSG.ucDataLength;
	
	for(int i = 0; i < K_MSG.ucDataLength; i++){
     326:	2f 5f       	subi	r18, 0xFF	; 255
     328:	3f 4f       	sbci	r19, 0xFF	; 255
     32a:	2e 15       	cp	r18, r14
     32c:	3f 05       	cpc	r19, r15
     32e:	cc f3       	brlt	.-14     	; 0x322 <vSendMSG+0x52>
		ucPtrDataSend[3 + i] = K_MSG.ucPtrData[i];
	}
	
	ucPtrDataSend[3 + K_MSG.ucDataLength] = ucCalChecSum(K_MSG);
     330:	67 01       	movw	r12, r14
     332:	f3 e0       	ldi	r31, 0x03	; 3
     334:	cf 0e       	add	r12, r31
     336:	d1 1c       	adc	r13, r1
     338:	c0 0e       	add	r12, r16
     33a:	d1 1e       	adc	r13, r17
     33c:	49 81       	ldd	r20, Y+1	; 0x01
     33e:	5a 81       	ldd	r21, Y+2	; 0x02
     340:	6b 81       	ldd	r22, Y+3	; 0x03
     342:	7c 81       	ldd	r23, Y+4	; 0x04
     344:	8d 81       	ldd	r24, Y+5	; 0x05
     346:	0e 94 3e 01 	call	0x27c	; 0x27c <ucCalChecSum>
     34a:	f6 01       	movw	r30, r12
     34c:	80 83       	st	Z, r24
	ucPtrDataSend[4 + K_MSG.ucDataLength] = '<';	
     34e:	f8 01       	movw	r30, r16
     350:	ee 0d       	add	r30, r14
     352:	ff 1d       	adc	r31, r15
     354:	8c e3       	ldi	r24, 0x3C	; 60
     356:	84 83       	std	Z+4, r24	; 0x04
	
	
	for(uint8_t i = 0; i < (K_MSG.ucDataLength + 5); i++){
     358:	c7 01       	movw	r24, r14
     35a:	05 96       	adiw	r24, 0x05	; 5
     35c:	7c 01       	movw	r14, r24
     35e:	d1 2c       	mov	r13, r1
		uart_putc(ucPtrDataSend[i]);
     360:	f8 01       	movw	r30, r16
     362:	ed 0d       	add	r30, r13
     364:	f1 1d       	adc	r31, r1
     366:	80 81       	ld	r24, Z
     368:	0e 94 4d 07 	call	0xe9a	; 0xe9a <uart_putc>
	
	ucPtrDataSend[3 + K_MSG.ucDataLength] = ucCalChecSum(K_MSG);
	ucPtrDataSend[4 + K_MSG.ucDataLength] = '<';	
	
	
	for(uint8_t i = 0; i < (K_MSG.ucDataLength + 5); i++){
     36c:	d3 94       	inc	r13
     36e:	2d 2d       	mov	r18, r13
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	2e 15       	cp	r18, r14
     374:	3f 05       	cpc	r19, r15
     376:	a4 f3       	brlt	.-24     	; 0x360 <vSendMSG+0x90>
		uart_putc(ucPtrDataSend[i]);
	}
	
	free(ucPtrDataSend);
     378:	c8 01       	movw	r24, r16
     37a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <free>
}
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	08 95       	ret

0000039a <vOutLed7>:
/*
	@brief:		Send data data' LED 7 segment to slave board
	@param:		Data to be sent
	@return:	none 
*/
PUBLIC void vOutLed7(unsigned int uiData){
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	27 97       	sbiw	r28, 0x07	; 7
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	8c 01       	movw	r16, r24
	if(uiData == uiOldDataLed7seg)return;
     3b4:	80 91 8a 00 	lds	r24, 0x008A
     3b8:	90 91 8b 00 	lds	r25, 0x008B
     3bc:	08 17       	cp	r16, r24
     3be:	19 07       	cpc	r17, r25
     3c0:	29 f1       	breq	.+74     	; 0x40c <vOutLed7+0x72>
	
	
	struct S_UART_PACKET msg ;
	uint8_t ucPrtData[2];
	
	ucPrtData[0] = uiData / 100;
     3c2:	98 01       	movw	r18, r16
     3c4:	36 95       	lsr	r19
     3c6:	27 95       	ror	r18
     3c8:	36 95       	lsr	r19
     3ca:	27 95       	ror	r18
     3cc:	ab e7       	ldi	r26, 0x7B	; 123
     3ce:	b4 e1       	ldi	r27, 0x14	; 20
     3d0:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__umulhisi3>
     3d4:	96 95       	lsr	r25
     3d6:	87 95       	ror	r24
     3d8:	8e 83       	std	Y+6, r24	; 0x06
	ucPrtData[1] = uiData % 100;
     3da:	44 e6       	ldi	r20, 0x64	; 100
     3dc:	48 9f       	mul	r20, r24
     3de:	90 01       	movw	r18, r0
     3e0:	49 9f       	mul	r20, r25
     3e2:	30 0d       	add	r19, r0
     3e4:	11 24       	eor	r1, r1
     3e6:	c8 01       	movw	r24, r16
     3e8:	82 1b       	sub	r24, r18
     3ea:	93 0b       	sbc	r25, r19
     3ec:	8f 83       	std	Y+7, r24	; 0x07
	
	msg.ucInfo = CMD_UPDATE_LED_7SEG;
	msg.ucDataLength = 2;
	msg.ucPtrData = ucPrtData;	
     3ee:	ce 01       	movw	r24, r28
     3f0:	06 96       	adiw	r24, 0x06	; 6
     3f2:	68 2f       	mov	r22, r24
     3f4:	9c 83       	std	Y+4, r25	; 0x04
     3f6:	8b 83       	std	Y+3, r24	; 0x03
	
	vSendMSG(msg);	
     3f8:	40 e0       	ldi	r20, 0x00	; 0
     3fa:	52 e0       	ldi	r21, 0x02	; 2
     3fc:	7c 81       	ldd	r23, Y+4	; 0x04
     3fe:	8d 81       	ldd	r24, Y+5	; 0x05
     400:	0e 94 68 01 	call	0x2d0	; 0x2d0 <vSendMSG>
	
	uiOldDataLed7seg = uiData;
     404:	10 93 8b 00 	sts	0x008B, r17
     408:	00 93 8a 00 	sts	0x008A, r16
}
     40c:	27 96       	adiw	r28, 0x07	; 7
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	08 95       	ret

00000422 <vBeep>:
/*
	@brief:		send msg control beep
	@param:		time beep in ms, form 000 to 9999 ms
	@return:	none 
*/
PUBLIC void vBeep(unsigned int uiBeepTime_ms){
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	27 97       	sbiw	r28, 0x07	; 7
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
     436:	ac 01       	movw	r20, r24
     438:	40 31       	cpi	r20, 0x10	; 16
     43a:	87 e2       	ldi	r24, 0x27	; 39
     43c:	58 07       	cpc	r21, r24
     43e:	10 f0       	brcs	.+4      	; 0x444 <vBeep+0x22>
     440:	4f e0       	ldi	r20, 0x0F	; 15
     442:	57 e2       	ldi	r21, 0x27	; 39
	uint8_t ucPrtData[2];
	struct S_UART_PACKET msg ;
	
	if(uiBeepTime_ms > 9999)uiBeepTime_ms = 9999;
	
	ucPrtData[0] = uiBeepTime_ms / 100;
     444:	9a 01       	movw	r18, r20
     446:	36 95       	lsr	r19
     448:	27 95       	ror	r18
     44a:	36 95       	lsr	r19
     44c:	27 95       	ror	r18
     44e:	ab e7       	ldi	r26, 0x7B	; 123
     450:	b4 e1       	ldi	r27, 0x14	; 20
     452:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__umulhisi3>
     456:	96 95       	lsr	r25
     458:	87 95       	ror	r24
     45a:	89 83       	std	Y+1, r24	; 0x01
	ucPrtData[1] = uiBeepTime_ms % 100;
     45c:	64 e6       	ldi	r22, 0x64	; 100
     45e:	68 9f       	mul	r22, r24
     460:	90 01       	movw	r18, r0
     462:	69 9f       	mul	r22, r25
     464:	30 0d       	add	r19, r0
     466:	11 24       	eor	r1, r1
     468:	42 1b       	sub	r20, r18
     46a:	53 0b       	sbc	r21, r19
     46c:	4a 83       	std	Y+2, r20	; 0x02

	
	msg.ucInfo = CMD_BEEP;
	msg.ucDataLength = 2;
	msg.ucPtrData = ucPrtData;
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	68 2f       	mov	r22, r24
     474:	9e 83       	std	Y+6, r25	; 0x06
     476:	8d 83       	std	Y+5, r24	; 0x05
	
	vSendMSG(msg);	
     478:	41 e0       	ldi	r20, 0x01	; 1
     47a:	52 e0       	ldi	r21, 0x02	; 2
     47c:	7e 81       	ldd	r23, Y+6	; 0x06
     47e:	8f 81       	ldd	r24, Y+7	; 0x07
     480:	0e 94 68 01 	call	0x2d0	; 0x2d0 <vSendMSG>
}
     484:	27 96       	adiw	r28, 0x07	; 7
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <iGetInlined>:
/*
	@brief:		Get inclined of mpu6050 board
	@param:		none
	@return:	inclined of sensor 
*/
PUBLIC int iGetInlined(){
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	00 d0       	rcall	.+0      	; 0x49c <iGetInlined+0x6>
     49c:	00 d0       	rcall	.+0      	; 0x49e <iGetInlined+0x8>
     49e:	00 d0       	rcall	.+0      	; 0x4a0 <iGetInlined+0xa>
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t ucPrtData[1] = {0};// = (uint8_t *)calloc(1,sizeof(uint8_t));	
     4a4:	19 82       	std	Y+1, r1	; 0x01
	
	struct S_UART_PACKET msg ;
	msg.ucInfo = CMD_SENSOR;
	msg.ucDataLength = 1;
	msg.ucPtrData = ucPrtData;
     4a6:	ce 01       	movw	r24, r28
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	68 2f       	mov	r22, r24
     4ac:	9d 83       	std	Y+5, r25	; 0x05
     4ae:	8c 83       	std	Y+4, r24	; 0x04
	vSendMSG(msg);	
     4b0:	42 e0       	ldi	r20, 0x02	; 2
     4b2:	51 e0       	ldi	r21, 0x01	; 1
     4b4:	7d 81       	ldd	r23, Y+5	; 0x05
     4b6:	8e 81       	ldd	r24, Y+6	; 0x06
     4b8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <vSendMSG>
		
	return 0;
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	26 96       	adiw	r28, 0x06	; 6
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	cd bf       	out	0x3d, r28	; 61
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <vInitTimer0>:
				Normal mode.
				F = 12Mhz
				T = 5.33333us
				=> prescaler = 64
	*/
	TCCR0 = (1 << CS01) | (1<<CS00);
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
     4d6:	89 b7       	in	r24, 0x39	; 57
     4d8:	81 60       	ori	r24, 0x01	; 1
     4da:	89 bf       	out	0x39, r24	; 57
     4dc:	08 95       	ret

000004de <vInitTimer1>:
				F = 12Mhz
				T = 15ms
				=> prescaler = 8.
				ICR1 = 15ms / ((1/12Mhz)*8) = 22500	
	*/
	TCCR1A = (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
     4de:	82 ea       	ldi	r24, 0xA2	; 162
     4e0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
     4e2:	8a e1       	ldi	r24, 0x1A	; 26
     4e4:	8e bd       	out	0x2e, r24	; 46
	ICR1 = PWM_PERIOD_LEFT_MAX;
     4e6:	84 ee       	ldi	r24, 0xE4	; 228
     4e8:	97 e5       	ldi	r25, 0x57	; 87
     4ea:	97 bd       	out	0x27, r25	; 39
     4ec:	86 bd       	out	0x26, r24	; 38
	OCR1A = SERVO_CENTER; //Servo, 1ms <-> 1500 and 2ms <-> 3000
     4ee:	8e e2       	ldi	r24, 0x2E	; 46
     4f0:	99 e0       	ldi	r25, 0x09	; 9
     4f2:	9b bd       	out	0x2b, r25	; 43
     4f4:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 0;//Motor Left
     4f6:	19 bc       	out	0x29, r1	; 41
     4f8:	18 bc       	out	0x28, r1	; 40
     4fa:	08 95       	ret

000004fc <vInitProgram>:
#include "../inc/hardware_config.h"
#include "../inc/debug.h"

void vInitProgram(){
	//disable local interrupt
	cli();
     4fc:	f8 94       	cli
	
	//IO initialize
	LED_BUB_INIT;		//Led debug is output
     4fe:	bf 9a       	sbi	0x17, 7	; 23
     500:	c7 9a       	sbi	0x18, 7	; 24
	KEY_INIT;			//Key is input
     502:	b8 98       	cbi	0x17, 0	; 23
     504:	c0 9a       	sbi	0x18, 0	; 24
     506:	b9 98       	cbi	0x17, 1	; 23
     508:	c1 9a       	sbi	0x18, 1	; 24
     50a:	ba 98       	cbi	0x17, 2	; 23
     50c:	c2 9a       	sbi	0x18, 2	; 24
	SWITCH_INIT;		//Switch is input
     50e:	a3 98       	cbi	0x14, 3	; 20
     510:	ab 9a       	sbi	0x15, 3	; 21
     512:	a2 98       	cbi	0x14, 2	; 20
     514:	aa 9a       	sbi	0x15, 2	; 21
     516:	a1 98       	cbi	0x14, 1	; 20
     518:	a9 9a       	sbi	0x15, 1	; 21
     51a:	a0 98       	cbi	0x14, 0	; 20
     51c:	a8 9a       	sbi	0x15, 0	; 21
     51e:	a6 98       	cbi	0x14, 6	; 20
     520:	ae 9a       	sbi	0x15, 6	; 21
	MOTOR_LEFT_INIT;
     522:	bc 9a       	sbi	0x17, 4	; 23
     524:	c4 98       	cbi	0x18, 4	; 24
     526:	be 9a       	sbi	0x17, 6	; 23
     528:	c6 9a       	sbi	0x18, 6	; 24
     52a:	8c 9a       	sbi	0x11, 4	; 17
	MOTOR_RIGHT_INIT;
     52c:	bb 9a       	sbi	0x17, 3	; 23
     52e:	c3 98       	cbi	0x18, 3	; 24
     530:	bd 9a       	sbi	0x17, 5	; 23
     532:	c5 9a       	sbi	0x18, 5	; 24
     534:	8f 9a       	sbi	0x11, 7	; 17
	SERVO_INIT;
     536:	8d 9a       	sbi	0x11, 5	; 17
	SLAVE_ENABLE_INIT;
     538:	a4 9a       	sbi	0x14, 4	; 20
	SLAVE_ON;
     53a:	ac 9a       	sbi	0x15, 4	; 21
	USB_DISABLE;
     53c:	a7 98       	cbi	0x14, 7	; 20
     53e:	a7 98       	cbi	0x14, 7	; 20
	//SENSOR_INTIT; //Use ADC
	ADC_INIT;
     540:	1a ba       	out	0x1a, r1	; 26
     542:	85 e8       	ldi	r24, 0x85	; 133
     544:	86 b9       	out	0x06, r24	; 6
     546:	80 e4       	ldi	r24, 0x40	; 64
     548:	87 b9       	out	0x07, r24	; 7
	INT1_INIT;
     54a:	84 e0       	ldi	r24, 0x04	; 4
     54c:	85 bf       	out	0x35, r24	; 53
     54e:	80 e8       	ldi	r24, 0x80	; 128
     550:	8b bf       	out	0x3b, r24	; 59
	
	//Timer and PWM
	vInitTimer0();
     552:	0e 94 69 02 	call	0x4d2	; 0x4d2 <vInitTimer0>
	vInitTimer1();
     556:	0e 94 6f 02 	call	0x4de	; 0x4de <vInitTimer1>
				Non-inverting: COM2[1:0] = 10
				F = 12Mhz
				T = 5.5ms
				=> prescaler = 256.
	*/
	TCCR2 = (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (1 << CS22) | (1 << CS21);
     55a:	8e e6       	ldi	r24, 0x6E	; 110
     55c:	85 bd       	out	0x25, r24	; 37
	vInitTimer0();
	vInitTimer1();
	vInitTimer2();	
	
	//SERIAL
	v_init_debug_via_uart();
     55e:	0e 94 81 00 	call	0x102	; 0x102 <v_init_debug_via_uart>
	//enable local interrupt
	sei();
     562:	78 94       	sei
     564:	08 95       	ret

00000566 <bKeyIsPress>:
 */ 
#include "../inc/hardware_feature.h"
#include "../inc/debug.h"

bool bKeyIsPress(uint8_t ucKeyID){
	uint8_t mask = (1<<ucKeyID);
     566:	21 e0       	ldi	r18, 0x01	; 1
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	a9 01       	movw	r20, r18
     56c:	02 c0       	rjmp	.+4      	; 0x572 <bKeyIsPress+0xc>
     56e:	44 0f       	add	r20, r20
     570:	55 1f       	adc	r21, r21
     572:	8a 95       	dec	r24
     574:	e2 f7       	brpl	.-8      	; 0x56e <bKeyIsPress+0x8>
     576:	ca 01       	movw	r24, r20
     578:	24 2f       	mov	r18, r20
	//key is pressed when pin = 0;
	if((PIN_KEY & mask) != mask){
     57a:	36 b3       	in	r19, 0x16	; 22
     57c:	34 23       	and	r19, r20
     57e:	34 17       	cp	r19, r20
     580:	d1 f0       	breq	.+52     	; 0x5b6 <bKeyIsPress+0x50>
     582:	ef e2       	ldi	r30, 0x2F	; 47
     584:	f5 e7       	ldi	r31, 0x75	; 117
     586:	31 97       	sbiw	r30, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <bKeyIsPress+0x20>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <bKeyIsPress+0x26>
     58c:	00 00       	nop
		_delay_ms(10);
		if((PIN_KEY & mask) != mask){
     58e:	96 b3       	in	r25, 0x16	; 22
     590:	89 23       	and	r24, r25
     592:	84 17       	cp	r24, r20
     594:	91 f0       	breq	.+36     	; 0x5ba <bKeyIsPress+0x54>
     596:	8f e2       	ldi	r24, 0x2F	; 47
     598:	95 e7       	ldi	r25, 0x75	; 117
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <bKeyIsPress+0x34>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <bKeyIsPress+0x3a>
     5a0:	00 00       	nop
			//LED_BUG_ON;
			_delay_ms(10);
			while((PIN_KEY&mask)!=mask);//waiting for key is released
     5a2:	86 b3       	in	r24, 0x16	; 22
     5a4:	82 23       	and	r24, r18
     5a6:	82 13       	cpse	r24, r18
     5a8:	fc cf       	rjmp	.-8      	; 0x5a2 <bKeyIsPress+0x3c>
			//LED_BUG_OFF;
			vBeep(30);
     5aa:	8e e1       	ldi	r24, 0x1E	; 30
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 11 02 	call	0x422	; 0x422 <vBeep>
			return true;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	08 95       	ret
		}
	}
	return false;
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	08 95       	ret
     5ba:	80 e0       	ldi	r24, 0x00	; 0
}
     5bc:	08 95       	ret

000005be <ucGetSwitch>:

uint8_t ucGetSwitch(){
	uint8_t mask = (1<<SW1) | (1<<SW2) | (1<<SW3) | (1<<SW4);
	uint8_t binData = (~PIN_SWITCH) & mask; 	
     5be:	83 b3       	in	r24, 0x13	; 19
     5c0:	80 95       	com	r24
	// Must swap switch bit
	//binData = 0000 1101 => 0000 1011 		
	return binData;
}
     5c2:	8f 70       	andi	r24, 0x0F	; 15
     5c4:	08 95       	ret

000005c6 <vMotor>:

/*TaiVH1 -- Aug 11, 2015  brief: Add for control motor and servo*/
int ucExSpeedLeft = 0, ucExSpeedRight = 0;
volatile bool bMotorUsePID = false;
void vMotor(int iSpeedLeft, int iSpeedRight,bool bUsePID){
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	eb 01       	movw	r28, r22
	bMotorUsePID = bUsePID;
     5cc:	40 93 9b 00 	sts	0x009B, r20
	if(bUsePID){
     5d0:	44 23       	and	r20, r20
     5d2:	49 f0       	breq	.+18     	; 0x5e6 <vMotor+0x20>
		ucExSpeedLeft = iSpeedLeft;
     5d4:	90 93 9f 00 	sts	0x009F, r25
     5d8:	80 93 9e 00 	sts	0x009E, r24
		ucExSpeedRight = iSpeedRight;	
     5dc:	70 93 9d 00 	sts	0x009D, r23
     5e0:	60 93 9c 00 	sts	0x009C, r22
     5e4:	6a c0       	rjmp	.+212    	; 0x6ba <vMotor+0xf4>
	else{
		//uint8_t ucSwData = ucGetSwitch() + 5;//ucSwData = [0..20]
		int iSpeedOfset ;//= (PWM_PERIOD_LEFT_MAX-1)*((float)(ucSwData/20));
		iSpeedOfset = PWM_PERIOD_LEFT_MAX - 1; //Fix me
		//Speed motor left
		if(iSpeedLeft >= 0){
     5e6:	99 23       	and	r25, r25
     5e8:	cc f0       	brlt	.+50     	; 0x61c <vMotor+0x56>
			sbi(PORT_MOTOR,DIR_L);
     5ea:	c4 9a       	sbi	0x18, 4	; 24
			OCR1B = iSpeedOfset * ((float)(iSpeedLeft * 0.01));
     5ec:	bc 01       	movw	r22, r24
     5ee:	88 27       	eor	r24, r24
     5f0:	77 fd       	sbrc	r23, 7
     5f2:	80 95       	com	r24
     5f4:	98 2f       	mov	r25, r24
     5f6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__floatsisf>
     5fa:	2a e0       	ldi	r18, 0x0A	; 10
     5fc:	37 ed       	ldi	r19, 0xD7	; 215
     5fe:	43 e2       	ldi	r20, 0x23	; 35
     600:	5c e3       	ldi	r21, 0x3C	; 60
     602:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	36 ec       	ldi	r19, 0xC6	; 198
     60a:	4f ea       	ldi	r20, 0xAF	; 175
     60c:	56 e4       	ldi	r21, 0x46	; 70
     60e:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     612:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__fixunssfsi>
     616:	79 bd       	out	0x29, r23	; 41
     618:	68 bd       	out	0x28, r22	; 40
     61a:	1b c0       	rjmp	.+54     	; 0x652 <vMotor+0x8c>
		}
		else{
			cbi(PORT_MOTOR,DIR_L);
     61c:	c4 98       	cbi	0x18, 4	; 24
			OCR1B = iSpeedOfset * (float)((-iSpeedLeft) * 0.01);
     61e:	91 95       	neg	r25
     620:	81 95       	neg	r24
     622:	91 09       	sbc	r25, r1
     624:	bc 01       	movw	r22, r24
     626:	88 27       	eor	r24, r24
     628:	77 fd       	sbrc	r23, 7
     62a:	80 95       	com	r24
     62c:	98 2f       	mov	r25, r24
     62e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__floatsisf>
     632:	2a e0       	ldi	r18, 0x0A	; 10
     634:	37 ed       	ldi	r19, 0xD7	; 215
     636:	43 e2       	ldi	r20, 0x23	; 35
     638:	5c e3       	ldi	r21, 0x3C	; 60
     63a:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	36 ec       	ldi	r19, 0xC6	; 198
     642:	4f ea       	ldi	r20, 0xAF	; 175
     644:	56 e4       	ldi	r21, 0x46	; 70
     646:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     64a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__fixunssfsi>
     64e:	79 bd       	out	0x29, r23	; 41
     650:	68 bd       	out	0x28, r22	; 40
		}
		//Speed motor right
		iSpeedOfset = PEM_PERIOD_RIGHT_MAX - 1;
		if(iSpeedRight >= 0){
     652:	dd 23       	and	r29, r29
     654:	c4 f0       	brlt	.+48     	; 0x686 <vMotor+0xc0>
			cbi(PORT_MOTOR,DIR_R);
     656:	c3 98       	cbi	0x18, 3	; 24
			OCR2  = iSpeedOfset * ((float)(iSpeedRight * 0.01));
     658:	be 01       	movw	r22, r28
     65a:	88 27       	eor	r24, r24
     65c:	77 fd       	sbrc	r23, 7
     65e:	80 95       	com	r24
     660:	98 2f       	mov	r25, r24
     662:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__floatsisf>
     666:	2a e0       	ldi	r18, 0x0A	; 10
     668:	37 ed       	ldi	r19, 0xD7	; 215
     66a:	43 e2       	ldi	r20, 0x23	; 35
     66c:	5c e3       	ldi	r21, 0x3C	; 60
     66e:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	4e e7       	ldi	r20, 0x7E	; 126
     678:	53 e4       	ldi	r21, 0x43	; 67
     67a:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     67e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__fixunssfsi>
     682:	63 bd       	out	0x23, r22	; 35
     684:	1a c0       	rjmp	.+52     	; 0x6ba <vMotor+0xf4>
		}
		else{
			sbi(PORT_MOTOR,DIR_R);
     686:	c3 9a       	sbi	0x18, 3	; 24
			OCR2  = iSpeedOfset * ((float)((-iSpeedRight) * 0.01));
     688:	66 27       	eor	r22, r22
     68a:	77 27       	eor	r23, r23
     68c:	6c 1b       	sub	r22, r28
     68e:	7d 0b       	sbc	r23, r29
     690:	88 27       	eor	r24, r24
     692:	77 fd       	sbrc	r23, 7
     694:	80 95       	com	r24
     696:	98 2f       	mov	r25, r24
     698:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__floatsisf>
     69c:	2a e0       	ldi	r18, 0x0A	; 10
     69e:	37 ed       	ldi	r19, 0xD7	; 215
     6a0:	43 e2       	ldi	r20, 0x23	; 35
     6a2:	5c e3       	ldi	r21, 0x3C	; 60
     6a4:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	4e e7       	ldi	r20, 0x7E	; 126
     6ae:	53 e4       	ldi	r21, 0x43	; 67
     6b0:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     6b4:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__fixunssfsi>
     6b8:	63 bd       	out	0x23, r22	; 35
		}
	}
}
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	08 95       	ret

000006c0 <vSetBF>:
void vSetBF(bool bBFMotorLeft,bool bBFMotorRight){
	//BF motor left
	if(bBFMotorLeft == true){
     6c0:	88 23       	and	r24, r24
     6c2:	11 f0       	breq	.+4      	; 0x6c8 <vSetBF+0x8>
		cbi(PORT_MOTOR,BF_L);
     6c4:	c6 98       	cbi	0x18, 6	; 24
     6c6:	01 c0       	rjmp	.+2      	; 0x6ca <vSetBF+0xa>
	}else{
		sbi(PORT_MOTOR,BF_L);
     6c8:	c6 9a       	sbi	0x18, 6	; 24
	}
	//BF motor right
	if(bBFMotorRight == true){
     6ca:	66 23       	and	r22, r22
     6cc:	11 f0       	breq	.+4      	; 0x6d2 <vSetBF+0x12>
		cbi(PORT_MOTOR,BF_R);
     6ce:	c5 98       	cbi	0x18, 5	; 24
     6d0:	08 95       	ret
	}else{
		sbi(PORT_MOTOR,BF_R);
     6d2:	c5 9a       	sbi	0x18, 5	; 24
     6d4:	08 95       	ret

000006d6 <vServo>:
	}
}
void vServo(int iAngle){
	OCR1A = SERVO_CENTER + iAngle*SERVO_ANGLE_STEP;
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	88 0f       	add	r24, r24
     6dc:	99 1f       	adc	r25, r25
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	82 5d       	subi	r24, 0xD2	; 210
     6e4:	96 4f       	sbci	r25, 0xF6	; 246
     6e6:	9b bd       	out	0x2b, r25	; 43
     6e8:	8a bd       	out	0x2a, r24	; 42
     6ea:	08 95       	ret

000006ec <isTester>:
/*TaiVH1 -- Aug 11, 2015  brief: End add for motor and servo*/

// [Vo Huu Tai 12/8/2015 ]  Add for inclined and tester

bool isTester(){
	if((PIN_SWITCH&(1<<SW_TEST)) == (1<<SW_TEST) )return false;
     6ec:	83 b3       	in	r24, 0x13	; 19
     6ee:	86 fb       	bst	r24, 6
     6f0:	88 27       	eor	r24, r24
     6f2:	80 f9       	bld	r24, 0
	return true;
}
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	89 27       	eor	r24, r25
     6f8:	08 95       	ret

000006fa <uiReadADC>:
uint16_t EEMEM  uiMyEppDataArr[8];
uint16_t uiAdAverage[8],uiAdMin[8],uiAdMax[8];

PUBLIC uint16_t uiReadADC(unsigned char chanenel)
{
	ADMUX = chanenel|ADC_VREF_TYPE;
     6fa:	80 64       	ori	r24, 0x40	; 64
     6fc:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
     6fe:	36 9a       	sbi	0x06, 6	; 6
	loop_until_bit_is_set(ADCSRA,ADIF);
     700:	34 9b       	sbis	0x06, 4	; 6
     702:	fe cf       	rjmp	.-4      	; 0x700 <uiReadADC+0x6>
	return ADCW;
     704:	84 b1       	in	r24, 0x04	; 4
     706:	95 b1       	in	r25, 0x05	; 5
}
     708:	08 95       	ret

0000070a <vLearnColor>:
PUBLIC void vLearnColor()
{
     70a:	6f 92       	push	r6
     70c:	7f 92       	push	r7
     70e:	8f 92       	push	r8
     710:	9f 92       	push	r9
     712:	af 92       	push	r10
     714:	bf 92       	push	r11
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	0f 2e       	mov	r0, r31
     728:	fe ef       	ldi	r31, 0xFE	; 254
     72a:	cf 2e       	mov	r12, r31
     72c:	f1 e0       	ldi	r31, 0x01	; 1
     72e:	df 2e       	mov	r13, r31
     730:	f0 2d       	mov	r31, r0
     732:	0f 2e       	mov	r0, r31
     734:	f0 e2       	ldi	r31, 0x20	; 32
     736:	ef 2e       	mov	r14, r31
     738:	f2 e0       	ldi	r31, 0x02	; 2
     73a:	ff 2e       	mov	r15, r31
     73c:	f0 2d       	mov	r31, r0
	while(1)
	{  
		vOutLed7(99);
		//ADC0	ADC1	ADC2				ADC6	ADC7
		// xx	 xx		 xx	 x-x	xx	xx	 xx      --
		for(uint8_t i = 0; i < 7; i++)
     73e:	61 2c       	mov	r6, r1
PUBLIC void vLearnColor()
{
	uint16_t temp = 0;
	while(1)
	{  
		vOutLed7(99);
     740:	83 e6       	ldi	r24, 0x63	; 99
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 cd 01 	call	0x39a	; 0x39a <vOutLed7>
     748:	9c 2c       	mov	r9, r12
     74a:	ad 2c       	mov	r10, r13
     74c:	be 2c       	mov	r11, r14
     74e:	7f 2c       	mov	r7, r15
     750:	87 01       	movw	r16, r14
     752:	e6 01       	movw	r28, r12
		//ADC0	ADC1	ADC2				ADC6	ADC7
		// xx	 xx		 xx	 x-x	xx	xx	 xx      --
		for(uint8_t i = 0; i < 7; i++)
     754:	86 2c       	mov	r8, r6
		{
			temp = uiReadADC(i);
     756:	88 2d       	mov	r24, r8
     758:	0e 94 7d 03 	call	0x6fa	; 0x6fa <uiReadADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     75c:	28 ec       	ldi	r18, 0xC8	; 200
     75e:	2a 95       	dec	r18
     760:	f1 f7       	brne	.-4      	; 0x75e <vLearnColor+0x54>
			_delay_us(50);
			if(uiAdMax[i] == 0) uiAdMax[i] = temp;
     762:	28 81       	ld	r18, Y
     764:	39 81       	ldd	r19, Y+1	; 0x01
     766:	21 15       	cp	r18, r1
     768:	31 05       	cpc	r19, r1
     76a:	19 f4       	brne	.+6      	; 0x772 <vLearnColor+0x68>
     76c:	99 83       	std	Y+1, r25	; 0x01
     76e:	88 83       	st	Y, r24
     770:	05 c0       	rjmp	.+10     	; 0x77c <vLearnColor+0x72>
			else if(temp > uiAdMax[i]) uiAdMax[i] = temp;
     772:	28 17       	cp	r18, r24
     774:	39 07       	cpc	r19, r25
     776:	10 f4       	brcc	.+4      	; 0x77c <vLearnColor+0x72>
     778:	99 83       	std	Y+1, r25	; 0x01
     77a:	88 83       	st	Y, r24
     77c:	f8 01       	movw	r30, r16
			if(uiAdMin[i] == 0) uiAdMin[i] = temp;
     77e:	20 81       	ld	r18, Z
     780:	31 81       	ldd	r19, Z+1	; 0x01
     782:	21 15       	cp	r18, r1
     784:	31 05       	cpc	r19, r1
     786:	19 f4       	brne	.+6      	; 0x78e <vLearnColor+0x84>
     788:	91 83       	std	Z+1, r25	; 0x01
     78a:	80 83       	st	Z, r24
     78c:	05 c0       	rjmp	.+10     	; 0x798 <vLearnColor+0x8e>
			else if(temp < uiAdMin[i]){
     78e:	82 17       	cp	r24, r18
     790:	93 07       	cpc	r25, r19
     792:	10 f4       	brcc	.+4      	; 0x798 <vLearnColor+0x8e>
				uiAdMin[i] = temp;
     794:	91 83       	std	Z+1, r25	; 0x01
     796:	80 83       	st	Z, r24
	while(1)
	{  
		vOutLed7(99);
		//ADC0	ADC1	ADC2				ADC6	ADC7
		// xx	 xx		 xx	 x-x	xx	xx	 xx      --
		for(uint8_t i = 0; i < 7; i++)
     798:	83 94       	inc	r8
     79a:	22 96       	adiw	r28, 0x02	; 2
     79c:	0e 5f       	subi	r16, 0xFE	; 254
     79e:	1f 4f       	sbci	r17, 0xFF	; 255
     7a0:	87 e0       	ldi	r24, 0x07	; 7
     7a2:	88 12       	cpse	r8, r24
     7a4:	d8 cf       	rjmp	.-80     	; 0x756 <vLearnColor+0x4c>
			if(uiAdMin[i] == 0) uiAdMin[i] = temp;
			else if(temp < uiAdMin[i]){
				uiAdMin[i] = temp;
			}
		}
		if(bKeyIsPress(KEY3)) break;//Exit
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	0e 94 b3 02 	call	0x566	; 0x566 <bKeyIsPress>
     7ac:	88 23       	and	r24, r24
     7ae:	41 f2       	breq	.-112    	; 0x740 <vLearnColor+0x36>
	}//end while(1)
	vOutLed7(66);
     7b0:	82 e4       	ldi	r24, 0x42	; 66
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 cd 01 	call	0x39a	; 0x39a <vOutLed7>
	vBeep(100);	_delay_ms(100);	vBeep(100);
     7b8:	84 e6       	ldi	r24, 0x64	; 100
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 11 02 	call	0x422	; 0x422 <vBeep>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c0:	9f e7       	ldi	r25, 0x7F	; 127
     7c2:	a9 ea       	ldi	r26, 0xA9	; 169
     7c4:	b3 e0       	ldi	r27, 0x03	; 3
     7c6:	91 50       	subi	r25, 0x01	; 1
     7c8:	a0 40       	sbci	r26, 0x00	; 0
     7ca:	b0 40       	sbci	r27, 0x00	; 0
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <vLearnColor+0xbc>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <vLearnColor+0xc6>
     7d0:	00 00       	nop
     7d2:	84 e6       	ldi	r24, 0x64	; 100
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 11 02 	call	0x422	; 0x422 <vBeep>
	uiAdAverage[7] = 100;//Note, start bar is bit 0. if adc[7] < adc_average[7] it mean start bar is open
     7da:	84 e6       	ldi	r24, 0x64	; 100
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	90 93 1f 02 	sts	0x021F, r25
     7e2:	80 93 1e 02 	sts	0x021E, r24
	write_eeprom_word(&uiMyEppDataArr[7] , uiAdAverage[7]);
     7e6:	64 e6       	ldi	r22, 0x64	; 100
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	8e e0       	ldi	r24, 0x0E	; 14
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__eewr_word_m16a>
     7f2:	00 e1       	ldi	r16, 0x10	; 16
     7f4:	12 e0       	ldi	r17, 0x02	; 2
     7f6:	0f 2e       	mov	r0, r31
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	cf 2e       	mov	r12, r31
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	df 2e       	mov	r13, r31
     800:	f0 2d       	mov	r31, r0
     802:	0f 2e       	mov	r0, r31
     804:	fe e2       	ldi	r31, 0x2E	; 46
     806:	ef 2e       	mov	r14, r31
     808:	f2 e0       	ldi	r31, 0x02	; 2
     80a:	ff 2e       	mov	r15, r31
     80c:	f0 2d       	mov	r31, r0
     80e:	c9 2d       	mov	r28, r9
     810:	da 2d       	mov	r29, r10
     812:	8b 2c       	mov	r8, r11
     814:	97 2c       	mov	r9, r7
	for (uint8_t i = 0; i < 7; i++)
	{
		uiAdAverage[i] = (uiAdMin[i] + uiAdMax[i])/2;
     816:	f4 01       	movw	r30, r8
     818:	81 91       	ld	r24, Z+
     81a:	91 91       	ld	r25, Z+
     81c:	4f 01       	movw	r8, r30
     81e:	69 91       	ld	r22, Y+
     820:	79 91       	ld	r23, Y+
     822:	68 0f       	add	r22, r24
     824:	79 1f       	adc	r23, r25
     826:	76 95       	lsr	r23
     828:	67 95       	ror	r22
     82a:	d8 01       	movw	r26, r16
     82c:	6d 93       	st	X+, r22
     82e:	7d 93       	st	X+, r23
     830:	8d 01       	movw	r16, r26
		//adc_average[i] = adc_average[i]*19/20;
		//adc_average[i] = adc_average[i]*((float)1.25);
		write_eeprom_word(&uiMyEppDataArr[i] , uiAdAverage[i]);
     832:	c6 01       	movw	r24, r12
     834:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__eewr_word_m16a>
     838:	b2 e0       	ldi	r27, 0x02	; 2
     83a:	cb 0e       	add	r12, r27
     83c:	d1 1c       	adc	r13, r1
	}//end while(1)
	vOutLed7(66);
	vBeep(100);	_delay_ms(100);	vBeep(100);
	uiAdAverage[7] = 100;//Note, start bar is bit 0. if adc[7] < adc_average[7] it mean start bar is open
	write_eeprom_word(&uiMyEppDataArr[7] , uiAdAverage[7]);
	for (uint8_t i = 0; i < 7; i++)
     83e:	8e 14       	cp	r8, r14
     840:	9f 04       	cpc	r9, r15
     842:	49 f7       	brne	.-46     	; 0x816 <vLearnColor+0x10c>
		uiAdAverage[i] = (uiAdMin[i] + uiAdMax[i])/2;
		//adc_average[i] = adc_average[i]*19/20;
		//adc_average[i] = adc_average[i]*((float)1.25);
		write_eeprom_word(&uiMyEppDataArr[i] , uiAdAverage[i]);
	}
}
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	ff 90       	pop	r15
     84e:	ef 90       	pop	r14
     850:	df 90       	pop	r13
     852:	cf 90       	pop	r12
     854:	bf 90       	pop	r11
     856:	af 90       	pop	r10
     858:	9f 90       	pop	r9
     85a:	8f 90       	pop	r8
     85c:	7f 90       	pop	r7
     85e:	6f 90       	pop	r6
     860:	08 95       	ret

00000862 <ucGetRawSensor>:
PUBLIC uint8_t ucGetRawSensor()
{
     862:	cf 92       	push	r12
     864:	df 92       	push	r13
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	00 e1       	ldi	r16, 0x10	; 16
     874:	12 e0       	ldi	r17, 0x02	; 2
     876:	c6 e0       	ldi	r28, 0x06	; 6
     878:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t result = 0;
     87a:	d1 2c       	mov	r13, r1
     87c:	0f 2e       	mov	r0, r31
     87e:	f6 e0       	ldi	r31, 0x06	; 6
     880:	cf 2e       	mov	r12, r31
     882:	f0 2d       	mov	r31, r0
		//swap bit here
		if(temp <= uiAdAverage[i]){
			sbi(result,6-i);
		}
		else{
			cbi(result,6-i);	
     884:	ee 24       	eor	r14, r14
     886:	e3 94       	inc	r14
     888:	f1 2c       	mov	r15, r1
	uint16_t temp = 0;
	//ADC0	ADC1	ADC2				ADC6	ADC7
	// xx	 xx		 xx	 x-x	xx	xx	 xx      --
	for(int i = 0; i < 7;i++)
	{
		temp = uiReadADC(i);
     88a:	8c 2d       	mov	r24, r12
     88c:	8c 1b       	sub	r24, r28
     88e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <uiReadADC>
		//swap bit here
		if(temp <= uiAdAverage[i]){
     892:	f8 01       	movw	r30, r16
     894:	21 91       	ld	r18, Z+
     896:	31 91       	ld	r19, Z+
     898:	8f 01       	movw	r16, r30
     89a:	28 17       	cp	r18, r24
     89c:	39 07       	cpc	r19, r25
     89e:	48 f0       	brcs	.+18     	; 0x8b2 <ucGetRawSensor+0x50>
			sbi(result,6-i);
     8a0:	97 01       	movw	r18, r14
     8a2:	0c 2e       	mov	r0, r28
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <ucGetRawSensor+0x48>
     8a6:	22 0f       	add	r18, r18
     8a8:	33 1f       	adc	r19, r19
     8aa:	0a 94       	dec	r0
     8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <ucGetRawSensor+0x44>
     8ae:	d2 2a       	or	r13, r18
     8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <ucGetRawSensor+0x62>
		}
		else{
			cbi(result,6-i);	
     8b2:	97 01       	movw	r18, r14
     8b4:	0c 2e       	mov	r0, r28
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <ucGetRawSensor+0x5a>
     8b8:	22 0f       	add	r18, r18
     8ba:	33 1f       	adc	r19, r19
     8bc:	0a 94       	dec	r0
     8be:	e2 f7       	brpl	.-8      	; 0x8b8 <ucGetRawSensor+0x56>
     8c0:	20 95       	com	r18
     8c2:	d2 22       	and	r13, r18
     8c4:	21 97       	sbiw	r28, 0x01	; 1
     8c6:	08 f7       	brcc	.-62     	; 0x88a <ucGetRawSensor+0x28>
		}		
	}
	cbi(result,7);
	//data_led = result;
	return result;
}
     8c8:	8d 2d       	mov	r24, r13
     8ca:	8f 77       	andi	r24, 0x7F	; 127
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	ff 90       	pop	r15
     8d6:	ef 90       	pop	r14
     8d8:	df 90       	pop	r13
     8da:	cf 90       	pop	r12
     8dc:	08 95       	ret

000008de <ucGetSensorData>:
PUBLIC uint8_t ucGetSensorData(uint8_t mask){
     8de:	cf 93       	push	r28
     8e0:	c8 2f       	mov	r28, r24

	return (ucGetRawSensor() & mask);
     8e2:	0e 94 31 04 	call	0x862	; 0x862 <ucGetRawSensor>
}
     8e6:	8c 23       	and	r24, r28
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <bStartBarIsStart>:
int iGetSensorPosition(){
	return 0;
}
bool bStartBarIsStart(){
	uint16_t ucDataADC = uiReadADC(7);
     8ec:	87 e0       	ldi	r24, 0x07	; 7
     8ee:	0e 94 7d 03 	call	0x6fa	; 0x6fa <uiReadADC>
	if(ucDataADC < 100) return true;//adc_average[7]
     8f2:	21 e0       	ldi	r18, 0x01	; 1
     8f4:	84 36       	cpi	r24, 0x64	; 100
     8f6:	91 05       	cpc	r25, r1
     8f8:	08 f0       	brcs	.+2      	; 0x8fc <bStartBarIsStart+0x10>
     8fa:	20 e0       	ldi	r18, 0x00	; 0
	return false;
}
     8fc:	82 2f       	mov	r24, r18
     8fe:	08 95       	ret

00000900 <vLoadE2P>:
void vLoadE2P(){
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	c0 e0       	ldi	r28, 0x00	; 0
     90e:	d0 e0       	ldi	r29, 0x00	; 0
     910:	00 e1       	ldi	r16, 0x10	; 16
     912:	12 e0       	ldi	r17, 0x02	; 2
     914:	0f 2e       	mov	r0, r31
     916:	f0 e1       	ldi	r31, 0x10	; 16
     918:	ef 2e       	mov	r14, r31
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	ff 2e       	mov	r15, r31
     91e:	f0 2d       	mov	r31, r0
	for(int i = 0;i < 8;i++){
		uiAdAverage[i] = read_eeprom_word(&uiMyEppDataArr[i]);
     920:	ce 01       	movw	r24, r28
     922:	0e 94 4d 10 	call	0x209a	; 0x209a <__eerd_word_m16a>
     926:	f8 01       	movw	r30, r16
     928:	81 93       	st	Z+, r24
     92a:	91 93       	st	Z+, r25
     92c:	8f 01       	movw	r16, r30
     92e:	22 96       	adiw	r28, 0x02	; 2
	uint16_t ucDataADC = uiReadADC(7);
	if(ucDataADC < 100) return true;//adc_average[7]
	return false;
}
void vLoadE2P(){
	for(int i = 0;i < 8;i++){
     930:	ce 15       	cp	r28, r14
     932:	df 05       	cpc	r29, r15
     934:	a9 f7       	brne	.-22     	; 0x920 <vLoadE2P+0x20>
		uiAdAverage[i] = read_eeprom_word(&uiMyEppDataArr[i]);
	}
}
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <vIncPulse>:
int pre_ErrLeft = 0,pre_ErrRight = 0,uiLastPulse = 0;
float outputMotorLeft = 0;
float outputMotorRight = 0;

void vIncPulse(){
	uiPulse++;
     944:	80 91 0e 02 	lds	r24, 0x020E
     948:	90 91 0f 02 	lds	r25, 0x020F
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	90 93 0f 02 	sts	0x020F, r25
     952:	80 93 0e 02 	sts	0x020E, r24
     956:	08 95       	ret

00000958 <uiGetDeltaPulse>:
}
PRIVATE int uiGetDeltaPulse(){
		
	int uiDeltaPulse = uiPulse - uiLastPulse;
     958:	80 91 0e 02 	lds	r24, 0x020E
     95c:	90 91 0f 02 	lds	r25, 0x020F
     960:	20 91 95 00 	lds	r18, 0x0095
     964:	30 91 96 00 	lds	r19, 0x0096
	uiLastPulse = uiPulse;	
     968:	40 91 0e 02 	lds	r20, 0x020E
     96c:	50 91 0f 02 	lds	r21, 0x020F
     970:	50 93 96 00 	sts	0x0096, r21
     974:	40 93 95 00 	sts	0x0095, r20
	
	return (uiDeltaPulse);
}
     978:	82 1b       	sub	r24, r18
     97a:	93 0b       	sbc	r25, r19
     97c:	08 95       	ret

0000097e <iGetErr>:
PRIVATE float iGetErr(int speed,int deltaPluse){
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	eb 01       	movw	r28, r22
	float temp = 40*speed*0.01;
     98c:	28 e2       	ldi	r18, 0x28	; 40
     98e:	ac 01       	movw	r20, r24
     990:	24 9f       	mul	r18, r20
     992:	c0 01       	movw	r24, r0
     994:	25 9f       	mul	r18, r21
     996:	90 0d       	add	r25, r0
     998:	11 24       	eor	r1, r1
     99a:	bc 01       	movw	r22, r24
     99c:	88 27       	eor	r24, r24
     99e:	77 fd       	sbrc	r23, 7
     9a0:	80 95       	com	r24
     9a2:	98 2f       	mov	r25, r24
     9a4:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__floatsisf>
     9a8:	2a e0       	ldi	r18, 0x0A	; 10
     9aa:	37 ed       	ldi	r19, 0xD7	; 215
     9ac:	43 e2       	ldi	r20, 0x23	; 35
     9ae:	5c e3       	ldi	r21, 0x3C	; 60
     9b0:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     9b4:	6b 01       	movw	r12, r22
     9b6:	7c 01       	movw	r14, r24
	return(temp - deltaPluse);
     9b8:	be 01       	movw	r22, r28
     9ba:	88 27       	eor	r24, r24
     9bc:	77 fd       	sbrc	r23, 7
     9be:	80 95       	com	r24
     9c0:	98 2f       	mov	r25, r24
     9c2:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__floatsisf>
     9c6:	9b 01       	movw	r18, r22
     9c8:	ac 01       	movw	r20, r24
     9ca:	c7 01       	movw	r24, r14
     9cc:	b6 01       	movw	r22, r12
     9ce:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__subsf3>
}
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	cf 90       	pop	r12
     9de:	08 95       	ret

000009e0 <vCalPID>:
void vCalPID(){
     9e0:	8f 92       	push	r8
     9e2:	9f 92       	push	r9
     9e4:	af 92       	push	r10
     9e6:	bf 92       	push	r11
     9e8:	cf 92       	push	r12
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
	//call over 10ms
	float Kp,Kd;
	float P,D,err,deltaPulse;		
	
	deltaPulse = uiGetDeltaPulse();//alway get delta pluse for reset review pluse.
     9f4:	0e 94 ac 04 	call	0x958	; 0x958 <uiGetDeltaPulse>
     9f8:	ec 01       	movw	r28, r24
	
	if(!bMotorUsePID)return;	
     9fa:	80 91 9b 00 	lds	r24, 0x009B
     9fe:	88 23       	and	r24, r24
     a00:	09 f4       	brne	.+2      	; 0xa04 <vCalPID+0x24>
     a02:	15 c1       	rjmp	.+554    	; 0xc2e <vCalPID+0x24e>
	
	//motor left
	Kp = 29.9;
	Kd = 12.1;
	
	err = iGetErr(ucExSpeedLeft,deltaPulse);
     a04:	be 01       	movw	r22, r28
     a06:	80 91 9e 00 	lds	r24, 0x009E
     a0a:	90 91 9f 00 	lds	r25, 0x009F
     a0e:	0e 94 bf 04 	call	0x97e	; 0x97e <iGetErr>
     a12:	6b 01       	movw	r12, r22
     a14:	7c 01       	movw	r14, r24
	P = Kp * err;
     a16:	23 e3       	ldi	r18, 0x33	; 51
     a18:	33 e3       	ldi	r19, 0x33	; 51
     a1a:	4f ee       	ldi	r20, 0xEF	; 239
     a1c:	51 e4       	ldi	r21, 0x41	; 65
     a1e:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     a22:	4b 01       	movw	r8, r22
     a24:	5c 01       	movw	r10, r24
	D = Kd*(err - pre_ErrLeft)*50; //50 is inv_Sampling_time
     a26:	60 91 99 00 	lds	r22, 0x0099
     a2a:	70 91 9a 00 	lds	r23, 0x009A
     a2e:	88 27       	eor	r24, r24
     a30:	77 fd       	sbrc	r23, 7
     a32:	80 95       	com	r24
     a34:	98 2f       	mov	r25, r24
     a36:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__floatsisf>
     a3a:	9b 01       	movw	r18, r22
     a3c:	ac 01       	movw	r20, r24
     a3e:	c7 01       	movw	r24, r14
     a40:	b6 01       	movw	r22, r12
     a42:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__subsf3>
     a46:	2a e9       	ldi	r18, 0x9A	; 154
     a48:	39 e9       	ldi	r19, 0x99	; 153
     a4a:	41 e4       	ldi	r20, 0x41	; 65
     a4c:	51 e4       	ldi	r21, 0x41	; 65
     a4e:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	48 e4       	ldi	r20, 0x48	; 72
     a58:	52 e4       	ldi	r21, 0x42	; 66
     a5a:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     a5e:	9b 01       	movw	r18, r22
     a60:	ac 01       	movw	r20, r24
	outputMotorLeft += P + D;
     a62:	c5 01       	movw	r24, r10
     a64:	b4 01       	movw	r22, r8
     a66:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__addsf3>
     a6a:	20 91 91 00 	lds	r18, 0x0091
     a6e:	30 91 92 00 	lds	r19, 0x0092
     a72:	40 91 93 00 	lds	r20, 0x0093
     a76:	50 91 94 00 	lds	r21, 0x0094
     a7a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__addsf3>
     a7e:	4b 01       	movw	r8, r22
     a80:	5c 01       	movw	r10, r24
     a82:	60 93 91 00 	sts	0x0091, r22
     a86:	70 93 92 00 	sts	0x0092, r23
     a8a:	80 93 93 00 	sts	0x0093, r24
     a8e:	90 93 94 00 	sts	0x0094, r25

	if(outputMotorLeft > (PWM_PERIOD_LEFT_MAX - 1000))outputMotorLeft = PWM_PERIOD_LEFT_MAX - 1000;
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	38 ef       	ldi	r19, 0xF8	; 248
     a96:	47 ea       	ldi	r20, 0xA7	; 167
     a98:	56 e4       	ldi	r21, 0x46	; 70
     a9a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__gesf2>
     a9e:	18 16       	cp	r1, r24
     aa0:	6c f4       	brge	.+26     	; 0xabc <vCalPID+0xdc>
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	98 ef       	ldi	r25, 0xF8	; 248
     aa6:	a7 ea       	ldi	r26, 0xA7	; 167
     aa8:	b6 e4       	ldi	r27, 0x46	; 70
     aaa:	80 93 91 00 	sts	0x0091, r24
     aae:	90 93 92 00 	sts	0x0092, r25
     ab2:	a0 93 93 00 	sts	0x0093, r26
     ab6:	b0 93 94 00 	sts	0x0094, r27
     aba:	11 c0       	rjmp	.+34     	; 0xade <vCalPID+0xfe>
	if (outputMotorLeft < 0)outputMotorLeft = 0;
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	a9 01       	movw	r20, r18
     ac2:	c5 01       	movw	r24, r10
     ac4:	b4 01       	movw	r22, r8
     ac6:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__cmpsf2>
     aca:	88 23       	and	r24, r24
     acc:	44 f4       	brge	.+16     	; 0xade <vCalPID+0xfe>
     ace:	10 92 91 00 	sts	0x0091, r1
     ad2:	10 92 92 00 	sts	0x0092, r1
     ad6:	10 92 93 00 	sts	0x0093, r1
     ada:	10 92 94 00 	sts	0x0094, r1
//
	OCR1B = outputMotorLeft;
     ade:	60 91 91 00 	lds	r22, 0x0091
     ae2:	70 91 92 00 	lds	r23, 0x0092
     ae6:	80 91 93 00 	lds	r24, 0x0093
     aea:	90 91 94 00 	lds	r25, 0x0094
     aee:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__fixunssfsi>
     af2:	79 bd       	out	0x29, r23	; 41
     af4:	68 bd       	out	0x28, r22	; 40
	pre_ErrLeft = err;
     af6:	c7 01       	movw	r24, r14
     af8:	b6 01       	movw	r22, r12
     afa:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixsfsi>
     afe:	70 93 9a 00 	sts	0x009A, r23
     b02:	60 93 99 00 	sts	0x0099, r22
//motor right
	Kp = 0.75;
	Kd = 0.12;
	
	err = iGetErr(ucExSpeedRight,deltaPulse);
     b06:	be 01       	movw	r22, r28
     b08:	80 91 9c 00 	lds	r24, 0x009C
     b0c:	90 91 9d 00 	lds	r25, 0x009D
     b10:	0e 94 bf 04 	call	0x97e	; 0x97e <iGetErr>
     b14:	6b 01       	movw	r12, r22
     b16:	7c 01       	movw	r14, r24
	P = Kp*err;
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e4       	ldi	r20, 0x40	; 64
     b1e:	5f e3       	ldi	r21, 0x3F	; 63
     b20:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     b24:	4b 01       	movw	r8, r22
     b26:	5c 01       	movw	r10, r24
	D = Kd*(err - pre_ErrRight)*50;//50 is inv_Sampling_time
     b28:	60 91 97 00 	lds	r22, 0x0097
     b2c:	70 91 98 00 	lds	r23, 0x0098
     b30:	88 27       	eor	r24, r24
     b32:	77 fd       	sbrc	r23, 7
     b34:	80 95       	com	r24
     b36:	98 2f       	mov	r25, r24
     b38:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__floatsisf>
     b3c:	9b 01       	movw	r18, r22
     b3e:	ac 01       	movw	r20, r24
     b40:	c7 01       	movw	r24, r14
     b42:	b6 01       	movw	r22, r12
     b44:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__subsf3>
     b48:	2f e8       	ldi	r18, 0x8F	; 143
     b4a:	32 ec       	ldi	r19, 0xC2	; 194
     b4c:	45 ef       	ldi	r20, 0xF5	; 245
     b4e:	5d e3       	ldi	r21, 0x3D	; 61
     b50:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	48 e4       	ldi	r20, 0x48	; 72
     b5a:	52 e4       	ldi	r21, 0x42	; 66
     b5c:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     b60:	9b 01       	movw	r18, r22
     b62:	ac 01       	movw	r20, r24
	outputMotorRight += P + D;
     b64:	c5 01       	movw	r24, r10
     b66:	b4 01       	movw	r22, r8
     b68:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__addsf3>
     b6c:	20 91 8d 00 	lds	r18, 0x008D
     b70:	30 91 8e 00 	lds	r19, 0x008E
     b74:	40 91 8f 00 	lds	r20, 0x008F
     b78:	50 91 90 00 	lds	r21, 0x0090
     b7c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__addsf3>
     b80:	4b 01       	movw	r8, r22
     b82:	5c 01       	movw	r10, r24
     b84:	60 93 8d 00 	sts	0x008D, r22
     b88:	70 93 8e 00 	sts	0x008E, r23
     b8c:	80 93 8f 00 	sts	0x008F, r24
     b90:	90 93 90 00 	sts	0x0090, r25
	
	if(outputMotorRight > (PEM_PERIOD_RIGHT_MAX - 10))outputMotorRight = PEM_PERIOD_RIGHT_MAX - 10;
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	45 e7       	ldi	r20, 0x75	; 117
     b9a:	53 e4       	ldi	r21, 0x43	; 67
     b9c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__gesf2>
     ba0:	18 16       	cp	r1, r24
     ba2:	6c f4       	brge	.+26     	; 0xbbe <vCalPID+0x1de>
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	a5 e7       	ldi	r26, 0x75	; 117
     baa:	b3 e4       	ldi	r27, 0x43	; 67
     bac:	80 93 8d 00 	sts	0x008D, r24
     bb0:	90 93 8e 00 	sts	0x008E, r25
     bb4:	a0 93 8f 00 	sts	0x008F, r26
     bb8:	b0 93 90 00 	sts	0x0090, r27
     bbc:	11 c0       	rjmp	.+34     	; 0xbe0 <vCalPID+0x200>
	if(outputMotorRight < 0)outputMotorRight = 0;
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	a9 01       	movw	r20, r18
     bc4:	c5 01       	movw	r24, r10
     bc6:	b4 01       	movw	r22, r8
     bc8:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__cmpsf2>
     bcc:	88 23       	and	r24, r24
     bce:	44 f4       	brge	.+16     	; 0xbe0 <vCalPID+0x200>
     bd0:	10 92 8d 00 	sts	0x008D, r1
     bd4:	10 92 8e 00 	sts	0x008E, r1
     bd8:	10 92 8f 00 	sts	0x008F, r1
     bdc:	10 92 90 00 	sts	0x0090, r1
	
	OCR2 = outputMotorRight;
     be0:	60 91 8d 00 	lds	r22, 0x008D
     be4:	70 91 8e 00 	lds	r23, 0x008E
     be8:	80 91 8f 00 	lds	r24, 0x008F
     bec:	90 91 90 00 	lds	r25, 0x0090
     bf0:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__fixunssfsi>
     bf4:	63 bd       	out	0x23, r22	; 35
	pre_ErrRight = err;
     bf6:	c7 01       	movw	r24, r14
     bf8:	b6 01       	movw	r22, r12
     bfa:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixsfsi>
     bfe:	70 93 98 00 	sts	0x0098, r23
     c02:	60 93 97 00 	sts	0x0097, r22
	
	//Dir
	if(ucExSpeedLeft > 0)
     c06:	80 91 9e 00 	lds	r24, 0x009E
     c0a:	90 91 9f 00 	lds	r25, 0x009F
     c0e:	18 16       	cp	r1, r24
     c10:	19 06       	cpc	r1, r25
     c12:	14 f4       	brge	.+4      	; 0xc18 <vCalPID+0x238>
	sbi(PORT_MOTOR,DIR_L);
     c14:	c4 9a       	sbi	0x18, 4	; 24
     c16:	01 c0       	rjmp	.+2      	; 0xc1a <vCalPID+0x23a>
	else cbi(PORT_MOTOR,DIR_R);
     c18:	c3 98       	cbi	0x18, 3	; 24
	
	if(ucExSpeedRight > 0)
     c1a:	80 91 9c 00 	lds	r24, 0x009C
     c1e:	90 91 9d 00 	lds	r25, 0x009D
     c22:	18 16       	cp	r1, r24
     c24:	19 06       	cpc	r1, r25
     c26:	14 f4       	brge	.+4      	; 0xc2c <vCalPID+0x24c>
	cbi(PORT_MOTOR,DIR_R);
     c28:	c3 98       	cbi	0x18, 3	; 24
     c2a:	01 c0       	rjmp	.+2      	; 0xc2e <vCalPID+0x24e>
	else 
	sbi(PORT_MOTOR,DIR_R);
     c2c:	c3 9a       	sbi	0x18, 3	; 24
}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	df 90       	pop	r13
     c38:	cf 90       	pop	r12
     c3a:	bf 90       	pop	r11
     c3c:	af 90       	pop	r10
     c3e:	9f 90       	pop	r9
     c40:	8f 90       	pop	r8
     c42:	08 95       	ret

00000c44 <vPeriodicDec>:
	@brief:		Decrease periodic counter
	@param:		none
	@return:	none 
*/
PRIVATE void vPeriodicDec(){	
	if((uigLedPeriodic == 0) || (uigLedPeriodic == NO_LIMIT)){
     c44:	80 91 68 00 	lds	r24, 0x0068
     c48:	90 91 69 00 	lds	r25, 0x0069
     c4c:	89 2b       	or	r24, r25
     c4e:	31 f0       	breq	.+12     	; 0xc5c <vPeriodicDec+0x18>
     c50:	80 91 68 00 	lds	r24, 0x0068
     c54:	90 91 69 00 	lds	r25, 0x0069
     c58:	01 96       	adiw	r24, 0x01	; 1
     c5a:	39 f4       	brne	.+14     	; 0xc6a <vPeriodicDec+0x26>
		uigLedPeriodic = NO_LIMIT;
     c5c:	8f ef       	ldi	r24, 0xFF	; 255
     c5e:	9f ef       	ldi	r25, 0xFF	; 255
     c60:	90 93 69 00 	sts	0x0069, r25
     c64:	80 93 68 00 	sts	0x0068, r24
     c68:	08 95       	ret
	}else
	uigLedPeriodic--;	
     c6a:	80 91 68 00 	lds	r24, 0x0068
     c6e:	90 91 69 00 	lds	r25, 0x0069
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	90 93 69 00 	sts	0x0069, r25
     c78:	80 93 68 00 	sts	0x0068, r24
     c7c:	08 95       	ret

00000c7e <vIntervalDec>:
	@param:		none
	@return:	none 
*/
PRIVATE void vIntervalDec(){
	
	if((uigLedInterval == 0) || (uigLedInterval == NO_LIMIT)){
     c7e:	80 91 66 00 	lds	r24, 0x0066
     c82:	90 91 67 00 	lds	r25, 0x0067
     c86:	89 2b       	or	r24, r25
     c88:	31 f0       	breq	.+12     	; 0xc96 <vIntervalDec+0x18>
     c8a:	80 91 66 00 	lds	r24, 0x0066
     c8e:	90 91 67 00 	lds	r25, 0x0067
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	39 f4       	brne	.+14     	; 0xca4 <vIntervalDec+0x26>
		uigLedInterval = NO_LIMIT;
     c96:	8f ef       	ldi	r24, 0xFF	; 255
     c98:	9f ef       	ldi	r25, 0xFF	; 255
     c9a:	90 93 67 00 	sts	0x0067, r25
     c9e:	80 93 66 00 	sts	0x0066, r24
     ca2:	08 95       	ret
	}
	else
	uigLedInterval--;	
     ca4:	80 91 66 00 	lds	r24, 0x0066
     ca8:	90 91 67 00 	lds	r25, 0x0067
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	90 93 67 00 	sts	0x0067, r25
     cb2:	80 93 66 00 	sts	0x0066, r24
     cb6:	08 95       	ret

00000cb8 <ucPareLedEvent>:
	@param:		led event
	@return:	Led Periodic counter
*/
PRIVATE uint16_t ucPareLedEvent(uint8_t led_event){
	uint16_t uiRet = NO_LIMIT;
	switch(led_event){
     cb8:	82 30       	cpi	r24, 0x02	; 2
     cba:	91 f0       	breq	.+36     	; 0xce0 <ucPareLedEvent+0x28>
     cbc:	18 f4       	brcc	.+6      	; 0xcc4 <ucPareLedEvent+0xc>
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	31 f0       	breq	.+12     	; 0xcce <ucPareLedEvent+0x16>
     cc2:	29 c0       	rjmp	.+82     	; 0xd16 <ucPareLedEvent+0x5e>
     cc4:	83 30       	cpi	r24, 0x03	; 3
     cc6:	f1 f0       	breq	.+60     	; 0xd04 <ucPareLedEvent+0x4c>
     cc8:	84 30       	cpi	r24, 0x04	; 4
     cca:	99 f0       	breq	.+38     	; 0xcf2 <ucPareLedEvent+0x3a>
     ccc:	24 c0       	rjmp	.+72     	; 0xd16 <ucPareLedEvent+0x5e>
		case LED_FAST_BLINK:			
			uigLedInterval = LED_50_MS;			
     cce:	85 e0       	ldi	r24, 0x05	; 5
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	90 93 67 00 	sts	0x0067, r25
     cd6:	80 93 66 00 	sts	0x0066, r24
	@brief:		parse control for led
	@param:		led event
	@return:	Led Periodic counter
*/
PRIVATE uint16_t ucPareLedEvent(uint8_t led_event){
	uint16_t uiRet = NO_LIMIT;
     cda:	8f ef       	ldi	r24, 0xFF	; 255
     cdc:	9f ef       	ldi	r25, 0xFF	; 255
	switch(led_event){
		case LED_FAST_BLINK:			
			uigLedInterval = LED_50_MS;			
			break;
     cde:	08 95       	ret
		case LED_SLOW_BLINK:			
			uigLedInterval = LED_100_MS;			
     ce0:	8a e0       	ldi	r24, 0x0A	; 10
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	90 93 67 00 	sts	0x0067, r25
     ce8:	80 93 66 00 	sts	0x0066, r24
	@brief:		parse control for led
	@param:		led event
	@return:	Led Periodic counter
*/
PRIVATE uint16_t ucPareLedEvent(uint8_t led_event){
	uint16_t uiRet = NO_LIMIT;
     cec:	8f ef       	ldi	r24, 0xFF	; 255
     cee:	9f ef       	ldi	r25, 0xFF	; 255
		case LED_FAST_BLINK:			
			uigLedInterval = LED_50_MS;			
			break;
		case LED_SLOW_BLINK:			
			uigLedInterval = LED_100_MS;			
			break;
     cf0:	08 95       	ret
		case LED_STARTUP_COMPELETE:			
			uigLedInterval = LED_50_MS;	
     cf2:	85 e0       	ldi	r24, 0x05	; 5
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	90 93 67 00 	sts	0x0067, r25
     cfa:	80 93 66 00 	sts	0x0066, r24
			uiRet = LED_1_S;	
     cfe:	84 e6       	ldi	r24, 0x64	; 100
     d00:	90 e0       	ldi	r25, 0x00	; 0
			break;	
     d02:	08 95       	ret
		case LED_START_BAR_OK:
			uigLedInterval = LED_50_MS;
     d04:	85 e0       	ldi	r24, 0x05	; 5
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	90 93 67 00 	sts	0x0067, r25
     d0c:	80 93 66 00 	sts	0x0066, r24
			uiRet = LED_500_MS;
     d10:	82 e3       	ldi	r24, 0x32	; 50
     d12:	90 e0       	ldi	r25, 0x00	; 0
			break;	
     d14:	08 95       	ret
	@brief:		parse control for led
	@param:		led event
	@return:	Led Periodic counter
*/
PRIVATE uint16_t ucPareLedEvent(uint8_t led_event){
	uint16_t uiRet = NO_LIMIT;
     d16:	8f ef       	ldi	r24, 0xFF	; 255
     d18:	9f ef       	ldi	r25, 0xFF	; 255
			break;	
		default:			
			break;
	}
	return uiRet;
}
     d1a:	08 95       	ret

00000d1c <vLedFlash>:
/*
	@brief:		This function will control led, must called on ISR function
	@param:		none
	@return:	none 
*/
PUBLIC void vLedFlash(){
     d1c:	cf 93       	push	r28
	uint8_t ucStateTemp = ucgLedState;	
     d1e:	c0 91 a2 00 	lds	r28, 0x00A2
	
	switch(ucStateTemp){
     d22:	cc 23       	and	r28, r28
     d24:	61 f1       	breq	.+88     	; 0xd7e <vLedFlash+0x62>
     d26:	c1 30       	cpi	r28, 0x01	; 1
     d28:	41 f5       	brne	.+80     	; 0xd7a <vLedFlash+0x5e>
		case LED_STATE_NONE:	//State NONE do nothing.
			return;
		case LED_STATE_BLINK:		
			vPeriodicDec();
     d2a:	0e 94 22 06 	call	0xc44	; 0xc44 <vPeriodicDec>
			if(uigLedPeriodic == 0){
     d2e:	80 91 68 00 	lds	r24, 0x0068
     d32:	90 91 69 00 	lds	r25, 0x0069
     d36:	89 2b       	or	r24, r25
     d38:	29 f4       	brne	.+10     	; 0xd44 <vLedFlash+0x28>
				LED_BUG_OFF; //turn off led
     d3a:	c7 9a       	sbi	0x18, 7	; 24
				bgLedFlag = LED_FLAG_OFF;//set flag is off
     d3c:	10 92 a1 00 	sts	0x00A1, r1
				ucStateTemp = LED_STATE_NONE;
     d40:	c0 e0       	ldi	r28, 0x00	; 0
     d42:	1b c0       	rjmp	.+54     	; 0xd7a <vLedFlash+0x5e>
			}
			else{
				vIntervalDec();
     d44:	0e 94 3f 06 	call	0xc7e	; 0xc7e <vIntervalDec>
				if(uigLedInterval == 0){
     d48:	80 91 66 00 	lds	r24, 0x0066
     d4c:	90 91 67 00 	lds	r25, 0x0067
     d50:	89 2b       	or	r24, r25
     d52:	99 f4       	brne	.+38     	; 0xd7a <vLedFlash+0x5e>
					switch (bgLedFlag)
     d54:	80 91 a1 00 	lds	r24, 0x00A1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	31 f0       	breq	.+12     	; 0xd6a <vLedFlash+0x4e>
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	41 f4       	brne	.+16     	; 0xd72 <vLedFlash+0x56>
					{
						case LED_FLAG_ON:
							bgLedFlag = LED_FLAG_OFF;
     d62:	10 92 a1 00 	sts	0x00A1, r1
							LED_BUG_OFF;
     d66:	c7 9a       	sbi	0x18, 7	; 24
							break;
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <vLedFlash+0x56>
						case LED_FLAG_OFF:
							bgLedFlag = LED_FLAG_ON;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	80 93 a1 00 	sts	0x00A1, r24
							LED_BUG_ON;
     d70:	c7 98       	cbi	0x18, 7	; 24
							break;
						default:							
							break;
					}					
					ucPareLedEvent(ucLedEvent);					
     d72:	80 91 a0 00 	lds	r24, 0x00A0
     d76:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <ucPareLedEvent>
			}
			break;
		default:			
			break;		
	}		
	ucgLedState = ucStateTemp;		
     d7a:	c0 93 a2 00 	sts	0x00A2, r28
}
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <vLedCtrl>:
/*
	@brief:		Call this function to control led
	@param:		event of led
	@return:	none 
*/
PUBLIC void vLedCtrl(uint8_t E_EVENT){
     d82:	cf 93       	push	r28
     d84:	c8 2f       	mov	r28, r24
	
	uigLedPeriodic = ucPareLedEvent(E_EVENT);
     d86:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <ucPareLedEvent>
     d8a:	90 93 69 00 	sts	0x0069, r25
     d8e:	80 93 68 00 	sts	0x0068, r24
	ucgLedState = LED_STATE_BLINK;	
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	80 93 a2 00 	sts	0x00A2, r24
	ucLedEvent = E_EVENT;
     d98:	c0 93 a0 00 	sts	0x00A0, r28
	
     d9c:	cf 91       	pop	r28
     d9e:	08 95       	ret

00000da0 <__vector_11>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     da0:	1f 92       	push	r1
     da2:	0f 92       	push	r0
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	0f 92       	push	r0
     da8:	11 24       	eor	r1, r1
     daa:	2f 93       	push	r18
     dac:	8f 93       	push	r24
     dae:	9f 93       	push	r25
     db0:	ef 93       	push	r30
     db2:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     db4:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
     db6:	2c b1       	in	r18, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
     db8:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     dba:	e0 91 a5 00 	lds	r30, 0x00A5
     dbe:	ef 5f       	subi	r30, 0xFF	; 255
     dc0:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART_RxTail ) {
     dc2:	90 91 a4 00 	lds	r25, 0x00A4
     dc6:	e9 17       	cp	r30, r25
     dc8:	39 f0       	breq	.+14     	; 0xdd8 <__vector_11+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     dca:	e0 93 a5 00 	sts	0x00A5, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	e8 55       	subi	r30, 0x58	; 88
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	20 83       	st	Z, r18
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <__vector_11+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     dd8:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
     dda:	90 91 a3 00 	lds	r25, 0x00A3
     dde:	89 2b       	or	r24, r25
     de0:	80 93 a3 00 	sts	0x00A3, r24
}
     de4:	ff 91       	pop	r31
     de6:	ef 91       	pop	r30
     de8:	9f 91       	pop	r25
     dea:	8f 91       	pop	r24
     dec:	2f 91       	pop	r18
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <__vector_12>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     df8:	1f 92       	push	r1
     dfa:	0f 92       	push	r0
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	0f 92       	push	r0
     e00:	11 24       	eor	r1, r1
     e02:	8f 93       	push	r24
     e04:	9f 93       	push	r25
     e06:	ef 93       	push	r30
     e08:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     e0a:	90 91 a7 00 	lds	r25, 0x00A7
     e0e:	80 91 a6 00 	lds	r24, 0x00A6
     e12:	98 17       	cp	r25, r24
     e14:	59 f0       	breq	.+22     	; 0xe2c <__vector_12+0x34>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     e16:	e0 91 a6 00 	lds	r30, 0x00A6
     e1a:	ef 5f       	subi	r30, 0xFF	; 255
        UART_TxTail = tmptail;
     e1c:	e0 93 a6 00 	sts	0x00A6, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	e8 51       	subi	r30, 0x18	; 24
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	80 81       	ld	r24, Z
     e28:	8c b9       	out	0x0c, r24	; 12
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <__vector_12+0x36>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     e2c:	55 98       	cbi	0x0a, 5	; 10
    }
}
     e2e:	ff 91       	pop	r31
     e30:	ef 91       	pop	r30
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	0f 90       	pop	r0
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	0f 90       	pop	r0
     e3c:	1f 90       	pop	r1
     e3e:	18 95       	reti

00000e40 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
     e40:	10 92 a7 00 	sts	0x00A7, r1
    UART_TxTail = 0;
     e44:	10 92 a6 00 	sts	0x00A6, r1
    UART_RxHead = 0;
     e48:	10 92 a5 00 	sts	0x00A5, r1
    UART_RxTail = 0;
     e4c:	10 92 a4 00 	sts	0x00A4, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
     e50:	99 23       	and	r25, r25
     e52:	1c f4       	brge	.+6      	; 0xe5a <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
     e54:	22 e0       	ldi	r18, 0x02	; 2
     e56:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
     e58:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
     e5a:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
     e5c:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
     e5e:	88 e9       	ldi	r24, 0x98	; 152
     e60:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
     e62:	86 e8       	ldi	r24, 0x86	; 134
     e64:	80 bd       	out	0x20, r24	; 32
     e66:	08 95       	ret

00000e68 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
     e68:	90 91 a5 00 	lds	r25, 0x00A5
     e6c:	80 91 a4 00 	lds	r24, 0x00A4
     e70:	98 17       	cp	r25, r24
     e72:	81 f0       	breq	.+32     	; 0xe94 <uart_getc+0x2c>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     e74:	e0 91 a4 00 	lds	r30, 0x00A4
     e78:	ef 5f       	subi	r30, 0xFF	; 255
     e7a:	ef 73       	andi	r30, 0x3F	; 63
    UART_RxTail = tmptail; 
     e7c:	e0 93 a4 00 	sts	0x00A4, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	e8 55       	subi	r30, 0x58	; 88
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	80 81       	ld	r24, Z
    
    data = (UART_LastRxError << 8) + data;
     e88:	90 91 a3 00 	lds	r25, 0x00A3
    UART_LastRxError = 0;
     e8c:	10 92 a3 00 	sts	0x00A3, r1
    return data;
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	91 e0       	ldi	r25, 0x01	; 1
    
    data = (UART_LastRxError << 8) + data;
    UART_LastRxError = 0;
    return data;

}/* uart_getc */
     e98:	08 95       	ret

00000e9a <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     e9a:	20 91 a7 00 	lds	r18, 0x00A7
     e9e:	2f 5f       	subi	r18, 0xFF	; 255
    
    while ( tmphead == UART_TxTail ){
     ea0:	90 91 a6 00 	lds	r25, 0x00A6
     ea4:	29 17       	cp	r18, r25
     ea6:	e1 f3       	breq	.-8      	; 0xea0 <uart_putc+0x6>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     ea8:	e2 2f       	mov	r30, r18
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	e8 51       	subi	r30, 0x18	; 24
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     eb2:	20 93 a7 00 	sts	0x00A7, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     eb6:	55 9a       	sbi	0x0a, 5	; 10
     eb8:	08 95       	ret

00000eba <vAssassin>:
void vRuning();

// [Vo Huu Tai 20/8/2015 ]  END ADD car Run
void vAssassin(){
	// [Vo Huu Tai 10/8/2015 ]  over 1ms
	ucTimer10ms++;
     eba:	80 91 f2 01 	lds	r24, 0x01F2
     ebe:	8f 5f       	subi	r24, 0xFF	; 255
     ec0:	80 93 f2 01 	sts	0x01F2, r24
	uctimer20ms++;
     ec4:	80 91 f1 01 	lds	r24, 0x01F1
     ec8:	8f 5f       	subi	r24, 0xFF	; 255
     eca:	80 93 f1 01 	sts	0x01F1, r24
	if(ucTimer10ms == 10){
     ece:	80 91 f2 01 	lds	r24, 0x01F2
     ed2:	8a 30       	cpi	r24, 0x0A	; 10
     ed4:	31 f4       	brne	.+12     	; 0xee2 <vAssassin+0x28>
		iGetInlined();
     ed6:	0e 94 4b 02 	call	0x496	; 0x496 <iGetInlined>
		vLedFlash();
     eda:	0e 94 8e 06 	call	0xd1c	; 0xd1c <vLedFlash>
		ucTimer10ms = 0;
     ede:	10 92 f2 01 	sts	0x01F2, r1
	}
	if (uctimer20ms == 20){
     ee2:	80 91 f1 01 	lds	r24, 0x01F1
     ee6:	84 31       	cpi	r24, 0x14	; 20
     ee8:	21 f4       	brne	.+8      	; 0xef2 <vAssassin+0x38>
		#ifdef USE_PID		
			vCalPID();	
     eea:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <vCalPID>
		#endif
		uctimer20ms = 0;		
     eee:	10 92 f1 01 	sts	0x01F1, r1
     ef2:	08 95       	ret

00000ef4 <check_crossline>:
/************************************************************************/
int check_crossline( uint8_t check_from )
{
	
	int ret = 0;
	if(check_from == CHECK_FROM_LEFT){// (case 61) 0 111 1 000		
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	49 f4       	brne	.+18     	; 0xf0a <check_crossline+0x16>
		if(ucGetSensorData(0x01) == 0x01)ret = 1;// 0 000 0 00x
     ef8:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
     efc:	21 e0       	ldi	r18, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	09 f0       	breq	.+2      	; 0xf06 <check_crossline+0x12>
     f04:	20 e0       	ldi	r18, 0x00	; 0
/* Return value 0: no crossline 1: crossline exists */
/************************************************************************/
int check_crossline( uint8_t check_from )
{
	
	int ret = 0;
     f06:	82 2f       	mov	r24, r18
     f08:	08 95       	ret
	if(check_from == CHECK_FROM_LEFT){// (case 61) 0 111 1 000		
		if(ucGetSensorData(0x01) == 0x01)ret = 1;// 0 000 0 00x
	}
	if(check_from == CHECK_FROM_RIGHT){//(case 51) 0 000 1 111
     f0a:	82 30       	cpi	r24, 0x02	; 2
     f0c:	51 f4       	brne	.+20     	; 0xf22 <check_crossline+0x2e>
		if(ucGetSensorData(0x40) == 0x40)ret = 1;// 0 x00 0 000
     f0e:	80 e4       	ldi	r24, 0x40	; 64
     f10:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
     f14:	21 e0       	ldi	r18, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	80 34       	cpi	r24, 0x40	; 64
     f1a:	09 f0       	breq	.+2      	; 0xf1e <check_crossline+0x2a>
     f1c:	20 e0       	ldi	r18, 0x00	; 0
/* Return value 0: no crossline 1: crossline exists */
/************************************************************************/
int check_crossline( uint8_t check_from )
{
	
	int ret = 0;
     f1e:	82 2f       	mov	r24, r18
     f20:	08 95       	ret
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(check_from == CHECK_FROM_RIGHT){//(case 51) 0 000 1 111
		if(ucGetSensorData(0x40) == 0x40)ret = 1;// 0 x00 0 000
	}
	return ret;
}
     f26:	08 95       	ret

00000f28 <followLineAfterSignal>:
{
	
}

void followLineAfterSignal( int maxSpeed, bool PID_ON  )
{
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	ec 01       	movw	r28, r24
     f30:	16 2f       	mov	r17, r22
	//if(BF_ON)vSetBF(true,true);		

	switch(ucGetSensorData(0x77)){//0 fff 0 fff
     f32:	87 e7       	ldi	r24, 0x77	; 119
     f34:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
     f38:	86 30       	cpi	r24, 0x06	; 6
     f3a:	91 f1       	breq	.+100    	; 0xfa0 <followLineAfterSignal+0x78>
     f3c:	60 f4       	brcc	.+24     	; 0xf56 <followLineAfterSignal+0x2e>
     f3e:	82 30       	cpi	r24, 0x02	; 2
     f40:	d9 f1       	breq	.+118    	; 0xfb8 <followLineAfterSignal+0x90>
     f42:	18 f4       	brcc	.+6      	; 0xf4a <followLineAfterSignal+0x22>
     f44:	88 23       	and	r24, r24
     f46:	b1 f0       	breq	.+44     	; 0xf74 <followLineAfterSignal+0x4c>
     f48:	80 c0       	rjmp	.+256    	; 0x104a <followLineAfterSignal+0x122>
     f4a:	83 30       	cpi	r24, 0x03	; 3
     f4c:	09 f4       	brne	.+2      	; 0xf50 <followLineAfterSignal+0x28>
     f4e:	41 c0       	rjmp	.+130    	; 0xfd2 <followLineAfterSignal+0xaa>
     f50:	84 30       	cpi	r24, 0x04	; 4
     f52:	d1 f0       	breq	.+52     	; 0xf88 <followLineAfterSignal+0x60>
     f54:	7a c0       	rjmp	.+244    	; 0x104a <followLineAfterSignal+0x122>
     f56:	80 32       	cpi	r24, 0x20	; 32
     f58:	09 f4       	brne	.+2      	; 0xf5c <followLineAfterSignal+0x34>
     f5a:	5e c0       	rjmp	.+188    	; 0x1018 <followLineAfterSignal+0xf0>
     f5c:	20 f4       	brcc	.+8      	; 0xf66 <followLineAfterSignal+0x3e>
     f5e:	80 31       	cpi	r24, 0x10	; 16
     f60:	09 f4       	brne	.+2      	; 0xf64 <followLineAfterSignal+0x3c>
     f62:	44 c0       	rjmp	.+136    	; 0xfec <followLineAfterSignal+0xc4>
     f64:	72 c0       	rjmp	.+228    	; 0x104a <followLineAfterSignal+0x122>
     f66:	80 33       	cpi	r24, 0x30	; 48
     f68:	09 f4       	brne	.+2      	; 0xf6c <followLineAfterSignal+0x44>
     f6a:	4b c0       	rjmp	.+150    	; 0x1002 <followLineAfterSignal+0xda>
     f6c:	80 36       	cpi	r24, 0x60	; 96
     f6e:	09 f4       	brne	.+2      	; 0xf72 <followLineAfterSignal+0x4a>
     f70:	60 c0       	rjmp	.+192    	; 0x1032 <followLineAfterSignal+0x10a>
     f72:	6b c0       	rjmp	.+214    	; 0x104a <followLineAfterSignal+0x122>
		case 0x00:// 0 000 x 000
		vServo(0);
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
		vMotor(maxSpeed,maxSpeed,PID_ON);
     f7c:	41 2f       	mov	r20, r17
     f7e:	be 01       	movw	r22, r28
     f80:	ce 01       	movw	r24, r28
     f82:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
		break;
     f86:	61 c0       	rjmp	.+194    	; 0x104a <followLineAfterSignal+0x122>
		//
		case  0x04: // 0 000 x 100
			vServo(10);
     f88:	8a e0       	ldi	r24, 0x0A	; 10
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
			vMotor(maxSpeed,maxSpeed-5,PID_ON);
     f90:	be 01       	movw	r22, r28
     f92:	65 50       	subi	r22, 0x05	; 5
     f94:	71 09       	sbc	r23, r1
     f96:	41 2f       	mov	r20, r17
     f98:	ce 01       	movw	r24, r28
     f9a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
			break;
     f9e:	55 c0       	rjmp	.+170    	; 0x104a <followLineAfterSignal+0x122>
		case 0x06: // 0 000 x 110
			vServo(15);
     fa0:	8f e0       	ldi	r24, 0x0F	; 15
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
			vMotor(maxSpeed,maxSpeed-5,PID_ON);
     fa8:	be 01       	movw	r22, r28
     faa:	65 50       	subi	r22, 0x05	; 5
     fac:	71 09       	sbc	r23, r1
     fae:	41 2f       	mov	r20, r17
     fb0:	ce 01       	movw	r24, r28
     fb2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
			break;
     fb6:	49 c0       	rjmp	.+146    	; 0x104a <followLineAfterSignal+0x122>
		case  0x02: // 0 000 0 010
			vServo(20);
     fb8:	84 e1       	ldi	r24, 0x14	; 20
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
			vMotor(maxSpeed-5,maxSpeed-10,PID_ON);
     fc0:	be 01       	movw	r22, r28
     fc2:	6a 50       	subi	r22, 0x0A	; 10
     fc4:	71 09       	sbc	r23, r1
     fc6:	41 2f       	mov	r20, r17
     fc8:	ce 01       	movw	r24, r28
     fca:	05 97       	sbiw	r24, 0x05	; 5
     fcc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
			break;
     fd0:	3c c0       	rjmp	.+120    	; 0x104a <followLineAfterSignal+0x122>
		case 0x03: // 0 000 x 011
			vServo(25);
     fd2:	89 e1       	ldi	r24, 0x19	; 25
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
			vMotor(maxSpeed-10,maxSpeed-15,PID_ON);
     fda:	be 01       	movw	r22, r28
     fdc:	6f 50       	subi	r22, 0x0F	; 15
     fde:	71 09       	sbc	r23, r1
     fe0:	41 2f       	mov	r20, r17
     fe2:	ce 01       	movw	r24, r28
     fe4:	0a 97       	sbiw	r24, 0x0a	; 10
     fe6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
			break;
     fea:	2f c0       	rjmp	.+94     	; 0x104a <followLineAfterSignal+0x122>
		////
		case 0x10: //0 001 x 000
			vServo(-10);
     fec:	86 ef       	ldi	r24, 0xF6	; 246
     fee:	9f ef       	ldi	r25, 0xFF	; 255
     ff0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
			vMotor(maxSpeed-5,maxSpeed,PID_ON);
     ff4:	41 2f       	mov	r20, r17
     ff6:	be 01       	movw	r22, r28
     ff8:	ce 01       	movw	r24, r28
     ffa:	05 97       	sbiw	r24, 0x05	; 5
     ffc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
			break;
    1000:	24 c0       	rjmp	.+72     	; 0x104a <followLineAfterSignal+0x122>
		case 0x30: // 0 011 x 000
			vServo(-15);
    1002:	81 ef       	ldi	r24, 0xF1	; 241
    1004:	9f ef       	ldi	r25, 0xFF	; 255
    1006:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
			vMotor(maxSpeed-5,maxSpeed,PID_ON);
    100a:	41 2f       	mov	r20, r17
    100c:	be 01       	movw	r22, r28
    100e:	ce 01       	movw	r24, r28
    1010:	05 97       	sbiw	r24, 0x05	; 5
    1012:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
			break;
    1016:	19 c0       	rjmp	.+50     	; 0x104a <followLineAfterSignal+0x122>
		case 0x20: // 0 010 x 000
			vServo(-20);
    1018:	8c ee       	ldi	r24, 0xEC	; 236
    101a:	9f ef       	ldi	r25, 0xFF	; 255
    101c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
			vMotor(maxSpeed-10,maxSpeed-5,PID_ON);
    1020:	be 01       	movw	r22, r28
    1022:	65 50       	subi	r22, 0x05	; 5
    1024:	71 09       	sbc	r23, r1
    1026:	41 2f       	mov	r20, r17
    1028:	ce 01       	movw	r24, r28
    102a:	0a 97       	sbiw	r24, 0x0a	; 10
    102c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
			break;
    1030:	0c c0       	rjmp	.+24     	; 0x104a <followLineAfterSignal+0x122>
		case 0x60: // 0 110 x 000
			vServo(-25);
    1032:	87 ee       	ldi	r24, 0xE7	; 231
    1034:	9f ef       	ldi	r25, 0xFF	; 255
    1036:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
			vMotor(maxSpeed-15,maxSpeed-10,PID_ON);
    103a:	be 01       	movw	r22, r28
    103c:	6a 50       	subi	r22, 0x0A	; 10
    103e:	71 09       	sbc	r23, r1
    1040:	41 2f       	mov	r20, r17
    1042:	ce 01       	movw	r24, r28
    1044:	0f 97       	sbiw	r24, 0x0f	; 15
    1046:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
			break;
	}
	
	//vSetBF(false,false);
	
}
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	08 95       	ret

00001052 <check_rightline>:
int check_rightline( void )
{
	 int ret;

	 ret = 0;
	 if( ucGetSensorData(0x0f)==0x0f)  {// 0 000 1 111
    1052:	8f e0       	ldi	r24, 0x0F	; 15
    1054:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	8f 30       	cpi	r24, 0x0F	; 15
    105e:	11 f0       	breq	.+4      	; 0x1064 <check_rightline+0x12>
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
		 ret = 1;
	 }
	 return ret;
}
    1064:	c9 01       	movw	r24, r18
    1066:	08 95       	ret

00001068 <check_leftline>:
int check_leftline( void )
{
	int ret;

	ret = 0;
	if (ucGetSensorData(0x70)==0x70) {// 0 xxx 0 000
    1068:	80 e7       	ldi	r24, 0x70	; 112
    106a:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
    106e:	21 e0       	ldi	r18, 0x01	; 1
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	80 37       	cpi	r24, 0x70	; 112
    1074:	11 f0       	breq	.+4      	; 0x107a <check_leftline+0x12>
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
		ret = 1;
	}
	return ret;
}
    107a:	c9 01       	movw	r24, r18
    107c:	08 95       	ret

0000107e <vRuning>:
};

void vRuning(){
	//uint16_t fl = 0;
	// - 45 0 45
	vOutLed7(9999);
    107e:	8f e0       	ldi	r24, 0x0F	; 15
    1080:	97 e2       	ldi	r25, 0x27	; 39
    1082:	0e 94 cd 01 	call	0x39a	; 0x39a <vOutLed7>
	pattern = CAR_NORMAL_TRACE;	
    1086:	8a e0       	ldi	r24, 0x0A	; 10
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	90 93 ec 01 	sts	0x01EC, r25
    108e:	80 93 eb 01 	sts	0x01EB, r24
				}
				break;
			case (CAR_LEFT_LINE + 4):
				vServo(30);
				while(cnt_timer_1ms < 5);
				pattern = CAR_NORMAL_TRACE;
    1092:	ca e0       	ldi	r28, 0x0A	; 10
    1094:	d0 e0       	ldi	r29, 0x00	; 0
					cnt_timer_1ms = 0;
					pattern = CAR_CROSS_LINE;
				}
				if(cnt_timer_1ms > 50){//50ms
					vLedCtrl(LED_STARTUP_COMPELETE);
					pattern = CAR_LEFT_LINE + 1;
    1096:	0e e3       	ldi	r16, 0x3E	; 62
    1098:	10 e0       	ldi	r17, 0x00	; 0
			case (CAR_RIGHT_LINE + 2):
				vServo(38);
				vMotor(15,15,true);
				if(ucGetSensorData(0x01) == 0x01){//0 000 0 00x
					vServo(10);
					pattern = CAR_RIGHT_LINE + 3;
    109a:	0f 2e       	mov	r0, r31
    109c:	f6 e3       	ldi	r31, 0x36	; 54
    109e:	2f 2e       	mov	r2, r31
    10a0:	31 2c       	mov	r3, r1
    10a2:	f0 2d       	mov	r31, r0
				break;	
			case (CAR_RIGHT_LINE + 1)://is right line, chuyen lan trai
				vSetBF(true,true);
				followLineAfterSignal(60,true);
				if(cnt_int1 > 140){
					pattern = CAR_RIGHT_LINE + 2;
    10a4:	0f 2e       	mov	r0, r31
    10a6:	f5 e3       	ldi	r31, 0x35	; 53
    10a8:	4f 2e       	mov	r4, r31
    10aa:	51 2c       	mov	r5, r1
    10ac:	f0 2d       	mov	r31, r0
				if(check_crossline(CHECK_FROM_RIGHT)){
					cnt_timer_1ms = 0;
					pattern = CAR_CROSS_LINE;
				}
				if(cnt_timer_1ms > 50)//50ms
					pattern = CAR_RIGHT_LINE + 1;
    10ae:	0f 2e       	mov	r0, r31
    10b0:	f4 e3       	ldi	r31, 0x34	; 52
    10b2:	6f 2e       	mov	r6, r31
    10b4:	71 2c       	mov	r7, r1
    10b6:	f0 2d       	mov	r31, r0
				pattern = CAR_TURN_LEFT + 1;
				cnt_timer_1ms = 0;
				break;
			case (CAR_TURN_LEFT + 1) :
				if(cnt_timer_1ms > 60){
					pattern = CAR_TURN_LEFT + 2;
    10b8:	68 94       	set
    10ba:	88 24       	eor	r8, r8
    10bc:	85 f8       	bld	r8, 5
    10be:	91 2c       	mov	r9, r1
				vOutLed7(CAR_TURN_LEFT);
				
				vServo(-60);
				vMotor(-20,60,false);
				
				pattern = CAR_TURN_LEFT + 1;
    10c0:	0f 2e       	mov	r0, r31
    10c2:	ff e1       	ldi	r31, 0x1F	; 31
    10c4:	af 2e       	mov	r10, r31
    10c6:	b1 2c       	mov	r11, r1
    10c8:	f0 2d       	mov	r31, r0
				pattern = CAR_TURN_RIGHT + 1;
				cnt_timer_1ms = 0;
			break;
			case (CAR_TURN_RIGHT + 1) :
				if(cnt_timer_1ms > 60){
					pattern = CAR_TURN_RIGHT + 2;
    10ca:	0f 2e       	mov	r0, r31
    10cc:	fa e2       	ldi	r31, 0x2A	; 42
    10ce:	cf 2e       	mov	r12, r31
    10d0:	d1 2c       	mov	r13, r1
    10d2:	f0 2d       	mov	r31, r0
				vOutLed7(CAR_TURN_RIGHT);
				
				vServo(60);
				vMotor(60,-20,false);
			
				pattern = CAR_TURN_RIGHT + 1;
    10d4:	0f 2e       	mov	r0, r31
    10d6:	f9 e2       	ldi	r31, 0x29	; 41
    10d8:	ef 2e       	mov	r14, r31
    10da:	f1 2c       	mov	r15, r1
    10dc:	f0 2d       	mov	r31, r0
	// - 45 0 45
	vOutLed7(9999);
	pattern = CAR_NORMAL_TRACE;	
	//SLAVE_OFF;
	while(1){
		switch (pattern)
    10de:	e0 91 eb 01 	lds	r30, 0x01EB
    10e2:	f0 91 ec 01 	lds	r31, 0x01EC
    10e6:	3a 97       	sbiw	r30, 0x0a	; 10
    10e8:	e8 33       	cpi	r30, 0x38	; 56
    10ea:	f1 05       	cpc	r31, r1
    10ec:	08 f0       	brcs	.+2      	; 0x10f0 <vRuning+0x72>
    10ee:	dd c3       	rjmp	.+1978   	; 0x18aa <vRuning+0x82c>
    10f0:	e6 5d       	subi	r30, 0xD6	; 214
    10f2:	ff 4f       	sbci	r31, 0xFF	; 255
    10f4:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__tablejump2__>
		{
			case CAR_NORMAL_TRACE :
// Normal trace
			PID = true;	
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	80 93 ea 01 	sts	0x01EA, r24
			//--			
			switch( ucGetSensorData(0x77) ) {	// 0 111 0 111
    10fe:	87 e7       	ldi	r24, 0x77	; 119
    1100:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
    1104:	84 30       	cpi	r24, 0x04	; 4
    1106:	89 f0       	breq	.+34     	; 0x112a <vRuning+0xac>
    1108:	80 31       	cpi	r24, 0x10	; 16
    110a:	f1 f0       	breq	.+60     	; 0x1148 <vRuning+0xca>
    110c:	81 11       	cpse	r24, r1
    110e:	2e c0       	rjmp	.+92     	; 0x116c <vRuning+0xee>
				case 0x00: // 0 000 0 000
					vServo( 0 );
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
					vMotor( 45 ,45,PID);
    1118:	40 91 ea 01 	lds	r20, 0x01EA
    111c:	6d e2       	ldi	r22, 0x2D	; 45
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	8d e2       	ldi	r24, 0x2D	; 45
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
					break;				
    1128:	29 c0       	rjmp	.+82     	; 0x117c <vRuning+0xfe>

				case 0x04: // 0 000 0 100
					vServo( angle[0] );
    112a:	80 91 6a 00 	lds	r24, 0x006A
    112e:	90 91 6b 00 	lds	r25, 0x006B
    1132:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
					vMotor( 48, 33,PID );
    1136:	40 91 ea 01 	lds	r20, 0x01EA
    113a:	61 e2       	ldi	r22, 0x21	; 33
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	80 e3       	ldi	r24, 0x30	; 48
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
					break;		
    1146:	1a c0       	rjmp	.+52     	; 0x117c <vRuning+0xfe>
///
				case 0x10:// 0 001 0 000
					vServo( -angle[0] );
    1148:	80 91 6a 00 	lds	r24, 0x006A
    114c:	90 91 6b 00 	lds	r25, 0x006B
    1150:	91 95       	neg	r25
    1152:	81 95       	neg	r24
    1154:	91 09       	sbc	r25, r1
    1156:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
					vMotor( 33, 48, PID );					
    115a:	40 91 ea 01 	lds	r20, 0x01EA
    115e:	60 e3       	ldi	r22, 0x30	; 48
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	81 e2       	ldi	r24, 0x21	; 33
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
					break;
    116a:	08 c0       	rjmp	.+16     	; 0x117c <vRuning+0xfe>
				default:
					vMotor(0,0,PID);
    116c:	40 91 ea 01 	lds	r20, 0x01EA
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
					break;
			}//end switch 0x77
			switch(ucGetSensorData(0x02)){//cong phai 0 000 0 0x0
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
    1182:	82 30       	cpi	r24, 0x02	; 2
    1184:	31 f4       	brne	.+12     	; 0x1192 <vRuning+0x114>
				case 0x02:
					pattern = CAR_NORMAL_TRACE + 1;
    1186:	8b e0       	ldi	r24, 0x0B	; 11
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	90 93 ec 01 	sts	0x01EC, r25
    118e:	80 93 eb 01 	sts	0x01EB, r24
					break;
				default:
					break;
			}//end switch 0x20
			switch(ucGetSensorData(0x20)){// cong trai. 0 0x0 0 000
    1192:	80 e2       	ldi	r24, 0x20	; 32
    1194:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
    1198:	80 32       	cpi	r24, 0x20	; 32
    119a:	31 f4       	brne	.+12     	; 0x11a8 <vRuning+0x12a>
				case 0x20:
					pattern = CAR_NORMAL_TRACE + 2;
    119c:	8c e0       	ldi	r24, 0x0C	; 12
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	90 93 ec 01 	sts	0x01EC, r25
    11a4:	80 93 eb 01 	sts	0x01EB, r24
					break;
				default:
					break;
			}//end witch 0x02
			
			if (check_rightline()) {	// 0 000 1 111			
    11a8:	0e 94 29 08 	call	0x1052	; 0x1052 <check_rightline>
    11ac:	89 2b       	or	r24, r25
    11ae:	91 f0       	breq	.+36     	; 0x11d4 <vRuning+0x156>
				pattern = CAR_RIGHT_LINE;
    11b0:	83 e3       	ldi	r24, 0x33	; 51
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	90 93 ec 01 	sts	0x01EC, r25
    11b8:	80 93 eb 01 	sts	0x01EB, r24
				vMotor(5,5,PID);	
    11bc:	40 91 ea 01 	lds	r20, 0x01EA
    11c0:	65 e0       	ldi	r22, 0x05	; 5
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	85 e0       	ldi	r24, 0x05	; 5
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
				cnt_timer_1ms = 0;		
    11cc:	10 92 f0 01 	sts	0x01F0, r1
    11d0:	10 92 ef 01 	sts	0x01EF, r1
			}

			if (check_leftline()) {	// 0 111 1 000			
    11d4:	0e 94 34 08 	call	0x1068	; 0x1068 <check_leftline>
    11d8:	89 2b       	or	r24, r25
    11da:	09 f4       	brne	.+2      	; 0x11de <vRuning+0x160>
    11dc:	80 cf       	rjmp	.-256    	; 0x10de <vRuning+0x60>
				pattern = CAR_LEFT_LINE;
    11de:	8d e3       	ldi	r24, 0x3D	; 61
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	90 93 ec 01 	sts	0x01EC, r25
    11e6:	80 93 eb 01 	sts	0x01EB, r24
				vMotor(5,5,PID);						
    11ea:	40 91 ea 01 	lds	r20, 0x01EA
    11ee:	65 e0       	ldi	r22, 0x05	; 5
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	85 e0       	ldi	r24, 0x05	; 5
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
				cnt_timer_1ms = 0;
    11fa:	10 92 f0 01 	sts	0x01F0, r1
    11fe:	10 92 ef 01 	sts	0x01EF, r1
    1202:	6d cf       	rjmp	.-294    	; 0x10de <vRuning+0x60>
			}
				break; //end case 10
// Normal trace, cong phai		
			case (CAR_NORMAL_TRACE + 1)://cong phai
				PID = false;
    1204:	10 92 ea 01 	sts	0x01EA, r1
				switch(ucGetSensorData(0x64)){ // 0 xx0 0 x00				
    1208:	84 e6       	ldi	r24, 0x64	; 100
    120a:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
    120e:	80 32       	cpi	r24, 0x20	; 32
    1210:	99 f1       	breq	.+102    	; 0x1278 <vRuning+0x1fa>
    1212:	38 f4       	brcc	.+14     	; 0x1222 <vRuning+0x1a4>
    1214:	88 23       	and	r24, r24
    1216:	09 f4       	brne	.+2      	; 0x121a <vRuning+0x19c>
    1218:	42 c0       	rjmp	.+132    	; 0x129e <vRuning+0x220>
    121a:	84 30       	cpi	r24, 0x04	; 4
    121c:	09 f4       	brne	.+2      	; 0x1220 <vRuning+0x1a2>
    121e:	52 c0       	rjmp	.+164    	; 0x12c4 <vRuning+0x246>
    1220:	5e cf       	rjmp	.-324    	; 0x10de <vRuning+0x60>
    1222:	80 34       	cpi	r24, 0x40	; 64
    1224:	19 f0       	breq	.+6      	; 0x122c <vRuning+0x1ae>
    1226:	80 36       	cpi	r24, 0x60	; 96
    1228:	a1 f0       	breq	.+40     	; 0x1252 <vRuning+0x1d4>
    122a:	59 cf       	rjmp	.-334    	; 0x10de <vRuning+0x60>
					case 0x40:// 0 100 0 000
						vServo(angle[5]);
    122c:	80 91 74 00 	lds	r24, 0x0074
    1230:	90 91 75 00 	lds	r25, 0x0075
    1234:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						
						vMotor(CS_A1[0],CS_A2[0],PID);
    1238:	60 91 76 00 	lds	r22, 0x0076
    123c:	70 91 77 00 	lds	r23, 0x0077
    1240:	40 91 ea 01 	lds	r20, 0x01EA
    1244:	80 91 80 00 	lds	r24, 0x0080
    1248:	90 91 81 00 	lds	r25, 0x0081
    124c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
    1250:	46 cf       	rjmp	.-372    	; 0x10de <vRuning+0x60>
					case 0x60:// 0 110 0 000 
						vServo(angle[4]);
    1252:	80 91 72 00 	lds	r24, 0x0072
    1256:	90 91 73 00 	lds	r25, 0x0073
    125a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						
						vMotor(CS_A1[1],CS_A2[1],PID);
    125e:	60 91 78 00 	lds	r22, 0x0078
    1262:	70 91 79 00 	lds	r23, 0x0079
    1266:	40 91 ea 01 	lds	r20, 0x01EA
    126a:	80 91 82 00 	lds	r24, 0x0082
    126e:	90 91 83 00 	lds	r25, 0x0083
    1272:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
    1276:	33 cf       	rjmp	.-410    	; 0x10de <vRuning+0x60>
					case 0x20://0 010 0 000
						vServo(angle[3]);
    1278:	80 91 70 00 	lds	r24, 0x0070
    127c:	90 91 71 00 	lds	r25, 0x0071
    1280:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						
						vMotor(CS_A1[2],CS_A2[2],PID);
    1284:	60 91 7a 00 	lds	r22, 0x007A
    1288:	70 91 7b 00 	lds	r23, 0x007B
    128c:	40 91 ea 01 	lds	r20, 0x01EA
    1290:	80 91 84 00 	lds	r24, 0x0084
    1294:	90 91 85 00 	lds	r25, 0x0085
    1298:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
    129c:	20 cf       	rjmp	.-448    	; 0x10de <vRuning+0x60>
					case 0x00://0 000 0 000
						vServo(angle[2]);
    129e:	80 91 6e 00 	lds	r24, 0x006E
    12a2:	90 91 6f 00 	lds	r25, 0x006F
    12a6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						
						vMotor(CS_A1[3],CS_A2[3],PID);
    12aa:	60 91 7c 00 	lds	r22, 0x007C
    12ae:	70 91 7d 00 	lds	r23, 0x007D
    12b2:	40 91 ea 01 	lds	r20, 0x01EA
    12b6:	80 91 86 00 	lds	r24, 0x0086
    12ba:	90 91 87 00 	lds	r25, 0x0087
    12be:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
    12c2:	0d cf       	rjmp	.-486    	; 0x10de <vRuning+0x60>
					case 0x04://0 000 0 100
						vServo(angle[0]);
    12c4:	80 91 6a 00 	lds	r24, 0x006A
    12c8:	90 91 6b 00 	lds	r25, 0x006B
    12cc:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						
						vMotor(CS_A1[4],CS_A2[4],PID);
    12d0:	60 91 7e 00 	lds	r22, 0x007E
    12d4:	70 91 7f 00 	lds	r23, 0x007F
    12d8:	40 91 ea 01 	lds	r20, 0x01EA
    12dc:	80 91 88 00 	lds	r24, 0x0088
    12e0:	90 91 89 00 	lds	r25, 0x0089
    12e4:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						pattern = CAR_NORMAL_TRACE;		//return normal run
    12e8:	d0 93 ec 01 	sts	0x01EC, r29
    12ec:	c0 93 eb 01 	sts	0x01EB, r28
						break;
    12f0:	f6 ce       	rjmp	.-532    	; 0x10de <vRuning+0x60>
				}//end switch 0x64
				break; //end case 11

// Normal trace, cong trai					
			case (CAR_NORMAL_TRACE + 2)://cong trai
				PID = false;
    12f2:	10 92 ea 01 	sts	0x01EA, r1
				switch(ucGetSensorData(0x13)){// 0 00x 0 0xx
    12f6:	83 e1       	ldi	r24, 0x13	; 19
    12f8:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	d9 f1       	breq	.+118    	; 0x1376 <vRuning+0x2f8>
    1300:	30 f4       	brcc	.+12     	; 0x130e <vRuning+0x290>
    1302:	88 23       	and	r24, r24
    1304:	09 f4       	brne	.+2      	; 0x1308 <vRuning+0x28a>
    1306:	4e c0       	rjmp	.+156    	; 0x13a4 <vRuning+0x326>
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	39 f0       	breq	.+14     	; 0x131a <vRuning+0x29c>
    130c:	e8 ce       	rjmp	.-560    	; 0x10de <vRuning+0x60>
    130e:	83 30       	cpi	r24, 0x03	; 3
    1310:	d9 f0       	breq	.+54     	; 0x1348 <vRuning+0x2ca>
    1312:	80 31       	cpi	r24, 0x10	; 16
    1314:	09 f4       	brne	.+2      	; 0x1318 <vRuning+0x29a>
    1316:	5d c0       	rjmp	.+186    	; 0x13d2 <vRuning+0x354>
    1318:	e2 ce       	rjmp	.-572    	; 0x10de <vRuning+0x60>
					case 0x01://0 000 0 001
						vServo(-angle[5] - 10);
    131a:	20 91 74 00 	lds	r18, 0x0074
    131e:	30 91 75 00 	lds	r19, 0x0075
    1322:	86 ef       	ldi	r24, 0xF6	; 246
    1324:	9f ef       	ldi	r25, 0xFF	; 255
    1326:	82 1b       	sub	r24, r18
    1328:	93 0b       	sbc	r25, r19
    132a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						
						vMotor(CS_A2[0],CS_A1[0],PID);
    132e:	60 91 80 00 	lds	r22, 0x0080
    1332:	70 91 81 00 	lds	r23, 0x0081
    1336:	40 91 ea 01 	lds	r20, 0x01EA
    133a:	80 91 76 00 	lds	r24, 0x0076
    133e:	90 91 77 00 	lds	r25, 0x0077
    1342:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
    1346:	cb ce       	rjmp	.-618    	; 0x10de <vRuning+0x60>
					case 0x03://0 000 0 011
						vServo(-angle[4] - 9);
    1348:	20 91 72 00 	lds	r18, 0x0072
    134c:	30 91 73 00 	lds	r19, 0x0073
    1350:	87 ef       	ldi	r24, 0xF7	; 247
    1352:	9f ef       	ldi	r25, 0xFF	; 255
    1354:	82 1b       	sub	r24, r18
    1356:	93 0b       	sbc	r25, r19
    1358:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						vMotor(CS_A2[1],CS_A1[1],PID);
    135c:	60 91 82 00 	lds	r22, 0x0082
    1360:	70 91 83 00 	lds	r23, 0x0083
    1364:	40 91 ea 01 	lds	r20, 0x01EA
    1368:	80 91 78 00 	lds	r24, 0x0078
    136c:	90 91 79 00 	lds	r25, 0x0079
    1370:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
    1374:	b4 ce       	rjmp	.-664    	; 0x10de <vRuning+0x60>
					case 0x02://0 000 0 010
						vServo(-angle[3] - 8);
    1376:	20 91 70 00 	lds	r18, 0x0070
    137a:	30 91 71 00 	lds	r19, 0x0071
    137e:	88 ef       	ldi	r24, 0xF8	; 248
    1380:	9f ef       	ldi	r25, 0xFF	; 255
    1382:	82 1b       	sub	r24, r18
    1384:	93 0b       	sbc	r25, r19
    1386:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						vMotor(CS_A2[2],CS_A1[2],PID);
    138a:	60 91 84 00 	lds	r22, 0x0084
    138e:	70 91 85 00 	lds	r23, 0x0085
    1392:	40 91 ea 01 	lds	r20, 0x01EA
    1396:	80 91 7a 00 	lds	r24, 0x007A
    139a:	90 91 7b 00 	lds	r25, 0x007B
    139e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
    13a2:	9d ce       	rjmp	.-710    	; 0x10de <vRuning+0x60>
					case 0x00://0 000 0 000
						vServo(-angle[2] - 7);
    13a4:	20 91 6e 00 	lds	r18, 0x006E
    13a8:	30 91 6f 00 	lds	r19, 0x006F
    13ac:	89 ef       	ldi	r24, 0xF9	; 249
    13ae:	9f ef       	ldi	r25, 0xFF	; 255
    13b0:	82 1b       	sub	r24, r18
    13b2:	93 0b       	sbc	r25, r19
    13b4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						vMotor(CS_A2[3],CS_A1[3],PID);
    13b8:	60 91 86 00 	lds	r22, 0x0086
    13bc:	70 91 87 00 	lds	r23, 0x0087
    13c0:	40 91 ea 01 	lds	r20, 0x01EA
    13c4:	80 91 7c 00 	lds	r24, 0x007C
    13c8:	90 91 7d 00 	lds	r25, 0x007D
    13cc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
    13d0:	86 ce       	rjmp	.-756    	; 0x10de <vRuning+0x60>
					case 0x10://0 001 0 000
						vServo(-angle[1] - 6);
    13d2:	20 91 6c 00 	lds	r18, 0x006C
    13d6:	30 91 6d 00 	lds	r19, 0x006D
    13da:	8a ef       	ldi	r24, 0xFA	; 250
    13dc:	9f ef       	ldi	r25, 0xFF	; 255
    13de:	82 1b       	sub	r24, r18
    13e0:	93 0b       	sbc	r25, r19
    13e2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						vMotor(CS_A2[4],CS_A1[4],PID);
    13e6:	60 91 88 00 	lds	r22, 0x0088
    13ea:	70 91 89 00 	lds	r23, 0x0089
    13ee:	40 91 ea 01 	lds	r20, 0x01EA
    13f2:	80 91 7e 00 	lds	r24, 0x007E
    13f6:	90 91 7f 00 	lds	r25, 0x007F
    13fa:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						pattern = CAR_NORMAL_TRACE;		//return normal run
    13fe:	d0 93 ec 01 	sts	0x01EC, r29
    1402:	c0 93 eb 01 	sts	0x01EB, r28
						break;
    1406:	6b ce       	rjmp	.-810    	; 0x10de <vRuning+0x60>
						break;
				}//end switch 0x13
				break;//end case 12
//Cross line
			case CAR_CROSS_LINE: //(case 20) 0 111 1 111
				vOutLed7(CAR_CROSS_LINE);	
    1408:	84 e1       	ldi	r24, 0x14	; 20
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 cd 01 	call	0x39a	; 0x39a <vOutLed7>
				vSetBF(true,true);	
    1410:	61 e0       	ldi	r22, 0x01	; 1
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	0e 94 60 03 	call	0x6c0	; 0x6c0 <vSetBF>
				if(cnt_timer_1ms > 50){//5ms
    1418:	80 91 ef 01 	lds	r24, 0x01EF
    141c:	90 91 f0 01 	lds	r25, 0x01F0
    1420:	c3 97       	sbiw	r24, 0x33	; 51
    1422:	08 f4       	brcc	.+2      	; 0x1426 <vRuning+0x3a8>
    1424:	5c ce       	rjmp	.-840    	; 0x10de <vRuning+0x60>
					cnt_int1 = 0;
    1426:	10 92 ee 01 	sts	0x01EE, r1
    142a:	10 92 ed 01 	sts	0x01ED, r1
					pattern = CAR_CROSS_LINE + 1;
    142e:	85 e1       	ldi	r24, 0x15	; 21
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	90 93 ec 01 	sts	0x01EC, r25
    1436:	80 93 eb 01 	sts	0x01EB, r24
    143a:	51 ce       	rjmp	.-862    	; 0x10de <vRuning+0x60>
				}
				break; //CAR_CROSS_LINE
			case (CAR_CROSS_LINE + 1)://on dinh				
				switch(ucGetSensorData(0x77)){//0 fff 0 fff
    143c:	87 e7       	ldi	r24, 0x77	; 119
    143e:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
    1442:	86 30       	cpi	r24, 0x06	; 6
    1444:	99 f1       	breq	.+102    	; 0x14ac <vRuning+0x42e>
    1446:	60 f4       	brcc	.+24     	; 0x1460 <vRuning+0x3e2>
    1448:	82 30       	cpi	r24, 0x02	; 2
    144a:	d9 f1       	breq	.+118    	; 0x14c2 <vRuning+0x444>
    144c:	18 f4       	brcc	.+6      	; 0x1454 <vRuning+0x3d6>
    144e:	88 23       	and	r24, r24
    1450:	b1 f0       	breq	.+44     	; 0x147e <vRuning+0x400>
    1452:	79 c0       	rjmp	.+242    	; 0x1546 <vRuning+0x4c8>
    1454:	83 30       	cpi	r24, 0x03	; 3
    1456:	09 f4       	brne	.+2      	; 0x145a <vRuning+0x3dc>
    1458:	3f c0       	rjmp	.+126    	; 0x14d8 <vRuning+0x45a>
    145a:	84 30       	cpi	r24, 0x04	; 4
    145c:	e1 f0       	breq	.+56     	; 0x1496 <vRuning+0x418>
    145e:	73 c0       	rjmp	.+230    	; 0x1546 <vRuning+0x4c8>
    1460:	80 32       	cpi	r24, 0x20	; 32
    1462:	09 f4       	brne	.+2      	; 0x1466 <vRuning+0x3e8>
    1464:	5b c0       	rjmp	.+182    	; 0x151c <vRuning+0x49e>
    1466:	20 f4       	brcc	.+8      	; 0x1470 <vRuning+0x3f2>
    1468:	80 31       	cpi	r24, 0x10	; 16
    146a:	09 f4       	brne	.+2      	; 0x146e <vRuning+0x3f0>
    146c:	40 c0       	rjmp	.+128    	; 0x14ee <vRuning+0x470>
    146e:	6b c0       	rjmp	.+214    	; 0x1546 <vRuning+0x4c8>
    1470:	80 33       	cpi	r24, 0x30	; 48
    1472:	09 f4       	brne	.+2      	; 0x1476 <vRuning+0x3f8>
    1474:	48 c0       	rjmp	.+144    	; 0x1506 <vRuning+0x488>
    1476:	80 36       	cpi	r24, 0x60	; 96
    1478:	09 f4       	brne	.+2      	; 0x147c <vRuning+0x3fe>
    147a:	5b c0       	rjmp	.+182    	; 0x1532 <vRuning+0x4b4>
    147c:	64 c0       	rjmp	.+200    	; 0x1546 <vRuning+0x4c8>
					case 0x00:// 0 000 x 000
						vServo(0);
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						vMotor(20,20,true);
    1486:	41 e0       	ldi	r20, 0x01	; 1
    1488:	64 e1       	ldi	r22, 0x14	; 20
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	84 e1       	ldi	r24, 0x14	; 20
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
    1494:	58 c0       	rjmp	.+176    	; 0x1546 <vRuning+0x4c8>
					//
					case  0x04: // 0 000 x 100
						vServo(10);
    1496:	ce 01       	movw	r24, r28
    1498:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						vMotor(15,13,true);
    149c:	41 e0       	ldi	r20, 0x01	; 1
    149e:	6d e0       	ldi	r22, 0x0D	; 13
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	8f e0       	ldi	r24, 0x0F	; 15
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
    14aa:	4d c0       	rjmp	.+154    	; 0x1546 <vRuning+0x4c8>
					case 0x06: // 0 000 x 110
						vServo(15);
    14ac:	8f e0       	ldi	r24, 0x0F	; 15
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						vMotor(15,10,true);
    14b4:	41 e0       	ldi	r20, 0x01	; 1
    14b6:	be 01       	movw	r22, r28
    14b8:	8f e0       	ldi	r24, 0x0F	; 15
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
    14c0:	42 c0       	rjmp	.+132    	; 0x1546 <vRuning+0x4c8>
					case  0x02: // 0 000 0 010
						vServo(20);
    14c2:	84 e1       	ldi	r24, 0x14	; 20
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						vMotor(10,5,false);
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	65 e0       	ldi	r22, 0x05	; 5
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	ce 01       	movw	r24, r28
    14d2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
    14d6:	37 c0       	rjmp	.+110    	; 0x1546 <vRuning+0x4c8>
					case 0x03: // 0 000 x 011
						vServo(25);
    14d8:	89 e1       	ldi	r24, 0x19	; 25
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						vMotor(10,-10,false);
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	66 ef       	ldi	r22, 0xF6	; 246
    14e4:	7f ef       	ldi	r23, 0xFF	; 255
    14e6:	ce 01       	movw	r24, r28
    14e8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
    14ec:	2c c0       	rjmp	.+88     	; 0x1546 <vRuning+0x4c8>
					////
					case 0x10: //0 001 x 000
						vServo(-10);
    14ee:	86 ef       	ldi	r24, 0xF6	; 246
    14f0:	9f ef       	ldi	r25, 0xFF	; 255
    14f2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						vMotor(13,15,false);
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	6f e0       	ldi	r22, 0x0F	; 15
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	8d e0       	ldi	r24, 0x0D	; 13
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
    1504:	20 c0       	rjmp	.+64     	; 0x1546 <vRuning+0x4c8>
					case 0x30: // 0 011 x 000
						vServo(-15);
    1506:	81 ef       	ldi	r24, 0xF1	; 241
    1508:	9f ef       	ldi	r25, 0xFF	; 255
    150a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						vMotor(10,15,false);
    150e:	40 e0       	ldi	r20, 0x00	; 0
    1510:	6f e0       	ldi	r22, 0x0F	; 15
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	ce 01       	movw	r24, r28
    1516:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
    151a:	15 c0       	rjmp	.+42     	; 0x1546 <vRuning+0x4c8>
					case 0x20: // 0 010 x 000
						vServo(-20);
    151c:	8c ee       	ldi	r24, 0xEC	; 236
    151e:	9f ef       	ldi	r25, 0xFF	; 255
    1520:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						vMotor(5,10,false);
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	be 01       	movw	r22, r28
    1528:	85 e0       	ldi	r24, 0x05	; 5
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
    1530:	0a c0       	rjmp	.+20     	; 0x1546 <vRuning+0x4c8>
					case 0x60: // 0 110 x 000
						vServo(-25);
    1532:	87 ee       	ldi	r24, 0xE7	; 231
    1534:	9f ef       	ldi	r25, 0xFF	; 255
    1536:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
						vMotor(10,-10,false);
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	66 ef       	ldi	r22, 0xF6	; 246
    153e:	7f ef       	ldi	r23, 0xFF	; 255
    1540:	ce 01       	movw	r24, r28
    1542:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
						break;
				}				
				if(cnt_int1 > 150){
    1546:	80 91 ed 01 	lds	r24, 0x01ED
    154a:	90 91 ee 01 	lds	r25, 0x01EE
    154e:	87 39       	cpi	r24, 0x97	; 151
    1550:	91 05       	cpc	r25, r1
    1552:	0c f4       	brge	.+2      	; 0x1556 <vRuning+0x4d8>
    1554:	c4 cd       	rjmp	.-1144   	; 0x10de <vRuning+0x60>
					pattern = CAR_CROSS_LINE + 2;
    1556:	86 e1       	ldi	r24, 0x16	; 22
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	90 93 ec 01 	sts	0x01EC, r25
    155e:	80 93 eb 01 	sts	0x01EB, r24
    1562:	bd cd       	rjmp	.-1158   	; 0x10de <vRuning+0x60>
				}
				break;
			case (CAR_CROSS_LINE + 2)://nhan tin hieu va queo
				followLineAfterSignal(20,true);
    1564:	61 e0       	ldi	r22, 0x01	; 1
    1566:	84 e1       	ldi	r24, 0x14	; 20
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 94 07 	call	0xf28	; 0xf28 <followLineAfterSignal>
				if(ucGetSensorData(0x70) == 0x70){//0 xxx 0 000
    156e:	80 e7       	ldi	r24, 0x70	; 112
    1570:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
    1574:	80 37       	cpi	r24, 0x70	; 112
    1576:	51 f4       	brne	.+20     	; 0x158c <vRuning+0x50e>
					cnt_timer_1ms = 0;
    1578:	10 92 f0 01 	sts	0x01F0, r1
    157c:	10 92 ef 01 	sts	0x01EF, r1
					pattern = CAR_TURN_LEFT;					
    1580:	8e e1       	ldi	r24, 0x1E	; 30
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	90 93 ec 01 	sts	0x01EC, r25
    1588:	80 93 eb 01 	sts	0x01EB, r24
				}
				if(ucGetSensorData(0x07) == 0x07){//0 000 0 xxx
    158c:	87 e0       	ldi	r24, 0x07	; 7
    158e:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
    1592:	87 30       	cpi	r24, 0x07	; 7
    1594:	09 f0       	breq	.+2      	; 0x1598 <vRuning+0x51a>
    1596:	a3 cd       	rjmp	.-1210   	; 0x10de <vRuning+0x60>
					cnt_timer_1ms = 0;
    1598:	10 92 f0 01 	sts	0x01F0, r1
    159c:	10 92 ef 01 	sts	0x01EF, r1
					pattern = CAR_TURN_RIGHT;
    15a0:	88 e2       	ldi	r24, 0x28	; 40
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	90 93 ec 01 	sts	0x01EC, r25
    15a8:	80 93 eb 01 	sts	0x01EB, r24
    15ac:	98 cd       	rjmp	.-1232   	; 0x10de <vRuning+0x60>
				}
				break;
//Car turn right
			case CAR_TURN_RIGHT: // 30
				vOutLed7(CAR_TURN_RIGHT);
    15ae:	88 e2       	ldi	r24, 0x28	; 40
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 cd 01 	call	0x39a	; 0x39a <vOutLed7>
				
				vServo(60);
    15b6:	8c e3       	ldi	r24, 0x3C	; 60
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
				vMotor(60,-20,false);
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	6c ee       	ldi	r22, 0xEC	; 236
    15c2:	7f ef       	ldi	r23, 0xFF	; 255
    15c4:	8c e3       	ldi	r24, 0x3C	; 60
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
			
				pattern = CAR_TURN_RIGHT + 1;
    15cc:	f0 92 ec 01 	sts	0x01EC, r15
    15d0:	e0 92 eb 01 	sts	0x01EB, r14
				cnt_timer_1ms = 0;
    15d4:	10 92 f0 01 	sts	0x01F0, r1
    15d8:	10 92 ef 01 	sts	0x01EF, r1
			break;
    15dc:	80 cd       	rjmp	.-1280   	; 0x10de <vRuning+0x60>
			case (CAR_TURN_RIGHT + 1) :
				if(cnt_timer_1ms > 60){
    15de:	80 91 ef 01 	lds	r24, 0x01EF
    15e2:	90 91 f0 01 	lds	r25, 0x01F0
    15e6:	cd 97       	sbiw	r24, 0x3d	; 61
    15e8:	08 f4       	brcc	.+2      	; 0x15ec <vRuning+0x56e>
    15ea:	79 cd       	rjmp	.-1294   	; 0x10de <vRuning+0x60>
					pattern = CAR_TURN_RIGHT + 2;
    15ec:	d0 92 ec 01 	sts	0x01EC, r13
    15f0:	c0 92 eb 01 	sts	0x01EB, r12
    15f4:	74 cd       	rjmp	.-1304   	; 0x10de <vRuning+0x60>
				}
				break;
			case (CAR_TURN_RIGHT + 2):
				if(ucGetSensorData(0x77) == 0x02){ // 0 xxx 0 xxx. 0 000 0 011
    15f6:	87 e7       	ldi	r24, 0x77	; 119
    15f8:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
    15fc:	82 30       	cpi	r24, 0x02	; 2
    15fe:	09 f0       	breq	.+2      	; 0x1602 <vRuning+0x584>
    1600:	6e cd       	rjmp	.-1316   	; 0x10de <vRuning+0x60>
					pattern = CAR_NORMAL_TRACE;
    1602:	d0 93 ec 01 	sts	0x01EC, r29
    1606:	c0 93 eb 01 	sts	0x01EB, r28
					cnt_timer_1ms = 0;
    160a:	10 92 f0 01 	sts	0x01F0, r1
    160e:	10 92 ef 01 	sts	0x01EF, r1
					vSetBF(false,false);
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	0e 94 60 03 	call	0x6c0	; 0x6c0 <vSetBF>
    161a:	61 cd       	rjmp	.-1342   	; 0x10de <vRuning+0x60>
				}
				break;
//Car turn left
			case CAR_TURN_LEFT: // 30
				vOutLed7(CAR_TURN_LEFT);
    161c:	8e e1       	ldi	r24, 0x1E	; 30
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	0e 94 cd 01 	call	0x39a	; 0x39a <vOutLed7>
				
				vServo(-60);
    1624:	84 ec       	ldi	r24, 0xC4	; 196
    1626:	9f ef       	ldi	r25, 0xFF	; 255
    1628:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
				vMotor(-20,60,false);
    162c:	40 e0       	ldi	r20, 0x00	; 0
    162e:	6c e3       	ldi	r22, 0x3C	; 60
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	8c ee       	ldi	r24, 0xEC	; 236
    1634:	9f ef       	ldi	r25, 0xFF	; 255
    1636:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
				
				pattern = CAR_TURN_LEFT + 1;
    163a:	b0 92 ec 01 	sts	0x01EC, r11
    163e:	a0 92 eb 01 	sts	0x01EB, r10
				cnt_timer_1ms = 0;
    1642:	10 92 f0 01 	sts	0x01F0, r1
    1646:	10 92 ef 01 	sts	0x01EF, r1
				break;
    164a:	49 cd       	rjmp	.-1390   	; 0x10de <vRuning+0x60>
			case (CAR_TURN_LEFT + 1) :
				if(cnt_timer_1ms > 60){
    164c:	80 91 ef 01 	lds	r24, 0x01EF
    1650:	90 91 f0 01 	lds	r25, 0x01F0
    1654:	cd 97       	sbiw	r24, 0x3d	; 61
    1656:	08 f4       	brcc	.+2      	; 0x165a <vRuning+0x5dc>
    1658:	42 cd       	rjmp	.-1404   	; 0x10de <vRuning+0x60>
					pattern = CAR_TURN_LEFT + 2;
    165a:	90 92 ec 01 	sts	0x01EC, r9
    165e:	80 92 eb 01 	sts	0x01EB, r8
    1662:	3d cd       	rjmp	.-1414   	; 0x10de <vRuning+0x60>
				}
				break;
			case (CAR_TURN_LEFT + 2):
				if(ucGetSensorData(0x77) == 0x60){ // 0 xxx 0 xxx
    1664:	87 e7       	ldi	r24, 0x77	; 119
    1666:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
    166a:	80 36       	cpi	r24, 0x60	; 96
    166c:	09 f0       	breq	.+2      	; 0x1670 <vRuning+0x5f2>
    166e:	37 cd       	rjmp	.-1426   	; 0x10de <vRuning+0x60>
					pattern = CAR_NORMAL_TRACE;
    1670:	d0 93 ec 01 	sts	0x01EC, r29
    1674:	c0 93 eb 01 	sts	0x01EB, r28
					cnt_timer_1ms = 0;
    1678:	10 92 f0 01 	sts	0x01F0, r1
    167c:	10 92 ef 01 	sts	0x01EF, r1
					vSetBF(false,false);
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	0e 94 60 03 	call	0x6c0	; 0x6c0 <vSetBF>
    1688:	2a cd       	rjmp	.-1452   	; 0x10de <vRuning+0x60>
				}
				break;
//Right line - chuyen lan		
			case CAR_RIGHT_LINE://(case 51) 0 000 1 111
				while(cnt_timer_1ms < 1);
    168a:	80 91 ef 01 	lds	r24, 0x01EF
    168e:	90 91 f0 01 	lds	r25, 0x01F0
    1692:	89 2b       	or	r24, r25
    1694:	d1 f3       	breq	.-12     	; 0x168a <vRuning+0x60c>
				if(check_crossline(CHECK_FROM_RIGHT)){
    1696:	82 e0       	ldi	r24, 0x02	; 2
    1698:	0e 94 7a 07 	call	0xef4	; 0xef4 <check_crossline>
    169c:	89 2b       	or	r24, r25
    169e:	51 f0       	breq	.+20     	; 0x16b4 <vRuning+0x636>
					cnt_timer_1ms = 0;
    16a0:	10 92 f0 01 	sts	0x01F0, r1
    16a4:	10 92 ef 01 	sts	0x01EF, r1
					pattern = CAR_CROSS_LINE;
    16a8:	84 e1       	ldi	r24, 0x14	; 20
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	90 93 ec 01 	sts	0x01EC, r25
    16b0:	80 93 eb 01 	sts	0x01EB, r24
				}
				if(cnt_timer_1ms > 50)//50ms
    16b4:	80 91 ef 01 	lds	r24, 0x01EF
    16b8:	90 91 f0 01 	lds	r25, 0x01F0
    16bc:	c3 97       	sbiw	r24, 0x33	; 51
    16be:	08 f4       	brcc	.+2      	; 0x16c2 <vRuning+0x644>
    16c0:	0e cd       	rjmp	.-1508   	; 0x10de <vRuning+0x60>
					pattern = CAR_RIGHT_LINE + 1;
    16c2:	70 92 ec 01 	sts	0x01EC, r7
    16c6:	60 92 eb 01 	sts	0x01EB, r6
    16ca:	09 cd       	rjmp	.-1518   	; 0x10de <vRuning+0x60>
				break;	
			case (CAR_RIGHT_LINE + 1)://is right line, chuyen lan trai
				vSetBF(true,true);
    16cc:	61 e0       	ldi	r22, 0x01	; 1
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	0e 94 60 03 	call	0x6c0	; 0x6c0 <vSetBF>
				followLineAfterSignal(60,true);
    16d4:	61 e0       	ldi	r22, 0x01	; 1
    16d6:	8c e3       	ldi	r24, 0x3C	; 60
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 94 07 	call	0xf28	; 0xf28 <followLineAfterSignal>
				if(cnt_int1 > 140){
    16de:	80 91 ed 01 	lds	r24, 0x01ED
    16e2:	90 91 ee 01 	lds	r25, 0x01EE
    16e6:	8d 38       	cpi	r24, 0x8D	; 141
    16e8:	91 05       	cpc	r25, r1
    16ea:	0c f4       	brge	.+2      	; 0x16ee <vRuning+0x670>
    16ec:	f8 cc       	rjmp	.-1552   	; 0x10de <vRuning+0x60>
					pattern = CAR_RIGHT_LINE + 2;
    16ee:	50 92 ec 01 	sts	0x01EC, r5
    16f2:	40 92 eb 01 	sts	0x01EB, r4
					vSetBF(false,false);
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	0e 94 60 03 	call	0x6c0	; 0x6c0 <vSetBF>
    16fe:	ef cc       	rjmp	.-1570   	; 0x10de <vRuning+0x60>
				}
				break;
			case (CAR_RIGHT_LINE + 2):
				vServo(38);
    1700:	86 e2       	ldi	r24, 0x26	; 38
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
				vMotor(15,15,true);
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	6f e0       	ldi	r22, 0x0F	; 15
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	8f e0       	ldi	r24, 0x0F	; 15
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
				if(ucGetSensorData(0x01) == 0x01){//0 000 0 00x
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	09 f0       	breq	.+2      	; 0x1722 <vRuning+0x6a4>
    1720:	de cc       	rjmp	.-1604   	; 0x10de <vRuning+0x60>
					vServo(10);
    1722:	ce 01       	movw	r24, r28
    1724:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
					pattern = CAR_RIGHT_LINE + 3;
    1728:	30 92 ec 01 	sts	0x01EC, r3
    172c:	20 92 eb 01 	sts	0x01EB, r2
    1730:	d6 cc       	rjmp	.-1620   	; 0x10de <vRuning+0x60>
				}
				break;
			case (CAR_RIGHT_LINE + 3):
				vMotor(20,20,true);
    1732:	41 e0       	ldi	r20, 0x01	; 1
    1734:	64 e1       	ldi	r22, 0x14	; 20
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	84 e1       	ldi	r24, 0x14	; 20
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
				if(ucGetSensorData(0x08) == 0x08){//0 000 x 000
    1740:	88 e0       	ldi	r24, 0x08	; 8
    1742:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
    1746:	88 30       	cpi	r24, 0x08	; 8
    1748:	09 f0       	breq	.+2      	; 0x174c <vRuning+0x6ce>
    174a:	c9 cc       	rjmp	.-1646   	; 0x10de <vRuning+0x60>
					vServo(-20);
    174c:	8c ee       	ldi	r24, 0xEC	; 236
    174e:	9f ef       	ldi	r25, 0xFF	; 255
    1750:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
					cnt_timer_1ms = 0;
    1754:	10 92 f0 01 	sts	0x01F0, r1
    1758:	10 92 ef 01 	sts	0x01EF, r1
					while(cnt_timer_1ms < 1);
    175c:	80 91 ef 01 	lds	r24, 0x01EF
    1760:	90 91 f0 01 	lds	r25, 0x01F0
    1764:	89 2b       	or	r24, r25
    1766:	d1 f3       	breq	.-12     	; 0x175c <vRuning+0x6de>
					pattern = CAR_RIGHT_LINE + 4;
    1768:	87 e3       	ldi	r24, 0x37	; 55
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	90 93 ec 01 	sts	0x01EC, r25
    1770:	80 93 eb 01 	sts	0x01EB, r24
    1774:	b4 cc       	rjmp	.-1688   	; 0x10de <vRuning+0x60>
				}
				break;
			case (CAR_RIGHT_LINE + 4):
				vServo(-30);
    1776:	82 ee       	ldi	r24, 0xE2	; 226
    1778:	9f ef       	ldi	r25, 0xFF	; 255
    177a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
				while(cnt_timer_1ms < 5);
    177e:	80 91 ef 01 	lds	r24, 0x01EF
    1782:	90 91 f0 01 	lds	r25, 0x01F0
    1786:	05 97       	sbiw	r24, 0x05	; 5
    1788:	d0 f3       	brcs	.-12     	; 0x177e <vRuning+0x700>
				pattern = CAR_NORMAL_TRACE;
    178a:	d0 93 ec 01 	sts	0x01EC, r29
    178e:	c0 93 eb 01 	sts	0x01EB, r28
				break;				
    1792:	a5 cc       	rjmp	.-1718   	; 0x10de <vRuning+0x60>
			
//Left line			
			case CAR_LEFT_LINE:// (case 61) 0 111 1 000		
				//check cross line
				if(check_crossline(CHECK_FROM_LEFT)){
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	0e 94 7a 07 	call	0xef4	; 0xef4 <check_crossline>
    179a:	89 2b       	or	r24, r25
    179c:	51 f0       	breq	.+20     	; 0x17b2 <vRuning+0x734>
					cnt_timer_1ms = 0;
    179e:	10 92 f0 01 	sts	0x01F0, r1
    17a2:	10 92 ef 01 	sts	0x01EF, r1
					pattern = CAR_CROSS_LINE;
    17a6:	84 e1       	ldi	r24, 0x14	; 20
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	90 93 ec 01 	sts	0x01EC, r25
    17ae:	80 93 eb 01 	sts	0x01EB, r24
				}
				if(cnt_timer_1ms > 50){//50ms
    17b2:	80 91 ef 01 	lds	r24, 0x01EF
    17b6:	90 91 f0 01 	lds	r25, 0x01F0
    17ba:	c3 97       	sbiw	r24, 0x33	; 51
    17bc:	08 f4       	brcc	.+2      	; 0x17c0 <vRuning+0x742>
    17be:	8f cc       	rjmp	.-1762   	; 0x10de <vRuning+0x60>
					vLedCtrl(LED_STARTUP_COMPELETE);
    17c0:	84 e0       	ldi	r24, 0x04	; 4
    17c2:	0e 94 c1 06 	call	0xd82	; 0xd82 <vLedCtrl>
					pattern = CAR_LEFT_LINE + 1;
    17c6:	10 93 ec 01 	sts	0x01EC, r17
    17ca:	00 93 eb 01 	sts	0x01EB, r16
					cnt_int1 = 0;
    17ce:	10 92 ee 01 	sts	0x01EE, r1
    17d2:	10 92 ed 01 	sts	0x01ED, r1
    17d6:	83 cc       	rjmp	.-1786   	; 0x10de <vRuning+0x60>
				}
				break;

			case (CAR_LEFT_LINE + 1)://is right line, chuyen lan trai				
				vSetBF(true,true);
    17d8:	61 e0       	ldi	r22, 0x01	; 1
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	0e 94 60 03 	call	0x6c0	; 0x6c0 <vSetBF>
				followLineAfterSignal(60,true);
    17e0:	61 e0       	ldi	r22, 0x01	; 1
    17e2:	8c e3       	ldi	r24, 0x3C	; 60
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 94 07 	call	0xf28	; 0xf28 <followLineAfterSignal>
				if(cnt_int1 > 140){
    17ea:	80 91 ed 01 	lds	r24, 0x01ED
    17ee:	90 91 ee 01 	lds	r25, 0x01EE
    17f2:	8d 38       	cpi	r24, 0x8D	; 141
    17f4:	91 05       	cpc	r25, r1
    17f6:	0c f4       	brge	.+2      	; 0x17fa <vRuning+0x77c>
    17f8:	72 cc       	rjmp	.-1820   	; 0x10de <vRuning+0x60>
					pattern = CAR_LEFT_LINE + 2;
    17fa:	8f e3       	ldi	r24, 0x3F	; 63
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	90 93 ec 01 	sts	0x01EC, r25
    1802:	80 93 eb 01 	sts	0x01EB, r24
					vSetBF(false,false);
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <vSetBF>
    180e:	67 cc       	rjmp	.-1842   	; 0x10de <vRuning+0x60>
				}
				break;
			case (CAR_LEFT_LINE + 2):
				vServo(-38);
    1810:	8a ed       	ldi	r24, 0xDA	; 218
    1812:	9f ef       	ldi	r25, 0xFF	; 255
    1814:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
				vMotor(15,15,true);
    1818:	41 e0       	ldi	r20, 0x01	; 1
    181a:	6f e0       	ldi	r22, 0x0F	; 15
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	8f e0       	ldi	r24, 0x0F	; 15
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
				if(ucGetSensorData(0x40) == 0x40){//0 x00 0 000
    1826:	80 e4       	ldi	r24, 0x40	; 64
    1828:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
    182c:	80 34       	cpi	r24, 0x40	; 64
    182e:	09 f0       	breq	.+2      	; 0x1832 <vRuning+0x7b4>
    1830:	56 cc       	rjmp	.-1876   	; 0x10de <vRuning+0x60>
					vServo(-10);
    1832:	86 ef       	ldi	r24, 0xF6	; 246
    1834:	9f ef       	ldi	r25, 0xFF	; 255
    1836:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
					pattern = CAR_LEFT_LINE + 3;
    183a:	80 e4       	ldi	r24, 0x40	; 64
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	90 93 ec 01 	sts	0x01EC, r25
    1842:	80 93 eb 01 	sts	0x01EB, r24
    1846:	4b cc       	rjmp	.-1898   	; 0x10de <vRuning+0x60>
				}
				break;
			case (CAR_LEFT_LINE + 3):
				vMotor(20,20,true);
    1848:	41 e0       	ldi	r20, 0x01	; 1
    184a:	64 e1       	ldi	r22, 0x14	; 20
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	84 e1       	ldi	r24, 0x14	; 20
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
				if(ucGetSensorData(0x08) == 0x08){//0 000 x 000
    1856:	88 e0       	ldi	r24, 0x08	; 8
    1858:	0e 94 6f 04 	call	0x8de	; 0x8de <ucGetSensorData>
    185c:	88 30       	cpi	r24, 0x08	; 8
    185e:	09 f0       	breq	.+2      	; 0x1862 <vRuning+0x7e4>
    1860:	3e cc       	rjmp	.-1924   	; 0x10de <vRuning+0x60>
					vServo(20);
    1862:	84 e1       	ldi	r24, 0x14	; 20
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
					cnt_timer_1ms = 0;
    186a:	10 92 f0 01 	sts	0x01F0, r1
    186e:	10 92 ef 01 	sts	0x01EF, r1
					while(cnt_timer_1ms < 1);
    1872:	80 91 ef 01 	lds	r24, 0x01EF
    1876:	90 91 f0 01 	lds	r25, 0x01F0
    187a:	89 2b       	or	r24, r25
    187c:	d1 f3       	breq	.-12     	; 0x1872 <vRuning+0x7f4>
					pattern = CAR_LEFT_LINE + 4;
    187e:	81 e4       	ldi	r24, 0x41	; 65
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	90 93 ec 01 	sts	0x01EC, r25
    1886:	80 93 eb 01 	sts	0x01EB, r24
    188a:	29 cc       	rjmp	.-1966   	; 0x10de <vRuning+0x60>
				}
				break;
			case (CAR_LEFT_LINE + 4):
				vServo(30);
    188c:	8e e1       	ldi	r24, 0x1E	; 30
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
				while(cnt_timer_1ms < 5);
    1894:	80 91 ef 01 	lds	r24, 0x01EF
    1898:	90 91 f0 01 	lds	r25, 0x01F0
    189c:	05 97       	sbiw	r24, 0x05	; 5
    189e:	d0 f3       	brcs	.-12     	; 0x1894 <vRuning+0x816>
				pattern = CAR_NORMAL_TRACE;
    18a0:	d0 93 ec 01 	sts	0x01EC, r29
    18a4:	c0 93 eb 01 	sts	0x01EB, r28
				break;
    18a8:	1a cc       	rjmp	.-1996   	; 0x10de <vRuning+0x60>
			default:
			/* When the pattern is not applied to any case, return to waiting state */
			vOutLed7(0);
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	0e 94 cd 01 	call	0x39a	; 0x39a <vOutLed7>
			vLedCtrl(LED_FAST_BLINK);
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	0e 94 c1 06 	call	0xd82	; 0xd82 <vLedCtrl>
    18b8:	ff cf       	rjmp	.-2      	; 0x18b8 <vRuning+0x83a>

000018ba <main>:
	}
	
}
int main(void)
{
	uint8_t *ucBuff = (uint8_t*)calloc(DEBUG_BUFF_SIZE,sizeof(uint8_t));
    18ba:	61 e0       	ldi	r22, 0x01	; 1
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	80 e4       	ldi	r24, 0x40	; 64
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <calloc>
    18c6:	ec 01       	movw	r28, r24
	int iSensorData = 0;
	vInitProgram();	
    18c8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <vInitProgram>
    18cc:	2f ef       	ldi	r18, 0xFF	; 255
    18ce:	8e e9       	ldi	r24, 0x9E	; 158
    18d0:	94 e2       	ldi	r25, 0x24	; 36
    18d2:	21 50       	subi	r18, 0x01	; 1
    18d4:	80 40       	sbci	r24, 0x00	; 0
    18d6:	90 40       	sbci	r25, 0x00	; 0
    18d8:	e1 f7       	brne	.-8      	; 0x18d2 <main+0x18>
    18da:	00 c0       	rjmp	.+0      	; 0x18dc <main+0x22>
    18dc:	00 00       	nop
	_delay_ms(1000);//waiting for slaver ready, remove it ...
	/**
	       vOutLed7(1234);		// Xuat so 1234		   
		   vBeep(100);			// Phat ra tieng beeep 100 ms
	*/	
    vOutLed7(1234);
    18de:	82 ed       	ldi	r24, 0xD2	; 210
    18e0:	94 e0       	ldi	r25, 0x04	; 4
    18e2:	0e 94 cd 01 	call	0x39a	; 0x39a <vOutLed7>
	vBeep(100);	
    18e6:	84 e6       	ldi	r24, 0x64	; 100
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	0e 94 11 02 	call	0x422	; 0x422 <vBeep>
	vMotor(0,0,false);
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <vMotor>
	vServo(0);
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vServo>
	while(1)
    {       	
		if(isTester()){//Get switch tester
    1904:	0e 94 76 03 	call	0x6ec	; 0x6ec <isTester>
    1908:	88 23       	and	r24, r24
    190a:	a9 f1       	breq	.+106    	; 0x1976 <main+0xbc>
			vOutLed7(ucGetSwitch());
    190c:	0e 94 df 02 	call	0x5be	; 0x5be <ucGetSwitch>
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 cd 01 	call	0x39a	; 0x39a <vOutLed7>
			bDebugProcess();
    1916:	0e 94 9e 00 	call	0x13c	; 0x13c <bDebugProcess>
			if(bMsgIsOK()){
    191a:	0e 94 0f 01 	call	0x21e	; 0x21e <bMsgIsOK>
    191e:	88 23       	and	r24, r24
    1920:	d1 f0       	breq	.+52     	; 0x1956 <main+0x9c>
				switch (ucGetCMDInfo())
    1922:	0e 94 19 01 	call	0x232	; 0x232 <ucGetCMDInfo>
    1926:	82 30       	cpi	r24, 0x02	; 2
    1928:	b1 f4       	brne	.+44     	; 0x1956 <main+0x9c>
				{
					case CMD_SENSOR:
					vSetCMDInfo(CMD_NONE);
    192a:	83 e0       	ldi	r24, 0x03	; 3
    192c:	0e 94 1c 01 	call	0x238	; 0x238 <vSetCMDInfo>
					ucGetData(ucBuff);
    1930:	ce 01       	movw	r24, r28
    1932:	0e 94 1f 01 	call	0x23e	; 0x23e <ucGetData>
					if (ucBuff[0] == 1){//negative
    1936:	88 81       	ld	r24, Y
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	31 f4       	brne	.+12     	; 0x1948 <main+0x8e>
						iSensorData = -ucBuff[1];
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	90 e0       	ldi	r25, 0x00	; 0
						vOutLed7((-iSensorData + 1000));
    1940:	88 51       	subi	r24, 0x18	; 24
    1942:	9c 4f       	sbci	r25, 0xFC	; 252
    1944:	0e 94 cd 01 	call	0x39a	; 0x39a <vOutLed7>
					}
					if(ucBuff[0] == 0){
    1948:	88 81       	ld	r24, Y
    194a:	81 11       	cpse	r24, r1
    194c:	04 c0       	rjmp	.+8      	; 0x1956 <main+0x9c>
						iSensorData = ucBuff[1];
						vOutLed7(iSensorData);
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 cd 01 	call	0x39a	; 0x39a <vOutLed7>
					break;
					default: break;
				}
			}
			
			if(bKeyIsPress(KEY2)){
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	0e 94 b3 02 	call	0x566	; 0x566 <bKeyIsPress>
    195c:	88 23       	and	r24, r24
    195e:	19 f0       	breq	.+6      	; 0x1966 <main+0xac>
				vLedCtrl(LED_STARTUP_COMPELETE);
    1960:	84 e0       	ldi	r24, 0x04	; 4
    1962:	0e 94 c1 06 	call	0xd82	; 0xd82 <vLedCtrl>
			}
			if(bStartBarIsStart()){
    1966:	0e 94 76 04 	call	0x8ec	; 0x8ec <bStartBarIsStart>
    196a:	88 23       	and	r24, r24
    196c:	59 f2       	breq	.-106    	; 0x1904 <main+0x4a>
				vLedCtrl(LED_STARTUP_COMPELETE); //Fix me
    196e:	84 e0       	ldi	r24, 0x04	; 4
    1970:	0e 94 c1 06 	call	0xd82	; 0xd82 <vLedCtrl>
    1974:	c7 cf       	rjmp	.-114    	; 0x1904 <main+0x4a>
			}
		}//end tester
		else{//normal running
			if(bKeyIsPress(KEY2)){//Key 2 learn color, and run
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	0e 94 b3 02 	call	0x566	; 0x566 <bKeyIsPress>
    197c:	88 23       	and	r24, r24
    197e:	21 f0       	breq	.+8      	; 0x1988 <main+0xce>
				vLearnColor();			
    1980:	0e 94 85 03 	call	0x70a	; 0x70a <vLearnColor>
				vRuning();
    1984:	0e 94 3f 08 	call	0x107e	; 0x107e <vRuning>
			}//end Key 2 learn color, and run
			if(bKeyIsPress(KEY1)){//Load epprom and run
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	0e 94 b3 02 	call	0x566	; 0x566 <bKeyIsPress>
    198e:	88 23       	and	r24, r24
    1990:	09 f4       	brne	.+2      	; 0x1994 <main+0xda>
    1992:	b8 cf       	rjmp	.-144    	; 0x1904 <main+0x4a>
				vLoadE2P();
    1994:	0e 94 80 04 	call	0x900	; 0x900 <vLoadE2P>
					vOutLed7(ucGetSensorData(0xff));
					_delay_ms(100);
					
				}//end while 1
				#endif
				vRuning();
    1998:	0e 94 3f 08 	call	0x107e	; 0x107e <vRuning>

0000199c <__vector_9>:
	return ret;
}

// [Vo Huu Tai 20/8/2015 ]  ISR here
ISR(TIMER0_OVF_vect)
{
    199c:	1f 92       	push	r1
    199e:	0f 92       	push	r0
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	0f 92       	push	r0
    19a4:	11 24       	eor	r1, r1
    19a6:	2f 93       	push	r18
    19a8:	3f 93       	push	r19
    19aa:	4f 93       	push	r20
    19ac:	5f 93       	push	r21
    19ae:	6f 93       	push	r22
    19b0:	7f 93       	push	r23
    19b2:	8f 93       	push	r24
    19b4:	9f 93       	push	r25
    19b6:	af 93       	push	r26
    19b8:	bf 93       	push	r27
    19ba:	ef 93       	push	r30
    19bc:	ff 93       	push	r31
	TCNT0 = 68;	//~1ms
    19be:	84 e4       	ldi	r24, 0x44	; 68
    19c0:	82 bf       	out	0x32, r24	; 50
	//Add more cnt here..
	cnt_timer_1ms++;
    19c2:	80 91 ef 01 	lds	r24, 0x01EF
    19c6:	90 91 f0 01 	lds	r25, 0x01F0
    19ca:	01 96       	adiw	r24, 0x01	; 1
    19cc:	90 93 f0 01 	sts	0x01F0, r25
    19d0:	80 93 ef 01 	sts	0x01EF, r24
	vAssassin();
    19d4:	0e 94 5d 07 	call	0xeba	; 0xeba <vAssassin>
}
    19d8:	ff 91       	pop	r31
    19da:	ef 91       	pop	r30
    19dc:	bf 91       	pop	r27
    19de:	af 91       	pop	r26
    19e0:	9f 91       	pop	r25
    19e2:	8f 91       	pop	r24
    19e4:	7f 91       	pop	r23
    19e6:	6f 91       	pop	r22
    19e8:	5f 91       	pop	r21
    19ea:	4f 91       	pop	r20
    19ec:	3f 91       	pop	r19
    19ee:	2f 91       	pop	r18
    19f0:	0f 90       	pop	r0
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	0f 90       	pop	r0
    19f6:	1f 90       	pop	r1
    19f8:	18 95       	reti

000019fa <__vector_2>:
volatile int cnt_temp = 0;
ISR(INT1_vect){//encoder interrupt
    19fa:	1f 92       	push	r1
    19fc:	0f 92       	push	r0
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	0f 92       	push	r0
    1a02:	11 24       	eor	r1, r1
    1a04:	2f 93       	push	r18
    1a06:	3f 93       	push	r19
    1a08:	4f 93       	push	r20
    1a0a:	5f 93       	push	r21
    1a0c:	6f 93       	push	r22
    1a0e:	7f 93       	push	r23
    1a10:	8f 93       	push	r24
    1a12:	9f 93       	push	r25
    1a14:	af 93       	push	r26
    1a16:	bf 93       	push	r27
    1a18:	ef 93       	push	r30
    1a1a:	ff 93       	push	r31
	vIncPulse();
    1a1c:	0e 94 a2 04 	call	0x944	; 0x944 <vIncPulse>
	cnt_int1++;
    1a20:	80 91 ed 01 	lds	r24, 0x01ED
    1a24:	90 91 ee 01 	lds	r25, 0x01EE
    1a28:	01 96       	adiw	r24, 0x01	; 1
    1a2a:	90 93 ee 01 	sts	0x01EE, r25
    1a2e:	80 93 ed 01 	sts	0x01ED, r24
	if((ucGetSwitch()&0x1) == 0x1)
    1a32:	0e 94 df 02 	call	0x5be	; 0x5be <ucGetSwitch>
    1a36:	80 ff       	sbrs	r24, 0
    1a38:	0d c0       	rjmp	.+26     	; 0x1a54 <__vector_2+0x5a>
	vOutLed7(cnt_temp++);
    1a3a:	80 91 e8 01 	lds	r24, 0x01E8
    1a3e:	90 91 e9 01 	lds	r25, 0x01E9
    1a42:	9c 01       	movw	r18, r24
    1a44:	2f 5f       	subi	r18, 0xFF	; 255
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	30 93 e9 01 	sts	0x01E9, r19
    1a4c:	20 93 e8 01 	sts	0x01E8, r18
    1a50:	0e 94 cd 01 	call	0x39a	; 0x39a <vOutLed7>
}	
    1a54:	ff 91       	pop	r31
    1a56:	ef 91       	pop	r30
    1a58:	bf 91       	pop	r27
    1a5a:	af 91       	pop	r26
    1a5c:	9f 91       	pop	r25
    1a5e:	8f 91       	pop	r24
    1a60:	7f 91       	pop	r23
    1a62:	6f 91       	pop	r22
    1a64:	5f 91       	pop	r21
    1a66:	4f 91       	pop	r20
    1a68:	3f 91       	pop	r19
    1a6a:	2f 91       	pop	r18
    1a6c:	0f 90       	pop	r0
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	0f 90       	pop	r0
    1a72:	1f 90       	pop	r1
    1a74:	18 95       	reti

00001a76 <__subsf3>:
    1a76:	50 58       	subi	r21, 0x80	; 128

00001a78 <__addsf3>:
    1a78:	bb 27       	eor	r27, r27
    1a7a:	aa 27       	eor	r26, r26
    1a7c:	0e d0       	rcall	.+28     	; 0x1a9a <__addsf3x>
    1a7e:	0d c1       	rjmp	.+538    	; 0x1c9a <__fp_round>
    1a80:	fe d0       	rcall	.+508    	; 0x1c7e <__fp_pscA>
    1a82:	30 f0       	brcs	.+12     	; 0x1a90 <__addsf3+0x18>
    1a84:	03 d1       	rcall	.+518    	; 0x1c8c <__fp_pscB>
    1a86:	20 f0       	brcs	.+8      	; 0x1a90 <__addsf3+0x18>
    1a88:	31 f4       	brne	.+12     	; 0x1a96 <__addsf3+0x1e>
    1a8a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a8c:	11 f4       	brne	.+4      	; 0x1a92 <__addsf3+0x1a>
    1a8e:	1e f4       	brtc	.+6      	; 0x1a96 <__addsf3+0x1e>
    1a90:	f3 c0       	rjmp	.+486    	; 0x1c78 <__fp_nan>
    1a92:	0e f4       	brtc	.+2      	; 0x1a96 <__addsf3+0x1e>
    1a94:	e0 95       	com	r30
    1a96:	e7 fb       	bst	r30, 7
    1a98:	e9 c0       	rjmp	.+466    	; 0x1c6c <__fp_inf>

00001a9a <__addsf3x>:
    1a9a:	e9 2f       	mov	r30, r25
    1a9c:	0f d1       	rcall	.+542    	; 0x1cbc <__fp_split3>
    1a9e:	80 f3       	brcs	.-32     	; 0x1a80 <__addsf3+0x8>
    1aa0:	ba 17       	cp	r27, r26
    1aa2:	62 07       	cpc	r22, r18
    1aa4:	73 07       	cpc	r23, r19
    1aa6:	84 07       	cpc	r24, r20
    1aa8:	95 07       	cpc	r25, r21
    1aaa:	18 f0       	brcs	.+6      	; 0x1ab2 <__addsf3x+0x18>
    1aac:	71 f4       	brne	.+28     	; 0x1aca <__addsf3x+0x30>
    1aae:	9e f5       	brtc	.+102    	; 0x1b16 <__addsf3x+0x7c>
    1ab0:	27 c1       	rjmp	.+590    	; 0x1d00 <__fp_zero>
    1ab2:	0e f4       	brtc	.+2      	; 0x1ab6 <__addsf3x+0x1c>
    1ab4:	e0 95       	com	r30
    1ab6:	0b 2e       	mov	r0, r27
    1ab8:	ba 2f       	mov	r27, r26
    1aba:	a0 2d       	mov	r26, r0
    1abc:	0b 01       	movw	r0, r22
    1abe:	b9 01       	movw	r22, r18
    1ac0:	90 01       	movw	r18, r0
    1ac2:	0c 01       	movw	r0, r24
    1ac4:	ca 01       	movw	r24, r20
    1ac6:	a0 01       	movw	r20, r0
    1ac8:	11 24       	eor	r1, r1
    1aca:	ff 27       	eor	r31, r31
    1acc:	59 1b       	sub	r21, r25
    1ace:	99 f0       	breq	.+38     	; 0x1af6 <__addsf3x+0x5c>
    1ad0:	59 3f       	cpi	r21, 0xF9	; 249
    1ad2:	50 f4       	brcc	.+20     	; 0x1ae8 <__addsf3x+0x4e>
    1ad4:	50 3e       	cpi	r21, 0xE0	; 224
    1ad6:	68 f1       	brcs	.+90     	; 0x1b32 <__addsf3x+0x98>
    1ad8:	1a 16       	cp	r1, r26
    1ada:	f0 40       	sbci	r31, 0x00	; 0
    1adc:	a2 2f       	mov	r26, r18
    1ade:	23 2f       	mov	r18, r19
    1ae0:	34 2f       	mov	r19, r20
    1ae2:	44 27       	eor	r20, r20
    1ae4:	58 5f       	subi	r21, 0xF8	; 248
    1ae6:	f3 cf       	rjmp	.-26     	; 0x1ace <__addsf3x+0x34>
    1ae8:	46 95       	lsr	r20
    1aea:	37 95       	ror	r19
    1aec:	27 95       	ror	r18
    1aee:	a7 95       	ror	r26
    1af0:	f0 40       	sbci	r31, 0x00	; 0
    1af2:	53 95       	inc	r21
    1af4:	c9 f7       	brne	.-14     	; 0x1ae8 <__addsf3x+0x4e>
    1af6:	7e f4       	brtc	.+30     	; 0x1b16 <__addsf3x+0x7c>
    1af8:	1f 16       	cp	r1, r31
    1afa:	ba 0b       	sbc	r27, r26
    1afc:	62 0b       	sbc	r22, r18
    1afe:	73 0b       	sbc	r23, r19
    1b00:	84 0b       	sbc	r24, r20
    1b02:	ba f0       	brmi	.+46     	; 0x1b32 <__addsf3x+0x98>
    1b04:	91 50       	subi	r25, 0x01	; 1
    1b06:	a1 f0       	breq	.+40     	; 0x1b30 <__addsf3x+0x96>
    1b08:	ff 0f       	add	r31, r31
    1b0a:	bb 1f       	adc	r27, r27
    1b0c:	66 1f       	adc	r22, r22
    1b0e:	77 1f       	adc	r23, r23
    1b10:	88 1f       	adc	r24, r24
    1b12:	c2 f7       	brpl	.-16     	; 0x1b04 <__addsf3x+0x6a>
    1b14:	0e c0       	rjmp	.+28     	; 0x1b32 <__addsf3x+0x98>
    1b16:	ba 0f       	add	r27, r26
    1b18:	62 1f       	adc	r22, r18
    1b1a:	73 1f       	adc	r23, r19
    1b1c:	84 1f       	adc	r24, r20
    1b1e:	48 f4       	brcc	.+18     	; 0x1b32 <__addsf3x+0x98>
    1b20:	87 95       	ror	r24
    1b22:	77 95       	ror	r23
    1b24:	67 95       	ror	r22
    1b26:	b7 95       	ror	r27
    1b28:	f7 95       	ror	r31
    1b2a:	9e 3f       	cpi	r25, 0xFE	; 254
    1b2c:	08 f0       	brcs	.+2      	; 0x1b30 <__addsf3x+0x96>
    1b2e:	b3 cf       	rjmp	.-154    	; 0x1a96 <__addsf3+0x1e>
    1b30:	93 95       	inc	r25
    1b32:	88 0f       	add	r24, r24
    1b34:	08 f0       	brcs	.+2      	; 0x1b38 <__addsf3x+0x9e>
    1b36:	99 27       	eor	r25, r25
    1b38:	ee 0f       	add	r30, r30
    1b3a:	97 95       	ror	r25
    1b3c:	87 95       	ror	r24
    1b3e:	08 95       	ret

00001b40 <__cmpsf2>:
    1b40:	71 d0       	rcall	.+226    	; 0x1c24 <__fp_cmp>
    1b42:	08 f4       	brcc	.+2      	; 0x1b46 <__cmpsf2+0x6>
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	08 95       	ret

00001b48 <__fixsfsi>:
    1b48:	04 d0       	rcall	.+8      	; 0x1b52 <__fixunssfsi>
    1b4a:	68 94       	set
    1b4c:	b1 11       	cpse	r27, r1
    1b4e:	d9 c0       	rjmp	.+434    	; 0x1d02 <__fp_szero>
    1b50:	08 95       	ret

00001b52 <__fixunssfsi>:
    1b52:	bc d0       	rcall	.+376    	; 0x1ccc <__fp_splitA>
    1b54:	88 f0       	brcs	.+34     	; 0x1b78 <__fixunssfsi+0x26>
    1b56:	9f 57       	subi	r25, 0x7F	; 127
    1b58:	90 f0       	brcs	.+36     	; 0x1b7e <__fixunssfsi+0x2c>
    1b5a:	b9 2f       	mov	r27, r25
    1b5c:	99 27       	eor	r25, r25
    1b5e:	b7 51       	subi	r27, 0x17	; 23
    1b60:	a0 f0       	brcs	.+40     	; 0x1b8a <__fixunssfsi+0x38>
    1b62:	d1 f0       	breq	.+52     	; 0x1b98 <__fixunssfsi+0x46>
    1b64:	66 0f       	add	r22, r22
    1b66:	77 1f       	adc	r23, r23
    1b68:	88 1f       	adc	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	1a f0       	brmi	.+6      	; 0x1b74 <__fixunssfsi+0x22>
    1b6e:	ba 95       	dec	r27
    1b70:	c9 f7       	brne	.-14     	; 0x1b64 <__fixunssfsi+0x12>
    1b72:	12 c0       	rjmp	.+36     	; 0x1b98 <__fixunssfsi+0x46>
    1b74:	b1 30       	cpi	r27, 0x01	; 1
    1b76:	81 f0       	breq	.+32     	; 0x1b98 <__fixunssfsi+0x46>
    1b78:	c3 d0       	rcall	.+390    	; 0x1d00 <__fp_zero>
    1b7a:	b1 e0       	ldi	r27, 0x01	; 1
    1b7c:	08 95       	ret
    1b7e:	c0 c0       	rjmp	.+384    	; 0x1d00 <__fp_zero>
    1b80:	67 2f       	mov	r22, r23
    1b82:	78 2f       	mov	r23, r24
    1b84:	88 27       	eor	r24, r24
    1b86:	b8 5f       	subi	r27, 0xF8	; 248
    1b88:	39 f0       	breq	.+14     	; 0x1b98 <__fixunssfsi+0x46>
    1b8a:	b9 3f       	cpi	r27, 0xF9	; 249
    1b8c:	cc f3       	brlt	.-14     	; 0x1b80 <__fixunssfsi+0x2e>
    1b8e:	86 95       	lsr	r24
    1b90:	77 95       	ror	r23
    1b92:	67 95       	ror	r22
    1b94:	b3 95       	inc	r27
    1b96:	d9 f7       	brne	.-10     	; 0x1b8e <__fixunssfsi+0x3c>
    1b98:	3e f4       	brtc	.+14     	; 0x1ba8 <__fixunssfsi+0x56>
    1b9a:	90 95       	com	r25
    1b9c:	80 95       	com	r24
    1b9e:	70 95       	com	r23
    1ba0:	61 95       	neg	r22
    1ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba8:	08 95       	ret

00001baa <__floatunsisf>:
    1baa:	e8 94       	clt
    1bac:	09 c0       	rjmp	.+18     	; 0x1bc0 <__floatsisf+0x12>

00001bae <__floatsisf>:
    1bae:	97 fb       	bst	r25, 7
    1bb0:	3e f4       	brtc	.+14     	; 0x1bc0 <__floatsisf+0x12>
    1bb2:	90 95       	com	r25
    1bb4:	80 95       	com	r24
    1bb6:	70 95       	com	r23
    1bb8:	61 95       	neg	r22
    1bba:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc0:	99 23       	and	r25, r25
    1bc2:	a9 f0       	breq	.+42     	; 0x1bee <__floatsisf+0x40>
    1bc4:	f9 2f       	mov	r31, r25
    1bc6:	96 e9       	ldi	r25, 0x96	; 150
    1bc8:	bb 27       	eor	r27, r27
    1bca:	93 95       	inc	r25
    1bcc:	f6 95       	lsr	r31
    1bce:	87 95       	ror	r24
    1bd0:	77 95       	ror	r23
    1bd2:	67 95       	ror	r22
    1bd4:	b7 95       	ror	r27
    1bd6:	f1 11       	cpse	r31, r1
    1bd8:	f8 cf       	rjmp	.-16     	; 0x1bca <__floatsisf+0x1c>
    1bda:	fa f4       	brpl	.+62     	; 0x1c1a <__floatsisf+0x6c>
    1bdc:	bb 0f       	add	r27, r27
    1bde:	11 f4       	brne	.+4      	; 0x1be4 <__floatsisf+0x36>
    1be0:	60 ff       	sbrs	r22, 0
    1be2:	1b c0       	rjmp	.+54     	; 0x1c1a <__floatsisf+0x6c>
    1be4:	6f 5f       	subi	r22, 0xFF	; 255
    1be6:	7f 4f       	sbci	r23, 0xFF	; 255
    1be8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bea:	9f 4f       	sbci	r25, 0xFF	; 255
    1bec:	16 c0       	rjmp	.+44     	; 0x1c1a <__floatsisf+0x6c>
    1bee:	88 23       	and	r24, r24
    1bf0:	11 f0       	breq	.+4      	; 0x1bf6 <__floatsisf+0x48>
    1bf2:	96 e9       	ldi	r25, 0x96	; 150
    1bf4:	11 c0       	rjmp	.+34     	; 0x1c18 <__floatsisf+0x6a>
    1bf6:	77 23       	and	r23, r23
    1bf8:	21 f0       	breq	.+8      	; 0x1c02 <__floatsisf+0x54>
    1bfa:	9e e8       	ldi	r25, 0x8E	; 142
    1bfc:	87 2f       	mov	r24, r23
    1bfe:	76 2f       	mov	r23, r22
    1c00:	05 c0       	rjmp	.+10     	; 0x1c0c <__floatsisf+0x5e>
    1c02:	66 23       	and	r22, r22
    1c04:	71 f0       	breq	.+28     	; 0x1c22 <__floatsisf+0x74>
    1c06:	96 e8       	ldi	r25, 0x86	; 134
    1c08:	86 2f       	mov	r24, r22
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	2a f0       	brmi	.+10     	; 0x1c1a <__floatsisf+0x6c>
    1c10:	9a 95       	dec	r25
    1c12:	66 0f       	add	r22, r22
    1c14:	77 1f       	adc	r23, r23
    1c16:	88 1f       	adc	r24, r24
    1c18:	da f7       	brpl	.-10     	; 0x1c10 <__floatsisf+0x62>
    1c1a:	88 0f       	add	r24, r24
    1c1c:	96 95       	lsr	r25
    1c1e:	87 95       	ror	r24
    1c20:	97 f9       	bld	r25, 7
    1c22:	08 95       	ret

00001c24 <__fp_cmp>:
    1c24:	99 0f       	add	r25, r25
    1c26:	00 08       	sbc	r0, r0
    1c28:	55 0f       	add	r21, r21
    1c2a:	aa 0b       	sbc	r26, r26
    1c2c:	e0 e8       	ldi	r30, 0x80	; 128
    1c2e:	fe ef       	ldi	r31, 0xFE	; 254
    1c30:	16 16       	cp	r1, r22
    1c32:	17 06       	cpc	r1, r23
    1c34:	e8 07       	cpc	r30, r24
    1c36:	f9 07       	cpc	r31, r25
    1c38:	c0 f0       	brcs	.+48     	; 0x1c6a <__fp_cmp+0x46>
    1c3a:	12 16       	cp	r1, r18
    1c3c:	13 06       	cpc	r1, r19
    1c3e:	e4 07       	cpc	r30, r20
    1c40:	f5 07       	cpc	r31, r21
    1c42:	98 f0       	brcs	.+38     	; 0x1c6a <__fp_cmp+0x46>
    1c44:	62 1b       	sub	r22, r18
    1c46:	73 0b       	sbc	r23, r19
    1c48:	84 0b       	sbc	r24, r20
    1c4a:	95 0b       	sbc	r25, r21
    1c4c:	39 f4       	brne	.+14     	; 0x1c5c <__fp_cmp+0x38>
    1c4e:	0a 26       	eor	r0, r26
    1c50:	61 f0       	breq	.+24     	; 0x1c6a <__fp_cmp+0x46>
    1c52:	23 2b       	or	r18, r19
    1c54:	24 2b       	or	r18, r20
    1c56:	25 2b       	or	r18, r21
    1c58:	21 f4       	brne	.+8      	; 0x1c62 <__fp_cmp+0x3e>
    1c5a:	08 95       	ret
    1c5c:	0a 26       	eor	r0, r26
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <__fp_cmp+0x3e>
    1c60:	a1 40       	sbci	r26, 0x01	; 1
    1c62:	a6 95       	lsr	r26
    1c64:	8f ef       	ldi	r24, 0xFF	; 255
    1c66:	81 1d       	adc	r24, r1
    1c68:	81 1d       	adc	r24, r1
    1c6a:	08 95       	ret

00001c6c <__fp_inf>:
    1c6c:	97 f9       	bld	r25, 7
    1c6e:	9f 67       	ori	r25, 0x7F	; 127
    1c70:	80 e8       	ldi	r24, 0x80	; 128
    1c72:	70 e0       	ldi	r23, 0x00	; 0
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	08 95       	ret

00001c78 <__fp_nan>:
    1c78:	9f ef       	ldi	r25, 0xFF	; 255
    1c7a:	80 ec       	ldi	r24, 0xC0	; 192
    1c7c:	08 95       	ret

00001c7e <__fp_pscA>:
    1c7e:	00 24       	eor	r0, r0
    1c80:	0a 94       	dec	r0
    1c82:	16 16       	cp	r1, r22
    1c84:	17 06       	cpc	r1, r23
    1c86:	18 06       	cpc	r1, r24
    1c88:	09 06       	cpc	r0, r25
    1c8a:	08 95       	ret

00001c8c <__fp_pscB>:
    1c8c:	00 24       	eor	r0, r0
    1c8e:	0a 94       	dec	r0
    1c90:	12 16       	cp	r1, r18
    1c92:	13 06       	cpc	r1, r19
    1c94:	14 06       	cpc	r1, r20
    1c96:	05 06       	cpc	r0, r21
    1c98:	08 95       	ret

00001c9a <__fp_round>:
    1c9a:	09 2e       	mov	r0, r25
    1c9c:	03 94       	inc	r0
    1c9e:	00 0c       	add	r0, r0
    1ca0:	11 f4       	brne	.+4      	; 0x1ca6 <__fp_round+0xc>
    1ca2:	88 23       	and	r24, r24
    1ca4:	52 f0       	brmi	.+20     	; 0x1cba <__fp_round+0x20>
    1ca6:	bb 0f       	add	r27, r27
    1ca8:	40 f4       	brcc	.+16     	; 0x1cba <__fp_round+0x20>
    1caa:	bf 2b       	or	r27, r31
    1cac:	11 f4       	brne	.+4      	; 0x1cb2 <__fp_round+0x18>
    1cae:	60 ff       	sbrs	r22, 0
    1cb0:	04 c0       	rjmp	.+8      	; 0x1cba <__fp_round+0x20>
    1cb2:	6f 5f       	subi	r22, 0xFF	; 255
    1cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cba:	08 95       	ret

00001cbc <__fp_split3>:
    1cbc:	57 fd       	sbrc	r21, 7
    1cbe:	90 58       	subi	r25, 0x80	; 128
    1cc0:	44 0f       	add	r20, r20
    1cc2:	55 1f       	adc	r21, r21
    1cc4:	59 f0       	breq	.+22     	; 0x1cdc <__fp_splitA+0x10>
    1cc6:	5f 3f       	cpi	r21, 0xFF	; 255
    1cc8:	71 f0       	breq	.+28     	; 0x1ce6 <__fp_splitA+0x1a>
    1cca:	47 95       	ror	r20

00001ccc <__fp_splitA>:
    1ccc:	88 0f       	add	r24, r24
    1cce:	97 fb       	bst	r25, 7
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	61 f0       	breq	.+24     	; 0x1cec <__fp_splitA+0x20>
    1cd4:	9f 3f       	cpi	r25, 0xFF	; 255
    1cd6:	79 f0       	breq	.+30     	; 0x1cf6 <__fp_splitA+0x2a>
    1cd8:	87 95       	ror	r24
    1cda:	08 95       	ret
    1cdc:	12 16       	cp	r1, r18
    1cde:	13 06       	cpc	r1, r19
    1ce0:	14 06       	cpc	r1, r20
    1ce2:	55 1f       	adc	r21, r21
    1ce4:	f2 cf       	rjmp	.-28     	; 0x1cca <__fp_split3+0xe>
    1ce6:	46 95       	lsr	r20
    1ce8:	f1 df       	rcall	.-30     	; 0x1ccc <__fp_splitA>
    1cea:	08 c0       	rjmp	.+16     	; 0x1cfc <__fp_splitA+0x30>
    1cec:	16 16       	cp	r1, r22
    1cee:	17 06       	cpc	r1, r23
    1cf0:	18 06       	cpc	r1, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	f1 cf       	rjmp	.-30     	; 0x1cd8 <__fp_splitA+0xc>
    1cf6:	86 95       	lsr	r24
    1cf8:	71 05       	cpc	r23, r1
    1cfa:	61 05       	cpc	r22, r1
    1cfc:	08 94       	sec
    1cfe:	08 95       	ret

00001d00 <__fp_zero>:
    1d00:	e8 94       	clt

00001d02 <__fp_szero>:
    1d02:	bb 27       	eor	r27, r27
    1d04:	66 27       	eor	r22, r22
    1d06:	77 27       	eor	r23, r23
    1d08:	cb 01       	movw	r24, r22
    1d0a:	97 f9       	bld	r25, 7
    1d0c:	08 95       	ret

00001d0e <__gesf2>:
    1d0e:	8a df       	rcall	.-236    	; 0x1c24 <__fp_cmp>
    1d10:	08 f4       	brcc	.+2      	; 0x1d14 <__gesf2+0x6>
    1d12:	8f ef       	ldi	r24, 0xFF	; 255
    1d14:	08 95       	ret

00001d16 <__mulsf3>:
    1d16:	0b d0       	rcall	.+22     	; 0x1d2e <__mulsf3x>
    1d18:	c0 cf       	rjmp	.-128    	; 0x1c9a <__fp_round>
    1d1a:	b1 df       	rcall	.-158    	; 0x1c7e <__fp_pscA>
    1d1c:	28 f0       	brcs	.+10     	; 0x1d28 <__mulsf3+0x12>
    1d1e:	b6 df       	rcall	.-148    	; 0x1c8c <__fp_pscB>
    1d20:	18 f0       	brcs	.+6      	; 0x1d28 <__mulsf3+0x12>
    1d22:	95 23       	and	r25, r21
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <__mulsf3+0x12>
    1d26:	a2 cf       	rjmp	.-188    	; 0x1c6c <__fp_inf>
    1d28:	a7 cf       	rjmp	.-178    	; 0x1c78 <__fp_nan>
    1d2a:	11 24       	eor	r1, r1
    1d2c:	ea cf       	rjmp	.-44     	; 0x1d02 <__fp_szero>

00001d2e <__mulsf3x>:
    1d2e:	c6 df       	rcall	.-116    	; 0x1cbc <__fp_split3>
    1d30:	a0 f3       	brcs	.-24     	; 0x1d1a <__mulsf3+0x4>

00001d32 <__mulsf3_pse>:
    1d32:	95 9f       	mul	r25, r21
    1d34:	d1 f3       	breq	.-12     	; 0x1d2a <__mulsf3+0x14>
    1d36:	95 0f       	add	r25, r21
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	55 1f       	adc	r21, r21
    1d3c:	62 9f       	mul	r22, r18
    1d3e:	f0 01       	movw	r30, r0
    1d40:	72 9f       	mul	r23, r18
    1d42:	bb 27       	eor	r27, r27
    1d44:	f0 0d       	add	r31, r0
    1d46:	b1 1d       	adc	r27, r1
    1d48:	63 9f       	mul	r22, r19
    1d4a:	aa 27       	eor	r26, r26
    1d4c:	f0 0d       	add	r31, r0
    1d4e:	b1 1d       	adc	r27, r1
    1d50:	aa 1f       	adc	r26, r26
    1d52:	64 9f       	mul	r22, r20
    1d54:	66 27       	eor	r22, r22
    1d56:	b0 0d       	add	r27, r0
    1d58:	a1 1d       	adc	r26, r1
    1d5a:	66 1f       	adc	r22, r22
    1d5c:	82 9f       	mul	r24, r18
    1d5e:	22 27       	eor	r18, r18
    1d60:	b0 0d       	add	r27, r0
    1d62:	a1 1d       	adc	r26, r1
    1d64:	62 1f       	adc	r22, r18
    1d66:	73 9f       	mul	r23, r19
    1d68:	b0 0d       	add	r27, r0
    1d6a:	a1 1d       	adc	r26, r1
    1d6c:	62 1f       	adc	r22, r18
    1d6e:	83 9f       	mul	r24, r19
    1d70:	a0 0d       	add	r26, r0
    1d72:	61 1d       	adc	r22, r1
    1d74:	22 1f       	adc	r18, r18
    1d76:	74 9f       	mul	r23, r20
    1d78:	33 27       	eor	r19, r19
    1d7a:	a0 0d       	add	r26, r0
    1d7c:	61 1d       	adc	r22, r1
    1d7e:	23 1f       	adc	r18, r19
    1d80:	84 9f       	mul	r24, r20
    1d82:	60 0d       	add	r22, r0
    1d84:	21 1d       	adc	r18, r1
    1d86:	82 2f       	mov	r24, r18
    1d88:	76 2f       	mov	r23, r22
    1d8a:	6a 2f       	mov	r22, r26
    1d8c:	11 24       	eor	r1, r1
    1d8e:	9f 57       	subi	r25, 0x7F	; 127
    1d90:	50 40       	sbci	r21, 0x00	; 0
    1d92:	8a f0       	brmi	.+34     	; 0x1db6 <__mulsf3_pse+0x84>
    1d94:	e1 f0       	breq	.+56     	; 0x1dce <__mulsf3_pse+0x9c>
    1d96:	88 23       	and	r24, r24
    1d98:	4a f0       	brmi	.+18     	; 0x1dac <__mulsf3_pse+0x7a>
    1d9a:	ee 0f       	add	r30, r30
    1d9c:	ff 1f       	adc	r31, r31
    1d9e:	bb 1f       	adc	r27, r27
    1da0:	66 1f       	adc	r22, r22
    1da2:	77 1f       	adc	r23, r23
    1da4:	88 1f       	adc	r24, r24
    1da6:	91 50       	subi	r25, 0x01	; 1
    1da8:	50 40       	sbci	r21, 0x00	; 0
    1daa:	a9 f7       	brne	.-22     	; 0x1d96 <__mulsf3_pse+0x64>
    1dac:	9e 3f       	cpi	r25, 0xFE	; 254
    1dae:	51 05       	cpc	r21, r1
    1db0:	70 f0       	brcs	.+28     	; 0x1dce <__mulsf3_pse+0x9c>
    1db2:	5c cf       	rjmp	.-328    	; 0x1c6c <__fp_inf>
    1db4:	a6 cf       	rjmp	.-180    	; 0x1d02 <__fp_szero>
    1db6:	5f 3f       	cpi	r21, 0xFF	; 255
    1db8:	ec f3       	brlt	.-6      	; 0x1db4 <__mulsf3_pse+0x82>
    1dba:	98 3e       	cpi	r25, 0xE8	; 232
    1dbc:	dc f3       	brlt	.-10     	; 0x1db4 <__mulsf3_pse+0x82>
    1dbe:	86 95       	lsr	r24
    1dc0:	77 95       	ror	r23
    1dc2:	67 95       	ror	r22
    1dc4:	b7 95       	ror	r27
    1dc6:	f7 95       	ror	r31
    1dc8:	e7 95       	ror	r30
    1dca:	9f 5f       	subi	r25, 0xFF	; 255
    1dcc:	c1 f7       	brne	.-16     	; 0x1dbe <__mulsf3_pse+0x8c>
    1dce:	fe 2b       	or	r31, r30
    1dd0:	88 0f       	add	r24, r24
    1dd2:	91 1d       	adc	r25, r1
    1dd4:	96 95       	lsr	r25
    1dd6:	87 95       	ror	r24
    1dd8:	97 f9       	bld	r25, 7
    1dda:	08 95       	ret

00001ddc <__tablejump2__>:
    1ddc:	ee 0f       	add	r30, r30
    1dde:	ff 1f       	adc	r31, r31

00001de0 <__tablejump__>:
    1de0:	05 90       	lpm	r0, Z+
    1de2:	f4 91       	lpm	r31, Z
    1de4:	e0 2d       	mov	r30, r0
    1de6:	09 94       	ijmp

00001de8 <__umulhisi3>:
    1de8:	a2 9f       	mul	r26, r18
    1dea:	b0 01       	movw	r22, r0
    1dec:	b3 9f       	mul	r27, r19
    1dee:	c0 01       	movw	r24, r0
    1df0:	a3 9f       	mul	r26, r19
    1df2:	70 0d       	add	r23, r0
    1df4:	81 1d       	adc	r24, r1
    1df6:	11 24       	eor	r1, r1
    1df8:	91 1d       	adc	r25, r1
    1dfa:	b2 9f       	mul	r27, r18
    1dfc:	70 0d       	add	r23, r0
    1dfe:	81 1d       	adc	r24, r1
    1e00:	11 24       	eor	r1, r1
    1e02:	91 1d       	adc	r25, r1
    1e04:	08 95       	ret

00001e06 <calloc>:
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	86 9f       	mul	r24, r22
    1e10:	80 01       	movw	r16, r0
    1e12:	87 9f       	mul	r24, r23
    1e14:	10 0d       	add	r17, r0
    1e16:	96 9f       	mul	r25, r22
    1e18:	10 0d       	add	r17, r0
    1e1a:	11 24       	eor	r1, r1
    1e1c:	c8 01       	movw	r24, r16
    1e1e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <malloc>
    1e22:	ec 01       	movw	r28, r24
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	29 f0       	breq	.+10     	; 0x1e32 <calloc+0x2c>
    1e28:	a8 01       	movw	r20, r16
    1e2a:	60 e0       	ldi	r22, 0x00	; 0
    1e2c:	70 e0       	ldi	r23, 0x00	; 0
    1e2e:	0e 94 46 10 	call	0x208c	; 0x208c <memset>
    1e32:	ce 01       	movw	r24, r28
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	08 95       	ret

00001e3e <malloc>:
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	82 30       	cpi	r24, 0x02	; 2
    1e44:	91 05       	cpc	r25, r1
    1e46:	10 f4       	brcc	.+4      	; 0x1e4c <malloc+0xe>
    1e48:	82 e0       	ldi	r24, 0x02	; 2
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	e0 91 32 02 	lds	r30, 0x0232
    1e50:	f0 91 33 02 	lds	r31, 0x0233
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	a0 e0       	ldi	r26, 0x00	; 0
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	30 97       	sbiw	r30, 0x00	; 0
    1e5e:	39 f1       	breq	.+78     	; 0x1eae <malloc+0x70>
    1e60:	40 81       	ld	r20, Z
    1e62:	51 81       	ldd	r21, Z+1	; 0x01
    1e64:	48 17       	cp	r20, r24
    1e66:	59 07       	cpc	r21, r25
    1e68:	b8 f0       	brcs	.+46     	; 0x1e98 <malloc+0x5a>
    1e6a:	48 17       	cp	r20, r24
    1e6c:	59 07       	cpc	r21, r25
    1e6e:	71 f4       	brne	.+28     	; 0x1e8c <malloc+0x4e>
    1e70:	82 81       	ldd	r24, Z+2	; 0x02
    1e72:	93 81       	ldd	r25, Z+3	; 0x03
    1e74:	10 97       	sbiw	r26, 0x00	; 0
    1e76:	29 f0       	breq	.+10     	; 0x1e82 <malloc+0x44>
    1e78:	13 96       	adiw	r26, 0x03	; 3
    1e7a:	9c 93       	st	X, r25
    1e7c:	8e 93       	st	-X, r24
    1e7e:	12 97       	sbiw	r26, 0x02	; 2
    1e80:	2c c0       	rjmp	.+88     	; 0x1eda <malloc+0x9c>
    1e82:	90 93 33 02 	sts	0x0233, r25
    1e86:	80 93 32 02 	sts	0x0232, r24
    1e8a:	27 c0       	rjmp	.+78     	; 0x1eda <malloc+0x9c>
    1e8c:	21 15       	cp	r18, r1
    1e8e:	31 05       	cpc	r19, r1
    1e90:	31 f0       	breq	.+12     	; 0x1e9e <malloc+0x60>
    1e92:	42 17       	cp	r20, r18
    1e94:	53 07       	cpc	r21, r19
    1e96:	18 f0       	brcs	.+6      	; 0x1e9e <malloc+0x60>
    1e98:	a9 01       	movw	r20, r18
    1e9a:	db 01       	movw	r26, r22
    1e9c:	01 c0       	rjmp	.+2      	; 0x1ea0 <malloc+0x62>
    1e9e:	ef 01       	movw	r28, r30
    1ea0:	9a 01       	movw	r18, r20
    1ea2:	bd 01       	movw	r22, r26
    1ea4:	df 01       	movw	r26, r30
    1ea6:	02 80       	ldd	r0, Z+2	; 0x02
    1ea8:	f3 81       	ldd	r31, Z+3	; 0x03
    1eaa:	e0 2d       	mov	r30, r0
    1eac:	d7 cf       	rjmp	.-82     	; 0x1e5c <malloc+0x1e>
    1eae:	21 15       	cp	r18, r1
    1eb0:	31 05       	cpc	r19, r1
    1eb2:	f9 f0       	breq	.+62     	; 0x1ef2 <malloc+0xb4>
    1eb4:	28 1b       	sub	r18, r24
    1eb6:	39 0b       	sbc	r19, r25
    1eb8:	24 30       	cpi	r18, 0x04	; 4
    1eba:	31 05       	cpc	r19, r1
    1ebc:	80 f4       	brcc	.+32     	; 0x1ede <malloc+0xa0>
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec2:	61 15       	cp	r22, r1
    1ec4:	71 05       	cpc	r23, r1
    1ec6:	21 f0       	breq	.+8      	; 0x1ed0 <malloc+0x92>
    1ec8:	fb 01       	movw	r30, r22
    1eca:	93 83       	std	Z+3, r25	; 0x03
    1ecc:	82 83       	std	Z+2, r24	; 0x02
    1ece:	04 c0       	rjmp	.+8      	; 0x1ed8 <malloc+0x9a>
    1ed0:	90 93 33 02 	sts	0x0233, r25
    1ed4:	80 93 32 02 	sts	0x0232, r24
    1ed8:	fe 01       	movw	r30, r28
    1eda:	32 96       	adiw	r30, 0x02	; 2
    1edc:	44 c0       	rjmp	.+136    	; 0x1f66 <malloc+0x128>
    1ede:	fe 01       	movw	r30, r28
    1ee0:	e2 0f       	add	r30, r18
    1ee2:	f3 1f       	adc	r31, r19
    1ee4:	81 93       	st	Z+, r24
    1ee6:	91 93       	st	Z+, r25
    1ee8:	22 50       	subi	r18, 0x02	; 2
    1eea:	31 09       	sbc	r19, r1
    1eec:	39 83       	std	Y+1, r19	; 0x01
    1eee:	28 83       	st	Y, r18
    1ef0:	3a c0       	rjmp	.+116    	; 0x1f66 <malloc+0x128>
    1ef2:	20 91 30 02 	lds	r18, 0x0230
    1ef6:	30 91 31 02 	lds	r19, 0x0231
    1efa:	23 2b       	or	r18, r19
    1efc:	41 f4       	brne	.+16     	; 0x1f0e <malloc+0xd0>
    1efe:	20 91 62 00 	lds	r18, 0x0062
    1f02:	30 91 63 00 	lds	r19, 0x0063
    1f06:	30 93 31 02 	sts	0x0231, r19
    1f0a:	20 93 30 02 	sts	0x0230, r18
    1f0e:	20 91 60 00 	lds	r18, 0x0060
    1f12:	30 91 61 00 	lds	r19, 0x0061
    1f16:	21 15       	cp	r18, r1
    1f18:	31 05       	cpc	r19, r1
    1f1a:	41 f4       	brne	.+16     	; 0x1f2c <malloc+0xee>
    1f1c:	2d b7       	in	r18, 0x3d	; 61
    1f1e:	3e b7       	in	r19, 0x3e	; 62
    1f20:	40 91 64 00 	lds	r20, 0x0064
    1f24:	50 91 65 00 	lds	r21, 0x0065
    1f28:	24 1b       	sub	r18, r20
    1f2a:	35 0b       	sbc	r19, r21
    1f2c:	e0 91 30 02 	lds	r30, 0x0230
    1f30:	f0 91 31 02 	lds	r31, 0x0231
    1f34:	e2 17       	cp	r30, r18
    1f36:	f3 07       	cpc	r31, r19
    1f38:	a0 f4       	brcc	.+40     	; 0x1f62 <malloc+0x124>
    1f3a:	2e 1b       	sub	r18, r30
    1f3c:	3f 0b       	sbc	r19, r31
    1f3e:	28 17       	cp	r18, r24
    1f40:	39 07       	cpc	r19, r25
    1f42:	78 f0       	brcs	.+30     	; 0x1f62 <malloc+0x124>
    1f44:	ac 01       	movw	r20, r24
    1f46:	4e 5f       	subi	r20, 0xFE	; 254
    1f48:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4a:	24 17       	cp	r18, r20
    1f4c:	35 07       	cpc	r19, r21
    1f4e:	48 f0       	brcs	.+18     	; 0x1f62 <malloc+0x124>
    1f50:	4e 0f       	add	r20, r30
    1f52:	5f 1f       	adc	r21, r31
    1f54:	50 93 31 02 	sts	0x0231, r21
    1f58:	40 93 30 02 	sts	0x0230, r20
    1f5c:	81 93       	st	Z+, r24
    1f5e:	91 93       	st	Z+, r25
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <malloc+0x128>
    1f62:	e0 e0       	ldi	r30, 0x00	; 0
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	cf 01       	movw	r24, r30
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	08 95       	ret

00001f6e <free>:
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <free+0xa>
    1f76:	87 c0       	rjmp	.+270    	; 0x2086 <free+0x118>
    1f78:	fc 01       	movw	r30, r24
    1f7a:	32 97       	sbiw	r30, 0x02	; 2
    1f7c:	13 82       	std	Z+3, r1	; 0x03
    1f7e:	12 82       	std	Z+2, r1	; 0x02
    1f80:	c0 91 32 02 	lds	r28, 0x0232
    1f84:	d0 91 33 02 	lds	r29, 0x0233
    1f88:	20 97       	sbiw	r28, 0x00	; 0
    1f8a:	81 f4       	brne	.+32     	; 0x1fac <free+0x3e>
    1f8c:	20 81       	ld	r18, Z
    1f8e:	31 81       	ldd	r19, Z+1	; 0x01
    1f90:	28 0f       	add	r18, r24
    1f92:	39 1f       	adc	r19, r25
    1f94:	80 91 30 02 	lds	r24, 0x0230
    1f98:	90 91 31 02 	lds	r25, 0x0231
    1f9c:	82 17       	cp	r24, r18
    1f9e:	93 07       	cpc	r25, r19
    1fa0:	79 f5       	brne	.+94     	; 0x2000 <free+0x92>
    1fa2:	f0 93 31 02 	sts	0x0231, r31
    1fa6:	e0 93 30 02 	sts	0x0230, r30
    1faa:	6d c0       	rjmp	.+218    	; 0x2086 <free+0x118>
    1fac:	de 01       	movw	r26, r28
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	ae 17       	cp	r26, r30
    1fb4:	bf 07       	cpc	r27, r31
    1fb6:	50 f4       	brcc	.+20     	; 0x1fcc <free+0x5e>
    1fb8:	12 96       	adiw	r26, 0x02	; 2
    1fba:	4d 91       	ld	r20, X+
    1fbc:	5c 91       	ld	r21, X
    1fbe:	13 97       	sbiw	r26, 0x03	; 3
    1fc0:	9d 01       	movw	r18, r26
    1fc2:	41 15       	cp	r20, r1
    1fc4:	51 05       	cpc	r21, r1
    1fc6:	09 f1       	breq	.+66     	; 0x200a <free+0x9c>
    1fc8:	da 01       	movw	r26, r20
    1fca:	f3 cf       	rjmp	.-26     	; 0x1fb2 <free+0x44>
    1fcc:	b3 83       	std	Z+3, r27	; 0x03
    1fce:	a2 83       	std	Z+2, r26	; 0x02
    1fd0:	40 81       	ld	r20, Z
    1fd2:	51 81       	ldd	r21, Z+1	; 0x01
    1fd4:	84 0f       	add	r24, r20
    1fd6:	95 1f       	adc	r25, r21
    1fd8:	8a 17       	cp	r24, r26
    1fda:	9b 07       	cpc	r25, r27
    1fdc:	71 f4       	brne	.+28     	; 0x1ffa <free+0x8c>
    1fde:	8d 91       	ld	r24, X+
    1fe0:	9c 91       	ld	r25, X
    1fe2:	11 97       	sbiw	r26, 0x01	; 1
    1fe4:	84 0f       	add	r24, r20
    1fe6:	95 1f       	adc	r25, r21
    1fe8:	02 96       	adiw	r24, 0x02	; 2
    1fea:	91 83       	std	Z+1, r25	; 0x01
    1fec:	80 83       	st	Z, r24
    1fee:	12 96       	adiw	r26, 0x02	; 2
    1ff0:	8d 91       	ld	r24, X+
    1ff2:	9c 91       	ld	r25, X
    1ff4:	13 97       	sbiw	r26, 0x03	; 3
    1ff6:	93 83       	std	Z+3, r25	; 0x03
    1ff8:	82 83       	std	Z+2, r24	; 0x02
    1ffa:	21 15       	cp	r18, r1
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	29 f4       	brne	.+10     	; 0x200a <free+0x9c>
    2000:	f0 93 33 02 	sts	0x0233, r31
    2004:	e0 93 32 02 	sts	0x0232, r30
    2008:	3e c0       	rjmp	.+124    	; 0x2086 <free+0x118>
    200a:	d9 01       	movw	r26, r18
    200c:	13 96       	adiw	r26, 0x03	; 3
    200e:	fc 93       	st	X, r31
    2010:	ee 93       	st	-X, r30
    2012:	12 97       	sbiw	r26, 0x02	; 2
    2014:	4d 91       	ld	r20, X+
    2016:	5d 91       	ld	r21, X+
    2018:	a4 0f       	add	r26, r20
    201a:	b5 1f       	adc	r27, r21
    201c:	ea 17       	cp	r30, r26
    201e:	fb 07       	cpc	r31, r27
    2020:	79 f4       	brne	.+30     	; 0x2040 <free+0xd2>
    2022:	80 81       	ld	r24, Z
    2024:	91 81       	ldd	r25, Z+1	; 0x01
    2026:	84 0f       	add	r24, r20
    2028:	95 1f       	adc	r25, r21
    202a:	02 96       	adiw	r24, 0x02	; 2
    202c:	d9 01       	movw	r26, r18
    202e:	11 96       	adiw	r26, 0x01	; 1
    2030:	9c 93       	st	X, r25
    2032:	8e 93       	st	-X, r24
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	13 96       	adiw	r26, 0x03	; 3
    203a:	9c 93       	st	X, r25
    203c:	8e 93       	st	-X, r24
    203e:	12 97       	sbiw	r26, 0x02	; 2
    2040:	e0 e0       	ldi	r30, 0x00	; 0
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
    2046:	9b 81       	ldd	r25, Y+3	; 0x03
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	19 f0       	breq	.+6      	; 0x2052 <free+0xe4>
    204c:	fe 01       	movw	r30, r28
    204e:	ec 01       	movw	r28, r24
    2050:	f9 cf       	rjmp	.-14     	; 0x2044 <free+0xd6>
    2052:	ce 01       	movw	r24, r28
    2054:	02 96       	adiw	r24, 0x02	; 2
    2056:	28 81       	ld	r18, Y
    2058:	39 81       	ldd	r19, Y+1	; 0x01
    205a:	82 0f       	add	r24, r18
    205c:	93 1f       	adc	r25, r19
    205e:	20 91 30 02 	lds	r18, 0x0230
    2062:	30 91 31 02 	lds	r19, 0x0231
    2066:	28 17       	cp	r18, r24
    2068:	39 07       	cpc	r19, r25
    206a:	69 f4       	brne	.+26     	; 0x2086 <free+0x118>
    206c:	30 97       	sbiw	r30, 0x00	; 0
    206e:	29 f4       	brne	.+10     	; 0x207a <free+0x10c>
    2070:	10 92 33 02 	sts	0x0233, r1
    2074:	10 92 32 02 	sts	0x0232, r1
    2078:	02 c0       	rjmp	.+4      	; 0x207e <free+0x110>
    207a:	13 82       	std	Z+3, r1	; 0x03
    207c:	12 82       	std	Z+2, r1	; 0x02
    207e:	d0 93 31 02 	sts	0x0231, r29
    2082:	c0 93 30 02 	sts	0x0230, r28
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	08 95       	ret

0000208c <memset>:
    208c:	dc 01       	movw	r26, r24
    208e:	01 c0       	rjmp	.+2      	; 0x2092 <memset+0x6>
    2090:	6d 93       	st	X+, r22
    2092:	41 50       	subi	r20, 0x01	; 1
    2094:	50 40       	sbci	r21, 0x00	; 0
    2096:	e0 f7       	brcc	.-8      	; 0x2090 <memset+0x4>
    2098:	08 95       	ret

0000209a <__eerd_word_m16a>:
    209a:	a8 e1       	ldi	r26, 0x18	; 24
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	42 e0       	ldi	r20, 0x02	; 2
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__eerd_blraw_m16a>

000020a6 <__eewr_word_m16a>:
    20a6:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__eewr_byte_m16a>
    20aa:	27 2f       	mov	r18, r23
    20ac:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__eewr_r18_m16a>

000020b0 <__eerd_block_m16a>:
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22

000020b4 <__eerd_blraw_m16a>:
    20b4:	fc 01       	movw	r30, r24
    20b6:	e1 99       	sbic	0x1c, 1	; 28
    20b8:	fe cf       	rjmp	.-4      	; 0x20b6 <__eerd_blraw_m16a+0x2>
    20ba:	06 c0       	rjmp	.+12     	; 0x20c8 <__eerd_blraw_m16a+0x14>
    20bc:	ff bb       	out	0x1f, r31	; 31
    20be:	ee bb       	out	0x1e, r30	; 30
    20c0:	e0 9a       	sbi	0x1c, 0	; 28
    20c2:	31 96       	adiw	r30, 0x01	; 1
    20c4:	0d b2       	in	r0, 0x1d	; 29
    20c6:	0d 92       	st	X+, r0
    20c8:	41 50       	subi	r20, 0x01	; 1
    20ca:	50 40       	sbci	r21, 0x00	; 0
    20cc:	b8 f7       	brcc	.-18     	; 0x20bc <__eerd_blraw_m16a+0x8>
    20ce:	08 95       	ret

000020d0 <__eewr_byte_m16a>:
    20d0:	26 2f       	mov	r18, r22

000020d2 <__eewr_r18_m16a>:
    20d2:	e1 99       	sbic	0x1c, 1	; 28
    20d4:	fe cf       	rjmp	.-4      	; 0x20d2 <__eewr_r18_m16a>
    20d6:	9f bb       	out	0x1f, r25	; 31
    20d8:	8e bb       	out	0x1e, r24	; 30
    20da:	2d bb       	out	0x1d, r18	; 29
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	e2 9a       	sbi	0x1c, 2	; 28
    20e2:	e1 9a       	sbi	0x1c, 1	; 28
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	01 96       	adiw	r24, 0x01	; 1
    20e8:	08 95       	ret

000020ea <_exit>:
    20ea:	f8 94       	cli

000020ec <__stop_program>:
    20ec:	ff cf       	rjmp	.-2      	; 0x20ec <__stop_program>
