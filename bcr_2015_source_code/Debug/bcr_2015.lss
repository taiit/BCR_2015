
bcr_2015.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dbc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00001dbc  00001e70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  00800088  00800088  00001e98  2**0
                  ALLOC
  3 .eeprom       00000012  00810000  00810000  00001e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001eaa  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00001eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002937  00000000  00000000  000020f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098e  00000000  00000000  00004a29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cef  00000000  00000000  000053b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000530  00000000  00000000  000060a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d2  00000000  00000000  000065d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f97  00000000  00000000  00006daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00007d41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "uint_test.h"
#include "../../lib/inc/common.h"
#include "../../lib/inc/hardware_feature.h"
#include "../../lib/inc/LedBug.h"

void vLedDebugTest(){
       0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
	//test led debug. 
	// total: 40s
	for(int i = 0; i < 10; i++){
		LED_BUG_BLINK;
       4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
       8:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__vector_2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
       c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      18:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      1c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
#include "../../lib/inc/LedBug.h"

void vLedDebugTest(){
	//test led debug. 
	// total: 40s
	for(int i = 0; i < 10; i++){
      20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
		LED_BUG_BLINK;
		_delay_ms(500);
	}	
	vLedCtrl(LED_FAST_BLINK);
      24:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__vector_9>
      28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
	_delay_ms(10000);
	vLedCtrl(LED_SLOW_BLINK);
      40:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      48:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      4c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      54:	c7 06       	cpc	r12, r23
      56:	e2 06       	cpc	r14, r18
      58:	b2 0b       	sbc	r27, r18
	_delay_ms(10000);
	vLedCtrl(LED_STARTUP_COMPELETE);
      5a:	b2 0b       	sbc	r27, r18
      5c:	b2 0b       	sbc	r27, r18
      5e:	b2 0b       	sbc	r27, r18
      60:	b2 0b       	sbc	r27, r18
      62:	b2 0b       	sbc	r27, r18
      64:	b2 0b       	sbc	r27, r18
      66:	b2 0b       	sbc	r27, r18
      68:	07 07       	cpc	r16, r23
      6a:	98 07       	cpc	r25, r24
      6c:	4a 08       	sbc	r4, r10
      6e:	b2 0b       	sbc	r27, r18
      70:	b2 0b       	sbc	r27, r18
      72:	b2 0b       	sbc	r27, r18
      74:	2b 08       	sbc	r2, r11
      76:	ee 08       	sbc	r14, r14
      78:	b2 0b       	sbc	r27, r18
      7a:	b2 0b       	sbc	r27, r18
      7c:	10 09       	sbc	r17, r0
      7e:	2a 09       	sbc	r18, r10
      80:	be 09       	sbc	r27, r14
      82:	b2 0b       	sbc	r27, r18
      84:	b2 0b       	sbc	r27, r18
      86:	b2 0b       	sbc	r27, r18
      88:	b2 0b       	sbc	r27, r18
      8a:	b2 0b       	sbc	r27, r18
      8c:	b2 0b       	sbc	r27, r18
      8e:	b2 0b       	sbc	r27, r18
      90:	26 0a       	sbc	r2, r22
      92:	40 0a       	sbc	r4, r16
      94:	4e 0a       	sbc	r4, r30
      96:	b2 0b       	sbc	r27, r18
      98:	b2 0b       	sbc	r27, r18
      9a:	b2 0b       	sbc	r27, r18
      9c:	b2 0b       	sbc	r27, r18
      9e:	b2 0b       	sbc	r27, r18
      a0:	b2 0b       	sbc	r27, r18
      a2:	b2 0b       	sbc	r27, r18
      a4:	e3 09       	sbc	r30, r3
      a6:	fd 09       	sbc	r31, r13
      a8:	0f 0a       	sbc	r0, r31
      aa:	b2 0b       	sbc	r27, r18
      ac:	b2 0b       	sbc	r27, r18
      ae:	b2 0b       	sbc	r27, r18
      b0:	b2 0b       	sbc	r27, r18
      b2:	b2 0b       	sbc	r27, r18
      b4:	b2 0b       	sbc	r27, r18
      b6:	b2 0b       	sbc	r27, r18
      b8:	b2 0b       	sbc	r27, r18
      ba:	65 0a       	sbc	r6, r21
      bc:	93 0a       	sbc	r9, r19
      be:	b3 0a       	sbc	r11, r19
      c0:	d2 0a       	sbc	r13, r18
      c2:	f8 0a       	sbc	r15, r24
      c4:	b2 0b       	sbc	r27, r18
      c6:	b2 0b       	sbc	r27, r18
      c8:	b2 0b       	sbc	r27, r18
      ca:	b2 0b       	sbc	r27, r18
      cc:	b2 0b       	sbc	r27, r18
      ce:	0b 0b       	sbc	r16, r27
      d0:	39 0b       	sbc	r19, r25
      d2:	59 0b       	sbc	r21, r25
      d4:	79 0b       	sbc	r23, r25
      d6:	9f 0b       	sbc	r25, r31

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf e5       	ldi	r28, 0x5F	; 95
      de:	d4 e0       	ldi	r29, 0x04	; 4
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	10 e0       	ldi	r17, 0x00	; 0
      e6:	a0 e6       	ldi	r26, 0x60	; 96
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	ec eb       	ldi	r30, 0xBC	; 188
      ec:	fd e1       	ldi	r31, 0x1D	; 29
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <__do_copy_data+0x10>
      f0:	05 90       	lpm	r0, Z+
      f2:	0d 92       	st	X+, r0
      f4:	a8 38       	cpi	r26, 0x88	; 136
      f6:	b1 07       	cpc	r27, r17
      f8:	d9 f7       	brne	.-10     	; 0xf0 <__do_copy_data+0xc>

000000fa <__do_clear_bss>:
      fa:	20 e0       	ldi	r18, 0x00	; 0
      fc:	a8 e8       	ldi	r26, 0x88	; 136
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
     102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
     104:	a0 3e       	cpi	r26, 0xE0	; 224
     106:	b2 07       	cpc	r27, r18
     108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>
     10a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <main>
     10e:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <_exit>

00000112 <__bad_interrupt>:
     112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000116 <vInitTimer0>:
				Normal mode.
				F = 12Mhz
				T = 5.33333us
				=> prescaler = 64
	*/
	TCCR0 = (1 << CS01) | (1<<CS00);
     116:	83 e0       	ldi	r24, 0x03	; 3
     118:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
     11a:	89 b7       	in	r24, 0x39	; 57
     11c:	81 60       	ori	r24, 0x01	; 1
     11e:	89 bf       	out	0x39, r24	; 57
     120:	08 95       	ret

00000122 <vInitTimer1>:
				F = 12Mhz
				T = 15ms
				=> prescaler = 8.
				ICR1 = 15ms / ((1/12Mhz)*8) = 22500	
	*/
	TCCR1A = (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
     122:	82 ea       	ldi	r24, 0xA2	; 162
     124:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
     126:	8a e1       	ldi	r24, 0x1A	; 26
     128:	8e bd       	out	0x2e, r24	; 46
	ICR1 = PWM_PERIOD_LEFT_MAX;
     12a:	84 ee       	ldi	r24, 0xE4	; 228
     12c:	97 e5       	ldi	r25, 0x57	; 87
     12e:	97 bd       	out	0x27, r25	; 39
     130:	86 bd       	out	0x26, r24	; 38
	//OCR1A = uiGetServoCenter(); //Servo, 1ms <-> 1500 and 2ms <-> 3000
	OCR1B = 0;//Motor Left
     132:	19 bc       	out	0x29, r1	; 41
     134:	18 bc       	out	0x28, r1	; 40
     136:	08 95       	ret

00000138 <vInitProgram>:
#include "../inc/hardware_config.h"
//#include "../inc/debug.h"

void vInitProgram(){
	//disable local interrupt
	cli();
     138:	f8 94       	cli
	
	//IO initialize
	LED_BUB_INIT;		//Led debug is output
     13a:	bf 9a       	sbi	0x17, 7	; 23
     13c:	c7 9a       	sbi	0x18, 7	; 24
	KEY_INIT;			//Key is input
     13e:	b8 98       	cbi	0x17, 0	; 23
     140:	c0 9a       	sbi	0x18, 0	; 24
     142:	b9 98       	cbi	0x17, 1	; 23
     144:	c1 9a       	sbi	0x18, 1	; 24
     146:	ba 98       	cbi	0x17, 2	; 23
     148:	c2 9a       	sbi	0x18, 2	; 24
	SWITCH_INIT;		//Switch is input
     14a:	a3 98       	cbi	0x14, 3	; 20
     14c:	ab 9a       	sbi	0x15, 3	; 21
     14e:	a2 98       	cbi	0x14, 2	; 20
     150:	aa 9a       	sbi	0x15, 2	; 21
     152:	a1 98       	cbi	0x14, 1	; 20
     154:	a9 9a       	sbi	0x15, 1	; 21
     156:	a0 98       	cbi	0x14, 0	; 20
     158:	a8 9a       	sbi	0x15, 0	; 21
     15a:	a6 98       	cbi	0x14, 6	; 20
     15c:	ae 9a       	sbi	0x15, 6	; 21
	MOTOR_LEFT_INIT;
     15e:	bc 9a       	sbi	0x17, 4	; 23
     160:	c4 98       	cbi	0x18, 4	; 24
     162:	be 9a       	sbi	0x17, 6	; 23
     164:	c6 9a       	sbi	0x18, 6	; 24
     166:	8c 9a       	sbi	0x11, 4	; 17
	MOTOR_RIGHT_INIT;
     168:	bb 9a       	sbi	0x17, 3	; 23
     16a:	c3 98       	cbi	0x18, 3	; 24
     16c:	bd 9a       	sbi	0x17, 5	; 23
     16e:	c5 9a       	sbi	0x18, 5	; 24
     170:	8f 9a       	sbi	0x11, 7	; 17
	SERVO_INIT;
     172:	8d 9a       	sbi	0x11, 5	; 17
	SLAVE_ENABLE_INIT;
     174:	a4 9a       	sbi	0x14, 4	; 20
	SLAVE_ON;
     176:	ac 9a       	sbi	0x15, 4	; 21
	USB_DISABLE;
     178:	a7 98       	cbi	0x14, 7	; 20
     17a:	a7 98       	cbi	0x14, 7	; 20
	//SENSOR_INTIT; //Use ADC
	ADC_INIT;
     17c:	1a ba       	out	0x1a, r1	; 26
     17e:	85 e8       	ldi	r24, 0x85	; 133
     180:	86 b9       	out	0x06, r24	; 6
     182:	80 e4       	ldi	r24, 0x40	; 64
     184:	87 b9       	out	0x07, r24	; 7
	INT1_INIT;
     186:	84 e0       	ldi	r24, 0x04	; 4
     188:	85 bf       	out	0x35, r24	; 53
     18a:	80 e8       	ldi	r24, 0x80	; 128
     18c:	8b bf       	out	0x3b, r24	; 59
	LED7_INIT;
     18e:	88 9a       	sbi	0x11, 0	; 17
     190:	89 9a       	sbi	0x11, 1	; 17
     192:	8a 9a       	sbi	0x11, 2	; 17
	
	//Timer and PWM
	vInitTimer0();
     194:	0e 94 8b 00 	call	0x116	; 0x116 <vInitTimer0>
	vInitTimer1();
     198:	0e 94 91 00 	call	0x122	; 0x122 <vInitTimer1>
				Non-inverting: COM2[1:0] = 10
				F = 12Mhz
				T = 5.5ms
				=> prescaler = 256.
	*/
	TCCR2 = (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (1 << CS22) | (1 << CS21);
     19c:	8e e6       	ldi	r24, 0x6E	; 110
     19e:	85 bd       	out	0x25, r24	; 37
	vInitTimer2();	
	
	//SERIAL
	//v_init_debug_via_uart();
	//enable local interrupt
	sei();
     1a0:	78 94       	sei
     1a2:	08 95       	ret

000001a4 <bKeyIsPress>:
 */ 
#include "../inc/hardware_feature.h"
#include "../inc/debug.h"

bool bKeyIsPress(uint8_t ucKeyID){
	uint8_t mask = (1<<ucKeyID);
     1a4:	21 e0       	ldi	r18, 0x01	; 1
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	a9 01       	movw	r20, r18
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <bKeyIsPress+0xc>
     1ac:	44 0f       	add	r20, r20
     1ae:	55 1f       	adc	r21, r21
     1b0:	8a 95       	dec	r24
     1b2:	e2 f7       	brpl	.-8      	; 0x1ac <bKeyIsPress+0x8>
     1b4:	ca 01       	movw	r24, r20
     1b6:	24 2f       	mov	r18, r20
	//key is pressed when pin = 0;
	if((PIN_KEY & mask) != mask){
     1b8:	36 b3       	in	r19, 0x16	; 22
     1ba:	34 23       	and	r19, r20
     1bc:	34 17       	cp	r19, r20
     1be:	c1 f0       	breq	.+48     	; 0x1f0 <bKeyIsPress+0x4c>
     1c0:	ef e2       	ldi	r30, 0x2F	; 47
     1c2:	f5 e7       	ldi	r31, 0x75	; 117
     1c4:	31 97       	sbiw	r30, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <bKeyIsPress+0x20>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <bKeyIsPress+0x26>
     1ca:	00 00       	nop
		_delay_ms(10);
		if((PIN_KEY & mask) != mask){
     1cc:	96 b3       	in	r25, 0x16	; 22
     1ce:	89 23       	and	r24, r25
     1d0:	84 17       	cp	r24, r20
     1d2:	81 f0       	breq	.+32     	; 0x1f4 <bKeyIsPress+0x50>
			LED_BUG_ON;
     1d4:	c7 98       	cbi	0x18, 7	; 24
     1d6:	8f e2       	ldi	r24, 0x2F	; 47
     1d8:	95 e7       	ldi	r25, 0x75	; 117
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	f1 f7       	brne	.-4      	; 0x1da <bKeyIsPress+0x36>
     1de:	00 c0       	rjmp	.+0      	; 0x1e0 <bKeyIsPress+0x3c>
     1e0:	00 00       	nop
			_delay_ms(10);
			while((PIN_KEY&mask)!=mask);//waiting for key is released
     1e2:	86 b3       	in	r24, 0x16	; 22
     1e4:	82 23       	and	r24, r18
     1e6:	82 13       	cpse	r24, r18
     1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <bKeyIsPress+0x3e>
			LED_BUG_OFF;
     1ea:	c7 9a       	sbi	0x18, 7	; 24
			vBeep(30);
			return true;
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	08 95       	ret
		}
	}
	return false;
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	08 95       	ret
     1f4:	80 e0       	ldi	r24, 0x00	; 0
}
     1f6:	08 95       	ret

000001f8 <ucGetSwitch>:

uint8_t ucGetSwitch(){
	uint8_t mask = (1 << SW1) | (1 << SW2) | (1 << SW3) | (1 << SW4);
	uint8_t binData = (~PIN_SWITCH) & mask; 	
     1f8:	83 b3       	in	r24, 0x13	; 19
     1fa:	80 95       	com	r24
	// Must swap switch bit
	//binData = 0000 1101 => 0000 1011 		
	return binData;
}
     1fc:	8f 70       	andi	r24, 0x0F	; 15
     1fe:	08 95       	ret

00000200 <vMotor>:
/*TaiVH1 -- Aug 11, 2015  brief: Add for control motor and servo*/
int ucExSpeedLeft = 0, ucExSpeedRight = 0;
volatile bool bMotorUsePID = false;
int SERVO_CENTER	=			2350;

void vMotor(int iSpeedLeft, int iSpeedRight,bool bUsePID){
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	eb 01       	movw	r28, r22
			if(iSpeedRight>=0)iSpeedRight -= 10;
			//else iSpeedRight -= 5;
			break;
	}
	#endif
	bMotorUsePID = bUsePID;
     206:	40 93 9a 00 	sts	0x009A, r20
	if(bUsePID){
     20a:	44 23       	and	r20, r20
     20c:	49 f0       	breq	.+18     	; 0x220 <vMotor+0x20>
		ucExSpeedLeft = iSpeedLeft;
     20e:	90 93 9e 00 	sts	0x009E, r25
     212:	80 93 9d 00 	sts	0x009D, r24
		ucExSpeedRight = iSpeedRight;	
     216:	70 93 9c 00 	sts	0x009C, r23
     21a:	60 93 9b 00 	sts	0x009B, r22
     21e:	6a c0       	rjmp	.+212    	; 0x2f4 <vMotor+0xf4>
	else{
		//uint8_t ucSwData = ucGetSwitch() + 5;//ucSwData = [0..20]
		int iSpeedOfset ;//= (PWM_PERIOD_LEFT_MAX-1)*((float)(ucSwData/20));
		iSpeedOfset = PWM_PERIOD_LEFT_MAX - 1; //Fix me
		//Speed motor left
		if(iSpeedLeft >= 0){
     220:	99 23       	and	r25, r25
     222:	cc f0       	brlt	.+50     	; 0x256 <vMotor+0x56>
			sbi(PORT_MOTOR,DIR_L);
     224:	c4 9a       	sbi	0x18, 4	; 24
			OCR1B = iSpeedOfset * ((float)(iSpeedLeft * 0.01));
     226:	bc 01       	movw	r22, r24
     228:	88 27       	eor	r24, r24
     22a:	77 fd       	sbrc	r23, 7
     22c:	80 95       	com	r24
     22e:	98 2f       	mov	r25, r24
     230:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatsisf>
     234:	2a e0       	ldi	r18, 0x0A	; 10
     236:	37 ed       	ldi	r19, 0xD7	; 215
     238:	43 e2       	ldi	r20, 0x23	; 35
     23a:	5c e3       	ldi	r21, 0x3C	; 60
     23c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3>
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	36 ec       	ldi	r19, 0xC6	; 198
     244:	4f ea       	ldi	r20, 0xAF	; 175
     246:	56 e4       	ldi	r21, 0x46	; 70
     248:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3>
     24c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fixunssfsi>
     250:	79 bd       	out	0x29, r23	; 41
     252:	68 bd       	out	0x28, r22	; 40
     254:	1b c0       	rjmp	.+54     	; 0x28c <vMotor+0x8c>
		}
		else{
			cbi(PORT_MOTOR,DIR_L);
     256:	c4 98       	cbi	0x18, 4	; 24
			OCR1B = iSpeedOfset * (float)((-iSpeedLeft) * 0.01);
     258:	91 95       	neg	r25
     25a:	81 95       	neg	r24
     25c:	91 09       	sbc	r25, r1
     25e:	bc 01       	movw	r22, r24
     260:	88 27       	eor	r24, r24
     262:	77 fd       	sbrc	r23, 7
     264:	80 95       	com	r24
     266:	98 2f       	mov	r25, r24
     268:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatsisf>
     26c:	2a e0       	ldi	r18, 0x0A	; 10
     26e:	37 ed       	ldi	r19, 0xD7	; 215
     270:	43 e2       	ldi	r20, 0x23	; 35
     272:	5c e3       	ldi	r21, 0x3C	; 60
     274:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3>
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	36 ec       	ldi	r19, 0xC6	; 198
     27c:	4f ea       	ldi	r20, 0xAF	; 175
     27e:	56 e4       	ldi	r21, 0x46	; 70
     280:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3>
     284:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fixunssfsi>
     288:	79 bd       	out	0x29, r23	; 41
     28a:	68 bd       	out	0x28, r22	; 40
		}
		//Speed motor right
		iSpeedOfset = PEM_PERIOD_RIGHT_MAX - 1;
		if(iSpeedRight >= 0){
     28c:	dd 23       	and	r29, r29
     28e:	c4 f0       	brlt	.+48     	; 0x2c0 <vMotor+0xc0>
			cbi(PORT_MOTOR,DIR_R);
     290:	c3 98       	cbi	0x18, 3	; 24
			OCR2  = iSpeedOfset * ((float)(iSpeedRight * 0.01));
     292:	be 01       	movw	r22, r28
     294:	88 27       	eor	r24, r24
     296:	77 fd       	sbrc	r23, 7
     298:	80 95       	com	r24
     29a:	98 2f       	mov	r25, r24
     29c:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatsisf>
     2a0:	2a e0       	ldi	r18, 0x0A	; 10
     2a2:	37 ed       	ldi	r19, 0xD7	; 215
     2a4:	43 e2       	ldi	r20, 0x23	; 35
     2a6:	5c e3       	ldi	r21, 0x3C	; 60
     2a8:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3>
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	4e e7       	ldi	r20, 0x7E	; 126
     2b2:	53 e4       	ldi	r21, 0x43	; 67
     2b4:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3>
     2b8:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fixunssfsi>
     2bc:	63 bd       	out	0x23, r22	; 35
     2be:	1a c0       	rjmp	.+52     	; 0x2f4 <vMotor+0xf4>
		}
		else{
			sbi(PORT_MOTOR,DIR_R);
     2c0:	c3 9a       	sbi	0x18, 3	; 24
			OCR2  = iSpeedOfset * ((float)((-iSpeedRight) * 0.01));
     2c2:	66 27       	eor	r22, r22
     2c4:	77 27       	eor	r23, r23
     2c6:	6c 1b       	sub	r22, r28
     2c8:	7d 0b       	sbc	r23, r29
     2ca:	88 27       	eor	r24, r24
     2cc:	77 fd       	sbrc	r23, 7
     2ce:	80 95       	com	r24
     2d0:	98 2f       	mov	r25, r24
     2d2:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatsisf>
     2d6:	2a e0       	ldi	r18, 0x0A	; 10
     2d8:	37 ed       	ldi	r19, 0xD7	; 215
     2da:	43 e2       	ldi	r20, 0x23	; 35
     2dc:	5c e3       	ldi	r21, 0x3C	; 60
     2de:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3>
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	4e e7       	ldi	r20, 0x7E	; 126
     2e8:	53 e4       	ldi	r21, 0x43	; 67
     2ea:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3>
     2ee:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fixunssfsi>
     2f2:	63 bd       	out	0x23, r22	; 35
		}
	}
}
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <vSetBF>:
void vSetBF(bool bBFMotorLeft,bool bBFMotorRight){
	//BF motor left
	if(bBFMotorLeft == true){
     2fa:	88 23       	and	r24, r24
     2fc:	11 f0       	breq	.+4      	; 0x302 <vSetBF+0x8>
		cbi(PORT_MOTOR,BF_L);
     2fe:	c6 98       	cbi	0x18, 6	; 24
     300:	01 c0       	rjmp	.+2      	; 0x304 <vSetBF+0xa>
	}else{
		sbi(PORT_MOTOR,BF_L);
     302:	c6 9a       	sbi	0x18, 6	; 24
	}
	//BF motor right
	if(bBFMotorRight == true){
     304:	66 23       	and	r22, r22
     306:	11 f0       	breq	.+4      	; 0x30c <vSetBF+0x12>
		cbi(PORT_MOTOR,BF_R);
     308:	c5 98       	cbi	0x18, 5	; 24
     30a:	08 95       	ret
	}else{
		sbi(PORT_MOTOR,BF_R);
     30c:	c5 9a       	sbi	0x18, 5	; 24
     30e:	08 95       	ret

00000310 <vServo>:
	}
}
void vServo(int iAngle){
	OCR1A = SERVO_CENTER + iAngle*SERVO_ANGLE_STEP;
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	20 91 60 00 	lds	r18, 0x0060
     320:	30 91 61 00 	lds	r19, 0x0061
     324:	82 0f       	add	r24, r18
     326:	93 1f       	adc	r25, r19
     328:	9b bd       	out	0x2b, r25	; 43
     32a:	8a bd       	out	0x2a, r24	; 42
     32c:	08 95       	ret

0000032e <isTester>:
/*TaiVH1 -- Aug 11, 2015  brief: End add for motor and servo*/

// [Vo Huu Tai 12/8/2015 ]  Add for inclined and tester

bool isTester(){
	if((PIN_SWITCH&(1<<SW_TEST)) == (1<<SW_TEST) )return false;
     32e:	83 b3       	in	r24, 0x13	; 19
     330:	86 fb       	bst	r24, 6
     332:	88 27       	eor	r24, r24
     334:	80 f9       	bld	r24, 0
	return true;
}
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	89 27       	eor	r24, r25
     33a:	08 95       	ret

0000033c <uiReadADC>:
uint16_t EEMEM  uiMyEppDataArr[9];
uint16_t uiAdAverage[8],uiAdMin[8],uiAdMax[8];

PUBLIC uint16_t uiReadADC(unsigned char chanenel)
{
	ADMUX = chanenel|ADC_VREF_TYPE;
     33c:	80 64       	ori	r24, 0x40	; 64
     33e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
     340:	36 9a       	sbi	0x06, 6	; 6
	loop_until_bit_is_set(ADCSRA,ADIF);
     342:	34 9b       	sbis	0x06, 4	; 6
     344:	fe cf       	rjmp	.-4      	; 0x342 <uiReadADC+0x6>
	return ADCW;
     346:	84 b1       	in	r24, 0x04	; 4
     348:	95 b1       	in	r25, 0x05	; 5
}
     34a:	08 95       	ret

0000034c <vLearnColor>:
PUBLIC void vLearnColor()
{
     34c:	8f 92       	push	r8
     34e:	9f 92       	push	r9
     350:	af 92       	push	r10
     352:	bf 92       	push	r11
     354:	cf 92       	push	r12
     356:	df 92       	push	r13
     358:	ef 92       	push	r14
     35a:	ff 92       	push	r15
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
	cbi(_LED_PORT,LATCH); //out 595
	led7seg_index++;
	if(led7seg_index == 4)led7seg_index = 0;
}
PUBLIC void vOutLed7(unsigned int uiData){
	uiDataLed7 = uiData;
     364:	0f 2e       	mov	r0, r31
     366:	f3 e6       	ldi	r31, 0x63	; 99
     368:	af 2e       	mov	r10, r31
     36a:	b1 2c       	mov	r11, r1
     36c:	f0 2d       	mov	r31, r0
     36e:	0f 2e       	mov	r0, r31
     370:	fe ea       	ldi	r31, 0xAE	; 174
     372:	cf 2e       	mov	r12, r31
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	df 2e       	mov	r13, r31
     378:	f0 2d       	mov	r31, r0
     37a:	0f 2e       	mov	r0, r31
     37c:	f0 ed       	ldi	r31, 0xD0	; 208
     37e:	ef 2e       	mov	r14, r31
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	ff 2e       	mov	r15, r31
     384:	f0 2d       	mov	r31, r0
	while(1)
	{  
		vOutLed7(99);
		//ADC0	ADC1	ADC2				ADC6	ADC7
		// xx	 xx		 xx	 x-x	xx	xx	 xx      --
		for(uint8_t i = 0; i < 7; i++)
     386:	81 2c       	mov	r8, r1
	cbi(_LED_PORT,LATCH); //out 595
	led7seg_index++;
	if(led7seg_index == 4)led7seg_index = 0;
}
PUBLIC void vOutLed7(unsigned int uiData){
	uiDataLed7 = uiData;
     388:	b0 92 89 00 	sts	0x0089, r11
     38c:	a0 92 88 00 	sts	0x0088, r10
     390:	86 01       	movw	r16, r12
     392:	e7 01       	movw	r28, r14
	while(1)
	{  
		vOutLed7(99);
		//ADC0	ADC1	ADC2				ADC6	ADC7
		// xx	 xx		 xx	 x-x	xx	xx	 xx      --
		for(uint8_t i = 0; i < 7; i++)
     394:	98 2c       	mov	r9, r8
		{
			temp = uiReadADC(i);
     396:	89 2d       	mov	r24, r9
     398:	0e 94 9e 01 	call	0x33c	; 0x33c <uiReadADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     39c:	28 ec       	ldi	r18, 0xC8	; 200
     39e:	2a 95       	dec	r18
     3a0:	f1 f7       	brne	.-4      	; 0x39e <vLearnColor+0x52>
     3a2:	f8 01       	movw	r30, r16
			_delay_us(50);
			if(uiAdMax[i] == 0) uiAdMax[i] = temp;
     3a4:	20 81       	ld	r18, Z
     3a6:	31 81       	ldd	r19, Z+1	; 0x01
     3a8:	21 15       	cp	r18, r1
     3aa:	31 05       	cpc	r19, r1
     3ac:	19 f4       	brne	.+6      	; 0x3b4 <vLearnColor+0x68>
     3ae:	91 83       	std	Z+1, r25	; 0x01
     3b0:	80 83       	st	Z, r24
     3b2:	05 c0       	rjmp	.+10     	; 0x3be <vLearnColor+0x72>
			else if(temp > uiAdMax[i]) uiAdMax[i] = temp;
     3b4:	28 17       	cp	r18, r24
     3b6:	39 07       	cpc	r19, r25
     3b8:	10 f4       	brcc	.+4      	; 0x3be <vLearnColor+0x72>
     3ba:	91 83       	std	Z+1, r25	; 0x01
     3bc:	80 83       	st	Z, r24
			if(uiAdMin[i] == 0) uiAdMin[i] = temp;
     3be:	28 81       	ld	r18, Y
     3c0:	39 81       	ldd	r19, Y+1	; 0x01
     3c2:	21 15       	cp	r18, r1
     3c4:	31 05       	cpc	r19, r1
     3c6:	19 f4       	brne	.+6      	; 0x3ce <vLearnColor+0x82>
     3c8:	99 83       	std	Y+1, r25	; 0x01
     3ca:	88 83       	st	Y, r24
     3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <vLearnColor+0x8c>
			else if(temp < uiAdMin[i]){
     3ce:	82 17       	cp	r24, r18
     3d0:	93 07       	cpc	r25, r19
     3d2:	10 f4       	brcc	.+4      	; 0x3d8 <vLearnColor+0x8c>
				uiAdMin[i] = temp;
     3d4:	99 83       	std	Y+1, r25	; 0x01
     3d6:	88 83       	st	Y, r24
	while(1)
	{  
		vOutLed7(99);
		//ADC0	ADC1	ADC2				ADC6	ADC7
		// xx	 xx		 xx	 x-x	xx	xx	 xx      --
		for(uint8_t i = 0; i < 7; i++)
     3d8:	93 94       	inc	r9
     3da:	0e 5f       	subi	r16, 0xFE	; 254
     3dc:	1f 4f       	sbci	r17, 0xFF	; 255
     3de:	22 96       	adiw	r28, 0x02	; 2
     3e0:	87 e0       	ldi	r24, 0x07	; 7
     3e2:	98 12       	cpse	r9, r24
     3e4:	d8 cf       	rjmp	.-80     	; 0x396 <vLearnColor+0x4a>
			if(uiAdMin[i] == 0) uiAdMin[i] = temp;
			else if(temp < uiAdMin[i]){
				uiAdMin[i] = temp;
			}
		}
		if(bKeyIsPress(KEY3)) break;//Exit
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <bKeyIsPress>
     3ec:	88 23       	and	r24, r24
     3ee:	61 f2       	breq	.-104    	; 0x388 <vLearnColor+0x3c>
	cbi(_LED_PORT,LATCH); //out 595
	led7seg_index++;
	if(led7seg_index == 4)led7seg_index = 0;
}
PUBLIC void vOutLed7(unsigned int uiData){
	uiDataLed7 = uiData;
     3f0:	82 e4       	ldi	r24, 0x42	; 66
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	90 93 89 00 	sts	0x0089, r25
     3f8:	80 93 88 00 	sts	0x0088, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3fc:	9f e7       	ldi	r25, 0x7F	; 127
     3fe:	a9 ea       	ldi	r26, 0xA9	; 169
     400:	b3 e0       	ldi	r27, 0x03	; 3
     402:	91 50       	subi	r25, 0x01	; 1
     404:	a0 40       	sbci	r26, 0x00	; 0
     406:	b0 40       	sbci	r27, 0x00	; 0
     408:	e1 f7       	brne	.-8      	; 0x402 <vLearnColor+0xb6>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <vLearnColor+0xc0>
     40c:	00 00       	nop
		}
		if(bKeyIsPress(KEY3)) break;//Exit
	}//end while(1)
	vOutLed7(66);
	vBeep(100);	_delay_ms(100);	vBeep(100);
	uiAdAverage[7] = 111;//Note, start bar is bit 0. if adc[7] < adc_average[7] it mean start bar is open
     40e:	8f e6       	ldi	r24, 0x6F	; 111
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	90 93 cf 00 	sts	0x00CF, r25
     416:	80 93 ce 00 	sts	0x00CE, r24
	write_eeprom_word(&uiMyEppDataArr[7] , uiAdAverage[7]);
     41a:	6f e6       	ldi	r22, 0x6F	; 111
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	8e e0       	ldi	r24, 0x0E	; 14
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__eewr_word_m16a>
     426:	c0 ec       	ldi	r28, 0xC0	; 192
     428:	d0 e0       	ldi	r29, 0x00	; 0
     42a:	00 e0       	ldi	r16, 0x00	; 0
     42c:	10 e0       	ldi	r17, 0x00	; 0
     42e:	0f 2e       	mov	r0, r31
     430:	fe ec       	ldi	r31, 0xCE	; 206
     432:	cf 2e       	mov	r12, r31
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	df 2e       	mov	r13, r31
     438:	f0 2d       	mov	r31, r0
	for (uint8_t i = 0; i < 7; i++)
	{
		//uiAdAverage[i] = (uiAdMin[i] + uiAdMax[i])/2;
	
		uiAdAverage[i] = 500;//= uiAdAverage[i]*((float)1.25);
     43a:	0f 2e       	mov	r0, r31
     43c:	f4 ef       	ldi	r31, 0xF4	; 244
     43e:	ef 2e       	mov	r14, r31
     440:	ff 24       	eor	r15, r15
     442:	f3 94       	inc	r15
     444:	f0 2d       	mov	r31, r0
     446:	e9 92       	st	Y+, r14
     448:	f9 92       	st	Y+, r15
		write_eeprom_word(&uiMyEppDataArr[i] , uiAdAverage[i]);
     44a:	b7 01       	movw	r22, r14
     44c:	c8 01       	movw	r24, r16
     44e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__eewr_word_m16a>
     452:	0e 5f       	subi	r16, 0xFE	; 254
     454:	1f 4f       	sbci	r17, 0xFF	; 255
	}//end while(1)
	vOutLed7(66);
	vBeep(100);	_delay_ms(100);	vBeep(100);
	uiAdAverage[7] = 111;//Note, start bar is bit 0. if adc[7] < adc_average[7] it mean start bar is open
	write_eeprom_word(&uiMyEppDataArr[7] , uiAdAverage[7]);
	for (uint8_t i = 0; i < 7; i++)
     456:	cc 15       	cp	r28, r12
     458:	dd 05       	cpc	r29, r13
     45a:	a9 f7       	brne	.-22     	; 0x446 <vLearnColor+0xfa>
		//uiAdAverage[i] = (uiAdMin[i] + uiAdMax[i])/2;
	
		uiAdAverage[i] = 500;//= uiAdAverage[i]*((float)1.25);
		write_eeprom_word(&uiMyEppDataArr[i] , uiAdAverage[i]);
	}
}
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	cf 90       	pop	r12
     46c:	bf 90       	pop	r11
     46e:	af 90       	pop	r10
     470:	9f 90       	pop	r9
     472:	8f 90       	pop	r8
     474:	08 95       	ret

00000476 <ucGetRawSensor>:
PUBLIC uint8_t ucGetRawSensor()
{
     476:	cf 92       	push	r12
     478:	df 92       	push	r13
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	00 ec       	ldi	r16, 0xC0	; 192
     488:	10 e0       	ldi	r17, 0x00	; 0
     48a:	c6 e0       	ldi	r28, 0x06	; 6
     48c:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t result = 0;
     48e:	d1 2c       	mov	r13, r1
     490:	0f 2e       	mov	r0, r31
     492:	f6 e0       	ldi	r31, 0x06	; 6
     494:	cf 2e       	mov	r12, r31
     496:	f0 2d       	mov	r31, r0
		//swap bit here
		if(temp <= uiAdAverage[i]){
			sbi(result,6-i);
		}
		else{
			cbi(result,6-i);	
     498:	ee 24       	eor	r14, r14
     49a:	e3 94       	inc	r14
     49c:	f1 2c       	mov	r15, r1
	uint16_t temp = 0;
	//ADC0	ADC1	ADC2				ADC6	ADC7
	// xx	 xx		 xx	 x-x	xx	xx	 xx      --
	for(int i = 0; i < 7;i++)
	{
		temp = uiReadADC(i);
     49e:	8c 2d       	mov	r24, r12
     4a0:	8c 1b       	sub	r24, r28
     4a2:	0e 94 9e 01 	call	0x33c	; 0x33c <uiReadADC>
		//swap bit here
		if(temp <= uiAdAverage[i]){
     4a6:	f8 01       	movw	r30, r16
     4a8:	21 91       	ld	r18, Z+
     4aa:	31 91       	ld	r19, Z+
     4ac:	8f 01       	movw	r16, r30
     4ae:	28 17       	cp	r18, r24
     4b0:	39 07       	cpc	r19, r25
     4b2:	48 f0       	brcs	.+18     	; 0x4c6 <ucGetRawSensor+0x50>
			sbi(result,6-i);
     4b4:	97 01       	movw	r18, r14
     4b6:	0c 2e       	mov	r0, r28
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <ucGetRawSensor+0x48>
     4ba:	22 0f       	add	r18, r18
     4bc:	33 1f       	adc	r19, r19
     4be:	0a 94       	dec	r0
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <ucGetRawSensor+0x44>
     4c2:	d2 2a       	or	r13, r18
     4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <ucGetRawSensor+0x62>
		}
		else{
			cbi(result,6-i);	
     4c6:	97 01       	movw	r18, r14
     4c8:	0c 2e       	mov	r0, r28
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <ucGetRawSensor+0x5a>
     4cc:	22 0f       	add	r18, r18
     4ce:	33 1f       	adc	r19, r19
     4d0:	0a 94       	dec	r0
     4d2:	e2 f7       	brpl	.-8      	; 0x4cc <ucGetRawSensor+0x56>
     4d4:	20 95       	com	r18
     4d6:	d2 22       	and	r13, r18
     4d8:	21 97       	sbiw	r28, 0x01	; 1
     4da:	08 f7       	brcc	.-62     	; 0x49e <ucGetRawSensor+0x28>
		}		
	}
	cbi(result,7);
     4dc:	8d 2d       	mov	r24, r13
     4de:	8f 77       	andi	r24, 0x7F	; 127
}
PUBLIC void vOutLed7(unsigned int uiData){
	uiDataLed7 = uiData;
}
PUBLIC void vOutLed1(uint8_t ucData){
	ucDataLed1 = ucData;
     4e0:	80 93 8a 00 	sts	0x008A, r24
	}
	cbi(result,7);
	//data_led = result;
	vOutLed1(result);
	return result;
}
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	ff 90       	pop	r15
     4ee:	ef 90       	pop	r14
     4f0:	df 90       	pop	r13
     4f2:	cf 90       	pop	r12
     4f4:	08 95       	ret

000004f6 <ucGetSensorData>:
PUBLIC uint8_t ucGetSensorData(uint8_t mask){
     4f6:	cf 93       	push	r28
     4f8:	c8 2f       	mov	r28, r24

	return (ucGetRawSensor() & mask);
     4fa:	0e 94 3b 02 	call	0x476	; 0x476 <ucGetRawSensor>
}
     4fe:	8c 23       	and	r24, r28
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <bStartBarClose>:
int iGetSensorPosition(){
	return 0;
}
bool bStartBarClose(){
	uint16_t ucDataADC = uiReadADC(7);
     504:	87 e0       	ldi	r24, 0x07	; 7
     506:	0e 94 9e 01 	call	0x33c	; 0x33c <uiReadADC>
	if(ucDataADC < 100) return true;//adc_average[7]
     50a:	21 e0       	ldi	r18, 0x01	; 1
     50c:	84 36       	cpi	r24, 0x64	; 100
     50e:	91 05       	cpc	r25, r1
     510:	08 f0       	brcs	.+2      	; 0x514 <bStartBarClose+0x10>
     512:	20 e0       	ldi	r18, 0x00	; 0
	return false;
}
     514:	82 2f       	mov	r24, r18
     516:	08 95       	ret

00000518 <vLoadE2PSensor>:
void vLoadE2PSensor(){
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	c0 e0       	ldi	r28, 0x00	; 0
     526:	d0 e0       	ldi	r29, 0x00	; 0
     528:	00 ec       	ldi	r16, 0xC0	; 192
     52a:	10 e0       	ldi	r17, 0x00	; 0
     52c:	0f 2e       	mov	r0, r31
     52e:	f0 e1       	ldi	r31, 0x10	; 16
     530:	ef 2e       	mov	r14, r31
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	ff 2e       	mov	r15, r31
     536:	f0 2d       	mov	r31, r0
	for(int i = 0;i < 8;i++){
		uiAdAverage[i] = read_eeprom_word(&uiMyEppDataArr[i]);
     538:	ce 01       	movw	r24, r28
     53a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__eerd_word_m16a>
     53e:	f8 01       	movw	r30, r16
     540:	81 93       	st	Z+, r24
     542:	91 93       	st	Z+, r25
     544:	8f 01       	movw	r16, r30
     546:	22 96       	adiw	r28, 0x02	; 2
	uint16_t ucDataADC = uiReadADC(7);
	if(ucDataADC < 100) return true;//adc_average[7]
	return false;
}
void vLoadE2PSensor(){
	for(int i = 0;i < 8;i++){
     548:	ce 15       	cp	r28, r14
     54a:	df 05       	cpc	r29, r15
     54c:	a9 f7       	brne	.-22     	; 0x538 <vLoadE2PSensor+0x20>
		uiAdAverage[i] = read_eeprom_word(&uiMyEppDataArr[i]);
	}
	
}
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	08 95       	ret

0000055c <uiGetADCAverage>:
uint16_t uiGetADCAverage(uint8_t ucIndex){
	return(uiAdAverage[ucIndex]);
     55c:	e8 2f       	mov	r30, r24
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	ee 0f       	add	r30, r30
     562:	ff 1f       	adc	r31, r31
     564:	e0 54       	subi	r30, 0x40	; 64
     566:	ff 4f       	sbci	r31, 0xFF	; 255
}
     568:	80 81       	ld	r24, Z
     56a:	91 81       	ldd	r25, Z+1	; 0x01
     56c:	08 95       	ret

0000056e <vLoad2PServoCenter>:
void vLoad2PServoCenter(){
	SERVO_CENTER = read_eeprom_word(&uiMyEppDataArr[8]);
     56e:	80 e1       	ldi	r24, 0x10	; 16
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__eerd_word_m16a>
     576:	90 93 61 00 	sts	0x0061, r25
     57a:	80 93 60 00 	sts	0x0060, r24
     57e:	08 95       	ret

00000580 <vSetServoCenter>:
}
void vSetServoCenter(uint16_t uiData){
	SERVO_CENTER = uiData;
     580:	90 93 61 00 	sts	0x0061, r25
     584:	80 93 60 00 	sts	0x0060, r24
	write_eeprom_word(&uiMyEppDataArr[8],SERVO_CENTER);
     588:	bc 01       	movw	r22, r24
     58a:	80 e1       	ldi	r24, 0x10	; 16
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__eewr_word_m16a>
     592:	08 95       	ret

00000594 <uiGetServoCenter>:
}
uint16_t uiGetServoCenter(){
	return SERVO_CENTER;
}
     594:	80 91 60 00 	lds	r24, 0x0060
     598:	90 91 61 00 	lds	r25, 0x0061
     59c:	08 95       	ret

0000059e <vIncPulse>:
int pre_ErrLeft = 0,pre_ErrRight = 0,uiLastPulse = 0;
float outputMotorLeft = 0;
float outputMotorRight = 0;

void vIncPulse(){
	uiPulse++;
     59e:	80 91 be 00 	lds	r24, 0x00BE
     5a2:	90 91 bf 00 	lds	r25, 0x00BF
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	90 93 bf 00 	sts	0x00BF, r25
     5ac:	80 93 be 00 	sts	0x00BE, r24
     5b0:	08 95       	ret

000005b2 <uiGetDeltaPulse>:
}
PRIVATE int uiGetDeltaPulse(){
		
	int uiDeltaPulse = uiPulse - uiLastPulse;
     5b2:	80 91 be 00 	lds	r24, 0x00BE
     5b6:	90 91 bf 00 	lds	r25, 0x00BF
     5ba:	20 91 94 00 	lds	r18, 0x0094
     5be:	30 91 95 00 	lds	r19, 0x0095
	uiLastPulse = uiPulse;	
     5c2:	40 91 be 00 	lds	r20, 0x00BE
     5c6:	50 91 bf 00 	lds	r21, 0x00BF
     5ca:	50 93 95 00 	sts	0x0095, r21
     5ce:	40 93 94 00 	sts	0x0094, r20
	
	return (uiDeltaPulse);
}
     5d2:	82 1b       	sub	r24, r18
     5d4:	93 0b       	sbc	r25, r19
     5d6:	08 95       	ret

000005d8 <iGetErr>:
PRIVATE float iGetErr(int speed,int deltaPluse){
     5d8:	cf 92       	push	r12
     5da:	df 92       	push	r13
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	eb 01       	movw	r28, r22
	float temp = 40*speed*0.01;
     5e6:	28 e2       	ldi	r18, 0x28	; 40
     5e8:	ac 01       	movw	r20, r24
     5ea:	24 9f       	mul	r18, r20
     5ec:	c0 01       	movw	r24, r0
     5ee:	25 9f       	mul	r18, r21
     5f0:	90 0d       	add	r25, r0
     5f2:	11 24       	eor	r1, r1
     5f4:	bc 01       	movw	r22, r24
     5f6:	88 27       	eor	r24, r24
     5f8:	77 fd       	sbrc	r23, 7
     5fa:	80 95       	com	r24
     5fc:	98 2f       	mov	r25, r24
     5fe:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatsisf>
     602:	2a e0       	ldi	r18, 0x0A	; 10
     604:	37 ed       	ldi	r19, 0xD7	; 215
     606:	43 e2       	ldi	r20, 0x23	; 35
     608:	5c e3       	ldi	r21, 0x3C	; 60
     60a:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3>
     60e:	6b 01       	movw	r12, r22
     610:	7c 01       	movw	r14, r24
	return(temp - deltaPluse);
     612:	be 01       	movw	r22, r28
     614:	88 27       	eor	r24, r24
     616:	77 fd       	sbrc	r23, 7
     618:	80 95       	com	r24
     61a:	98 2f       	mov	r25, r24
     61c:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatsisf>
     620:	9b 01       	movw	r18, r22
     622:	ac 01       	movw	r20, r24
     624:	c7 01       	movw	r24, r14
     626:	b6 01       	movw	r22, r12
     628:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__subsf3>
}
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	ff 90       	pop	r15
     632:	ef 90       	pop	r14
     634:	df 90       	pop	r13
     636:	cf 90       	pop	r12
     638:	08 95       	ret

0000063a <vCalPID>:
void vCalPID(){
     63a:	8f 92       	push	r8
     63c:	9f 92       	push	r9
     63e:	af 92       	push	r10
     640:	bf 92       	push	r11
     642:	cf 92       	push	r12
     644:	df 92       	push	r13
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
	//call over 10ms
	float Kp,Kd;
	float P,D,err,deltaPulse;		
	
	deltaPulse = uiGetDeltaPulse();//alway get delta pluse for reset review pluse.
     64e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uiGetDeltaPulse>
     652:	ec 01       	movw	r28, r24
	
	if(!bMotorUsePID)return;	
     654:	80 91 9a 00 	lds	r24, 0x009A
     658:	88 23       	and	r24, r24
     65a:	09 f4       	brne	.+2      	; 0x65e <vCalPID+0x24>
     65c:	15 c1       	rjmp	.+554    	; 0x888 <vCalPID+0x24e>
	
	//motor left
	Kp = 29.9;
	Kd = 12.1;
	
	err = iGetErr(ucExSpeedLeft,deltaPulse);
     65e:	be 01       	movw	r22, r28
     660:	80 91 9d 00 	lds	r24, 0x009D
     664:	90 91 9e 00 	lds	r25, 0x009E
     668:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <iGetErr>
     66c:	6b 01       	movw	r12, r22
     66e:	7c 01       	movw	r14, r24
	P = Kp * err;
     670:	23 e3       	ldi	r18, 0x33	; 51
     672:	33 e3       	ldi	r19, 0x33	; 51
     674:	4f ee       	ldi	r20, 0xEF	; 239
     676:	51 e4       	ldi	r21, 0x41	; 65
     678:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3>
     67c:	4b 01       	movw	r8, r22
     67e:	5c 01       	movw	r10, r24
	D = Kd*(err - pre_ErrLeft)*50; //50 is inv_Sampling_time
     680:	60 91 98 00 	lds	r22, 0x0098
     684:	70 91 99 00 	lds	r23, 0x0099
     688:	88 27       	eor	r24, r24
     68a:	77 fd       	sbrc	r23, 7
     68c:	80 95       	com	r24
     68e:	98 2f       	mov	r25, r24
     690:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatsisf>
     694:	9b 01       	movw	r18, r22
     696:	ac 01       	movw	r20, r24
     698:	c7 01       	movw	r24, r14
     69a:	b6 01       	movw	r22, r12
     69c:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__subsf3>
     6a0:	2a e9       	ldi	r18, 0x9A	; 154
     6a2:	39 e9       	ldi	r19, 0x99	; 153
     6a4:	41 e4       	ldi	r20, 0x41	; 65
     6a6:	51 e4       	ldi	r21, 0x41	; 65
     6a8:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3>
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	48 e4       	ldi	r20, 0x48	; 72
     6b2:	52 e4       	ldi	r21, 0x42	; 66
     6b4:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3>
     6b8:	9b 01       	movw	r18, r22
     6ba:	ac 01       	movw	r20, r24
	outputMotorLeft += P + D;
     6bc:	c5 01       	movw	r24, r10
     6be:	b4 01       	movw	r22, r8
     6c0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__addsf3>
     6c4:	20 91 90 00 	lds	r18, 0x0090
     6c8:	30 91 91 00 	lds	r19, 0x0091
     6cc:	40 91 92 00 	lds	r20, 0x0092
     6d0:	50 91 93 00 	lds	r21, 0x0093
     6d4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__addsf3>
     6d8:	4b 01       	movw	r8, r22
     6da:	5c 01       	movw	r10, r24
     6dc:	60 93 90 00 	sts	0x0090, r22
     6e0:	70 93 91 00 	sts	0x0091, r23
     6e4:	80 93 92 00 	sts	0x0092, r24
     6e8:	90 93 93 00 	sts	0x0093, r25

	if(outputMotorLeft > (PWM_PERIOD_LEFT_MAX - 1000))outputMotorLeft = PWM_PERIOD_LEFT_MAX - 1000;
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	38 ef       	ldi	r19, 0xF8	; 248
     6f0:	47 ea       	ldi	r20, 0xA7	; 167
     6f2:	56 e4       	ldi	r21, 0x46	; 70
     6f4:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__gesf2>
     6f8:	18 16       	cp	r1, r24
     6fa:	6c f4       	brge	.+26     	; 0x716 <vCalPID+0xdc>
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	98 ef       	ldi	r25, 0xF8	; 248
     700:	a7 ea       	ldi	r26, 0xA7	; 167
     702:	b6 e4       	ldi	r27, 0x46	; 70
     704:	80 93 90 00 	sts	0x0090, r24
     708:	90 93 91 00 	sts	0x0091, r25
     70c:	a0 93 92 00 	sts	0x0092, r26
     710:	b0 93 93 00 	sts	0x0093, r27
     714:	11 c0       	rjmp	.+34     	; 0x738 <vCalPID+0xfe>
	if (outputMotorLeft < 0)outputMotorLeft = 0;
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
     71c:	c5 01       	movw	r24, r10
     71e:	b4 01       	movw	r22, r8
     720:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__cmpsf2>
     724:	88 23       	and	r24, r24
     726:	44 f4       	brge	.+16     	; 0x738 <vCalPID+0xfe>
     728:	10 92 90 00 	sts	0x0090, r1
     72c:	10 92 91 00 	sts	0x0091, r1
     730:	10 92 92 00 	sts	0x0092, r1
     734:	10 92 93 00 	sts	0x0093, r1
//
	OCR1B = outputMotorLeft;
     738:	60 91 90 00 	lds	r22, 0x0090
     73c:	70 91 91 00 	lds	r23, 0x0091
     740:	80 91 92 00 	lds	r24, 0x0092
     744:	90 91 93 00 	lds	r25, 0x0093
     748:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fixunssfsi>
     74c:	79 bd       	out	0x29, r23	; 41
     74e:	68 bd       	out	0x28, r22	; 40
	pre_ErrLeft = err;
     750:	c7 01       	movw	r24, r14
     752:	b6 01       	movw	r22, r12
     754:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fixsfsi>
     758:	70 93 99 00 	sts	0x0099, r23
     75c:	60 93 98 00 	sts	0x0098, r22
//motor right
	Kp = 0.75;
	Kd = 0.12;
	
	err = iGetErr(ucExSpeedRight,deltaPulse);
     760:	be 01       	movw	r22, r28
     762:	80 91 9b 00 	lds	r24, 0x009B
     766:	90 91 9c 00 	lds	r25, 0x009C
     76a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <iGetErr>
     76e:	6b 01       	movw	r12, r22
     770:	7c 01       	movw	r14, r24
	P = Kp*err;
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e4       	ldi	r20, 0x40	; 64
     778:	5f e3       	ldi	r21, 0x3F	; 63
     77a:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3>
     77e:	4b 01       	movw	r8, r22
     780:	5c 01       	movw	r10, r24
	D = Kd*(err - pre_ErrRight)*50;//50 is inv_Sampling_time
     782:	60 91 96 00 	lds	r22, 0x0096
     786:	70 91 97 00 	lds	r23, 0x0097
     78a:	88 27       	eor	r24, r24
     78c:	77 fd       	sbrc	r23, 7
     78e:	80 95       	com	r24
     790:	98 2f       	mov	r25, r24
     792:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatsisf>
     796:	9b 01       	movw	r18, r22
     798:	ac 01       	movw	r20, r24
     79a:	c7 01       	movw	r24, r14
     79c:	b6 01       	movw	r22, r12
     79e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__subsf3>
     7a2:	2f e8       	ldi	r18, 0x8F	; 143
     7a4:	32 ec       	ldi	r19, 0xC2	; 194
     7a6:	45 ef       	ldi	r20, 0xF5	; 245
     7a8:	5d e3       	ldi	r21, 0x3D	; 61
     7aa:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3>
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	48 e4       	ldi	r20, 0x48	; 72
     7b4:	52 e4       	ldi	r21, 0x42	; 66
     7b6:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3>
     7ba:	9b 01       	movw	r18, r22
     7bc:	ac 01       	movw	r20, r24
	outputMotorRight += P + D;
     7be:	c5 01       	movw	r24, r10
     7c0:	b4 01       	movw	r22, r8
     7c2:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__addsf3>
     7c6:	20 91 8c 00 	lds	r18, 0x008C
     7ca:	30 91 8d 00 	lds	r19, 0x008D
     7ce:	40 91 8e 00 	lds	r20, 0x008E
     7d2:	50 91 8f 00 	lds	r21, 0x008F
     7d6:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__addsf3>
     7da:	4b 01       	movw	r8, r22
     7dc:	5c 01       	movw	r10, r24
     7de:	60 93 8c 00 	sts	0x008C, r22
     7e2:	70 93 8d 00 	sts	0x008D, r23
     7e6:	80 93 8e 00 	sts	0x008E, r24
     7ea:	90 93 8f 00 	sts	0x008F, r25
	
	if(outputMotorRight > (PEM_PERIOD_RIGHT_MAX - 10))outputMotorRight = PEM_PERIOD_RIGHT_MAX - 10;
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	45 e7       	ldi	r20, 0x75	; 117
     7f4:	53 e4       	ldi	r21, 0x43	; 67
     7f6:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__gesf2>
     7fa:	18 16       	cp	r1, r24
     7fc:	6c f4       	brge	.+26     	; 0x818 <vCalPID+0x1de>
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	a5 e7       	ldi	r26, 0x75	; 117
     804:	b3 e4       	ldi	r27, 0x43	; 67
     806:	80 93 8c 00 	sts	0x008C, r24
     80a:	90 93 8d 00 	sts	0x008D, r25
     80e:	a0 93 8e 00 	sts	0x008E, r26
     812:	b0 93 8f 00 	sts	0x008F, r27
     816:	11 c0       	rjmp	.+34     	; 0x83a <vCalPID+0x200>
	if(outputMotorRight < 0)outputMotorRight = 0;
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	a9 01       	movw	r20, r18
     81e:	c5 01       	movw	r24, r10
     820:	b4 01       	movw	r22, r8
     822:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__cmpsf2>
     826:	88 23       	and	r24, r24
     828:	44 f4       	brge	.+16     	; 0x83a <vCalPID+0x200>
     82a:	10 92 8c 00 	sts	0x008C, r1
     82e:	10 92 8d 00 	sts	0x008D, r1
     832:	10 92 8e 00 	sts	0x008E, r1
     836:	10 92 8f 00 	sts	0x008F, r1
	
	OCR2 = outputMotorRight;
     83a:	60 91 8c 00 	lds	r22, 0x008C
     83e:	70 91 8d 00 	lds	r23, 0x008D
     842:	80 91 8e 00 	lds	r24, 0x008E
     846:	90 91 8f 00 	lds	r25, 0x008F
     84a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fixunssfsi>
     84e:	63 bd       	out	0x23, r22	; 35
	pre_ErrRight = err;
     850:	c7 01       	movw	r24, r14
     852:	b6 01       	movw	r22, r12
     854:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fixsfsi>
     858:	70 93 97 00 	sts	0x0097, r23
     85c:	60 93 96 00 	sts	0x0096, r22
	
	//Dir
	if(ucExSpeedLeft > 0)
     860:	80 91 9d 00 	lds	r24, 0x009D
     864:	90 91 9e 00 	lds	r25, 0x009E
     868:	18 16       	cp	r1, r24
     86a:	19 06       	cpc	r1, r25
     86c:	14 f4       	brge	.+4      	; 0x872 <vCalPID+0x238>
	sbi(PORT_MOTOR,DIR_L);
     86e:	c4 9a       	sbi	0x18, 4	; 24
     870:	01 c0       	rjmp	.+2      	; 0x874 <vCalPID+0x23a>
	else cbi(PORT_MOTOR,DIR_R);
     872:	c3 98       	cbi	0x18, 3	; 24
	
	if(ucExSpeedRight > 0)
     874:	80 91 9b 00 	lds	r24, 0x009B
     878:	90 91 9c 00 	lds	r25, 0x009C
     87c:	18 16       	cp	r1, r24
     87e:	19 06       	cpc	r1, r25
     880:	14 f4       	brge	.+4      	; 0x886 <vCalPID+0x24c>
	cbi(PORT_MOTOR,DIR_R);
     882:	c3 98       	cbi	0x18, 3	; 24
     884:	01 c0       	rjmp	.+2      	; 0x888 <vCalPID+0x24e>
	else 
	sbi(PORT_MOTOR,DIR_R);
     886:	c3 9a       	sbi	0x18, 3	; 24
}
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	ff 90       	pop	r15
     88e:	ef 90       	pop	r14
     890:	df 90       	pop	r13
     892:	cf 90       	pop	r12
     894:	bf 90       	pop	r11
     896:	af 90       	pop	r10
     898:	9f 90       	pop	r9
     89a:	8f 90       	pop	r8
     89c:	08 95       	ret

0000089e <scanLed7>:
// [Vo Huu Tai 23/8/2015 ]  Add module led 7 seg
uint8_t led7seg_index = 0;
unsigned char ucDataLed1 = 0;
int uiDataLed7 = 0;
void scanLed7()
{
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
	if(uiDataLed7 < 0)uiDataLed7 = -(uiDataLed7);
     8a2:	80 91 88 00 	lds	r24, 0x0088
     8a6:	90 91 89 00 	lds	r25, 0x0089
     8aa:	99 23       	and	r25, r25
     8ac:	3c f4       	brge	.+14     	; 0x8bc <scanLed7+0x1e>
     8ae:	91 95       	neg	r25
     8b0:	81 95       	neg	r24
     8b2:	91 09       	sbc	r25, r1
     8b4:	90 93 89 00 	sts	0x0089, r25
     8b8:	80 93 88 00 	sts	0x0088, r24
	uint8_t i, temp, mask_led = 0x01,mask_seg = 0x80;
	uint8_t donvi = (uiDataLed7 % 10 << 4)|0x08;
     8bc:	20 91 88 00 	lds	r18, 0x0088
     8c0:	30 91 89 00 	lds	r19, 0x0089
     8c4:	ca e0       	ldi	r28, 0x0A	; 10
     8c6:	d0 e0       	ldi	r29, 0x00	; 0
     8c8:	c9 01       	movw	r24, r18
     8ca:	be 01       	movw	r22, r28
     8cc:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__divmodhi4>
     8d0:	82 95       	swap	r24
     8d2:	92 95       	swap	r25
     8d4:	90 7f       	andi	r25, 0xF0	; 240
     8d6:	98 27       	eor	r25, r24
     8d8:	80 7f       	andi	r24, 0xF0	; 240
     8da:	98 27       	eor	r25, r24
     8dc:	48 2f       	mov	r20, r24
     8de:	48 60       	ori	r20, 0x08	; 8
	uint8_t chuc = ((uiDataLed7%100) / 10 << 4)|0x04;
     8e0:	e4 e6       	ldi	r30, 0x64	; 100
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	c9 01       	movw	r24, r18
     8e6:	bf 01       	movw	r22, r30
     8e8:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__divmodhi4>
     8ec:	be 01       	movw	r22, r28
     8ee:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__divmodhi4>
     8f2:	62 95       	swap	r22
     8f4:	72 95       	swap	r23
     8f6:	70 7f       	andi	r23, 0xF0	; 240
     8f8:	76 27       	eor	r23, r22
     8fa:	60 7f       	andi	r22, 0xF0	; 240
     8fc:	76 27       	eor	r23, r22
     8fe:	c6 2f       	mov	r28, r22
     900:	c4 60       	ori	r28, 0x04	; 4
	uint8_t tram = ((uiDataLed7%1000) / 100 << 4)|0x02;
     902:	c9 01       	movw	r24, r18
     904:	68 ee       	ldi	r22, 0xE8	; 232
     906:	73 e0       	ldi	r23, 0x03	; 3
     908:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__divmodhi4>
     90c:	9b 01       	movw	r18, r22
     90e:	bf 01       	movw	r22, r30
     910:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__divmodhi4>
     914:	62 95       	swap	r22
     916:	72 95       	swap	r23
     918:	70 7f       	andi	r23, 0xF0	; 240
     91a:	76 27       	eor	r23, r22
     91c:	60 7f       	andi	r22, 0xF0	; 240
     91e:	76 27       	eor	r23, r22
     920:	62 60       	ori	r22, 0x02	; 2
	uint8_t ngan = ((uiDataLed7  / 1000) << 4)|0x01;
     922:	22 95       	swap	r18
     924:	32 95       	swap	r19
     926:	30 7f       	andi	r19, 0xF0	; 240
     928:	32 27       	eor	r19, r18
     92a:	20 7f       	andi	r18, 0xF0	; 240
     92c:	32 27       	eor	r19, r18
     92e:	21 60       	ori	r18, 0x01	; 1

	sbi(_LED_PORT,LATCH);
     930:	92 9a       	sbi	0x12, 2	; 18
unsigned char ucDataLed1 = 0;
int uiDataLed7 = 0;
void scanLed7()
{
	if(uiDataLed7 < 0)uiDataLed7 = -(uiDataLed7);
	uint8_t i, temp, mask_led = 0x01,mask_seg = 0x80;
     932:	50 e8       	ldi	r21, 0x80	; 128
     934:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t chuc = ((uiDataLed7%100) / 10 << 4)|0x04;
	uint8_t tram = ((uiDataLed7%1000) / 100 << 4)|0x02;
	uint8_t ngan = ((uiDataLed7  / 1000) << 4)|0x01;

	sbi(_LED_PORT,LATCH);
	for (i=0; i< 16; i++)
     936:	80 e0       	ldi	r24, 0x00	; 0
	{
		cbi(_LED_PORT,SCK);
     938:	90 98       	cbi	0x12, 0	; 18
		//xuat ra 8 led don
		if(i > 7)
     93a:	88 30       	cpi	r24, 0x08	; 8
     93c:	48 f0       	brcs	.+18     	; 0x950 <scanLed7+0xb2>
		{
			temp = ucDataLed1 & mask_led;
     93e:	90 91 8a 00 	lds	r25, 0x008A
     942:	93 23       	and	r25, r19
			if(temp == 0)sbi(_LED_PORT,DS);
     944:	11 f4       	brne	.+4      	; 0x94a <scanLed7+0xac>
     946:	91 9a       	sbi	0x12, 1	; 18
     948:	01 c0       	rjmp	.+2      	; 0x94c <scanLed7+0xae>
			else cbi(_LED_PORT,DS);
     94a:	91 98       	cbi	0x12, 1	; 18
			mask_led = mask_led << 1;
     94c:	33 0f       	add	r19, r19
     94e:	29 c0       	rjmp	.+82     	; 0x9a2 <scanLed7+0x104>
		}
		else //xuat ra module led 7 doan
		{
			switch(led7seg_index)
     950:	90 91 8b 00 	lds	r25, 0x008B
     954:	91 30       	cpi	r25, 0x01	; 1
     956:	71 f0       	breq	.+28     	; 0x974 <scanLed7+0xd6>
     958:	28 f0       	brcs	.+10     	; 0x964 <scanLed7+0xc6>
     95a:	92 30       	cpi	r25, 0x02	; 2
     95c:	99 f0       	breq	.+38     	; 0x984 <scanLed7+0xe6>
     95e:	93 30       	cpi	r25, 0x03	; 3
     960:	c9 f0       	breq	.+50     	; 0x994 <scanLed7+0xf6>
     962:	1f c0       	rjmp	.+62     	; 0x9a2 <scanLed7+0x104>
			{
				case 0:
				{
					temp = ngan & mask_seg;
     964:	95 2f       	mov	r25, r21
     966:	92 23       	and	r25, r18
					if(temp == 0)cbi(_LED_PORT,DS);
     968:	11 f4       	brne	.+4      	; 0x96e <scanLed7+0xd0>
     96a:	91 98       	cbi	0x12, 1	; 18
     96c:	01 c0       	rjmp	.+2      	; 0x970 <scanLed7+0xd2>
					else sbi(_LED_PORT,DS);
     96e:	91 9a       	sbi	0x12, 1	; 18
					mask_seg >>= 1;
     970:	56 95       	lsr	r21
					break;
     972:	17 c0       	rjmp	.+46     	; 0x9a2 <scanLed7+0x104>
				}
				case 1:
				{
					temp = tram & mask_seg;
     974:	95 2f       	mov	r25, r21
     976:	96 23       	and	r25, r22
					if(temp == 0)cbi(_LED_PORT,DS);
     978:	11 f4       	brne	.+4      	; 0x97e <scanLed7+0xe0>
     97a:	91 98       	cbi	0x12, 1	; 18
     97c:	01 c0       	rjmp	.+2      	; 0x980 <scanLed7+0xe2>
					else sbi(_LED_PORT,DS);
     97e:	91 9a       	sbi	0x12, 1	; 18
					mask_seg >>= 1;
     980:	56 95       	lsr	r21
					break;
     982:	0f c0       	rjmp	.+30     	; 0x9a2 <scanLed7+0x104>
				}
				case 2:
				{
					temp = chuc & mask_seg;
     984:	95 2f       	mov	r25, r21
     986:	9c 23       	and	r25, r28
					if(temp == 0)cbi(_LED_PORT,DS);
     988:	11 f4       	brne	.+4      	; 0x98e <scanLed7+0xf0>
     98a:	91 98       	cbi	0x12, 1	; 18
     98c:	01 c0       	rjmp	.+2      	; 0x990 <scanLed7+0xf2>
					else sbi(_LED_PORT,DS);
     98e:	91 9a       	sbi	0x12, 1	; 18
					mask_seg >>= 1;
     990:	56 95       	lsr	r21
					break;
     992:	07 c0       	rjmp	.+14     	; 0x9a2 <scanLed7+0x104>
				}
				case 3:
				{
					temp = donvi & mask_seg;
     994:	95 2f       	mov	r25, r21
     996:	94 23       	and	r25, r20
					if(temp == 0)cbi(_LED_PORT,DS);
     998:	11 f4       	brne	.+4      	; 0x99e <scanLed7+0x100>
     99a:	91 98       	cbi	0x12, 1	; 18
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <scanLed7+0x102>
					else sbi(_LED_PORT,DS);
     99e:	91 9a       	sbi	0x12, 1	; 18
					mask_seg >>= 1;
     9a0:	56 95       	lsr	r21
				}
				default:
				break;
			}
		}
		sbi(_LED_PORT,SCK);
     9a2:	90 9a       	sbi	0x12, 0	; 18
	uint8_t chuc = ((uiDataLed7%100) / 10 << 4)|0x04;
	uint8_t tram = ((uiDataLed7%1000) / 100 << 4)|0x02;
	uint8_t ngan = ((uiDataLed7  / 1000) << 4)|0x01;

	sbi(_LED_PORT,LATCH);
	for (i=0; i< 16; i++)
     9a4:	8f 5f       	subi	r24, 0xFF	; 255
     9a6:	80 31       	cpi	r24, 0x10	; 16
     9a8:	39 f6       	brne	.-114    	; 0x938 <scanLed7+0x9a>
			}
		}
		sbi(_LED_PORT,SCK);
	}
	//end for
	cbi(_LED_PORT,LATCH); //out 595
     9aa:	92 98       	cbi	0x12, 2	; 18
	led7seg_index++;
     9ac:	80 91 8b 00 	lds	r24, 0x008B
     9b0:	8f 5f       	subi	r24, 0xFF	; 255
	if(led7seg_index == 4)led7seg_index = 0;
     9b2:	84 30       	cpi	r24, 0x04	; 4
     9b4:	19 f0       	breq	.+6      	; 0x9bc <scanLed7+0x11e>
		}
		sbi(_LED_PORT,SCK);
	}
	//end for
	cbi(_LED_PORT,LATCH); //out 595
	led7seg_index++;
     9b6:	80 93 8b 00 	sts	0x008B, r24
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <scanLed7+0x122>
	if(led7seg_index == 4)led7seg_index = 0;
     9bc:	10 92 8b 00 	sts	0x008B, r1
}
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <vOutLed7>:
PUBLIC void vOutLed7(unsigned int uiData){
	uiDataLed7 = uiData;
     9c6:	90 93 89 00 	sts	0x0089, r25
     9ca:	80 93 88 00 	sts	0x0088, r24
     9ce:	08 95       	ret

000009d0 <vOutLed1>:
}
PUBLIC void vOutLed1(uint8_t ucData){
	ucDataLed1 = ucData;
     9d0:	80 93 8a 00 	sts	0x008A, r24
     9d4:	08 95       	ret

000009d6 <vBeep>:
}
PUBLIC void vBeep(unsigned int uiBeepTime){
     9d6:	08 95       	ret

000009d8 <vPeriodicDec>:
	@brief:		Decrease periodic counter
	@param:		none
	@return:	none 
*/
PRIVATE void vPeriodicDec(){	
	if((uigLedPeriodic == 0) || (uigLedPeriodic == NO_LIMIT)){
     9d8:	80 91 64 00 	lds	r24, 0x0064
     9dc:	90 91 65 00 	lds	r25, 0x0065
     9e0:	89 2b       	or	r24, r25
     9e2:	31 f0       	breq	.+12     	; 0x9f0 <vPeriodicDec+0x18>
     9e4:	80 91 64 00 	lds	r24, 0x0064
     9e8:	90 91 65 00 	lds	r25, 0x0065
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	39 f4       	brne	.+14     	; 0x9fe <vPeriodicDec+0x26>
		uigLedPeriodic = NO_LIMIT;
     9f0:	8f ef       	ldi	r24, 0xFF	; 255
     9f2:	9f ef       	ldi	r25, 0xFF	; 255
     9f4:	90 93 65 00 	sts	0x0065, r25
     9f8:	80 93 64 00 	sts	0x0064, r24
     9fc:	08 95       	ret
	}else
	uigLedPeriodic--;	
     9fe:	80 91 64 00 	lds	r24, 0x0064
     a02:	90 91 65 00 	lds	r25, 0x0065
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	90 93 65 00 	sts	0x0065, r25
     a0c:	80 93 64 00 	sts	0x0064, r24
     a10:	08 95       	ret

00000a12 <vIntervalDec>:
	@param:		none
	@return:	none 
*/
PRIVATE void vIntervalDec(){
	
	if((uigLedInterval == 0) || (uigLedInterval == NO_LIMIT)){
     a12:	80 91 62 00 	lds	r24, 0x0062
     a16:	90 91 63 00 	lds	r25, 0x0063
     a1a:	89 2b       	or	r24, r25
     a1c:	31 f0       	breq	.+12     	; 0xa2a <vIntervalDec+0x18>
     a1e:	80 91 62 00 	lds	r24, 0x0062
     a22:	90 91 63 00 	lds	r25, 0x0063
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	39 f4       	brne	.+14     	; 0xa38 <vIntervalDec+0x26>
		uigLedInterval = NO_LIMIT;
     a2a:	8f ef       	ldi	r24, 0xFF	; 255
     a2c:	9f ef       	ldi	r25, 0xFF	; 255
     a2e:	90 93 63 00 	sts	0x0063, r25
     a32:	80 93 62 00 	sts	0x0062, r24
     a36:	08 95       	ret
	}
	else
	uigLedInterval--;	
     a38:	80 91 62 00 	lds	r24, 0x0062
     a3c:	90 91 63 00 	lds	r25, 0x0063
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	90 93 63 00 	sts	0x0063, r25
     a46:	80 93 62 00 	sts	0x0062, r24
     a4a:	08 95       	ret

00000a4c <ucPareLedEvent>:
	@param:		led event
	@return:	Led Periodic counter
*/
PRIVATE uint16_t ucPareLedEvent(uint8_t led_event){
	uint16_t uiRet = NO_LIMIT;
	switch(led_event){
     a4c:	82 30       	cpi	r24, 0x02	; 2
     a4e:	91 f0       	breq	.+36     	; 0xa74 <ucPareLedEvent+0x28>
     a50:	18 f4       	brcc	.+6      	; 0xa58 <ucPareLedEvent+0xc>
     a52:	81 30       	cpi	r24, 0x01	; 1
     a54:	31 f0       	breq	.+12     	; 0xa62 <ucPareLedEvent+0x16>
     a56:	29 c0       	rjmp	.+82     	; 0xaaa <ucPareLedEvent+0x5e>
     a58:	83 30       	cpi	r24, 0x03	; 3
     a5a:	f1 f0       	breq	.+60     	; 0xa98 <ucPareLedEvent+0x4c>
     a5c:	84 30       	cpi	r24, 0x04	; 4
     a5e:	99 f0       	breq	.+38     	; 0xa86 <ucPareLedEvent+0x3a>
     a60:	24 c0       	rjmp	.+72     	; 0xaaa <ucPareLedEvent+0x5e>
		case LED_FAST_BLINK:			
			uigLedInterval = LED_50_MS;			
     a62:	85 e0       	ldi	r24, 0x05	; 5
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	90 93 63 00 	sts	0x0063, r25
     a6a:	80 93 62 00 	sts	0x0062, r24
	@brief:		parse control for led
	@param:		led event
	@return:	Led Periodic counter
*/
PRIVATE uint16_t ucPareLedEvent(uint8_t led_event){
	uint16_t uiRet = NO_LIMIT;
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	9f ef       	ldi	r25, 0xFF	; 255
	switch(led_event){
		case LED_FAST_BLINK:			
			uigLedInterval = LED_50_MS;			
			break;
     a72:	08 95       	ret
		case LED_SLOW_BLINK:			
			uigLedInterval = LED_100_MS;			
     a74:	8a e0       	ldi	r24, 0x0A	; 10
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	90 93 63 00 	sts	0x0063, r25
     a7c:	80 93 62 00 	sts	0x0062, r24
	@brief:		parse control for led
	@param:		led event
	@return:	Led Periodic counter
*/
PRIVATE uint16_t ucPareLedEvent(uint8_t led_event){
	uint16_t uiRet = NO_LIMIT;
     a80:	8f ef       	ldi	r24, 0xFF	; 255
     a82:	9f ef       	ldi	r25, 0xFF	; 255
		case LED_FAST_BLINK:			
			uigLedInterval = LED_50_MS;			
			break;
		case LED_SLOW_BLINK:			
			uigLedInterval = LED_100_MS;			
			break;
     a84:	08 95       	ret
		case LED_STARTUP_COMPELETE:			
			uigLedInterval = LED_50_MS;	
     a86:	85 e0       	ldi	r24, 0x05	; 5
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	90 93 63 00 	sts	0x0063, r25
     a8e:	80 93 62 00 	sts	0x0062, r24
			uiRet = LED_1_S;	
     a92:	84 e6       	ldi	r24, 0x64	; 100
     a94:	90 e0       	ldi	r25, 0x00	; 0
			break;	
     a96:	08 95       	ret
		case LED_START_BAR_OK:
			uigLedInterval = LED_50_MS;
     a98:	85 e0       	ldi	r24, 0x05	; 5
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	90 93 63 00 	sts	0x0063, r25
     aa0:	80 93 62 00 	sts	0x0062, r24
			uiRet = LED_500_MS;
     aa4:	82 e3       	ldi	r24, 0x32	; 50
     aa6:	90 e0       	ldi	r25, 0x00	; 0
			break;	
     aa8:	08 95       	ret
	@brief:		parse control for led
	@param:		led event
	@return:	Led Periodic counter
*/
PRIVATE uint16_t ucPareLedEvent(uint8_t led_event){
	uint16_t uiRet = NO_LIMIT;
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	9f ef       	ldi	r25, 0xFF	; 255
			break;	
		default:			
			break;
	}
	return uiRet;
}
     aae:	08 95       	ret

00000ab0 <vLedFlash>:
/*
	@brief:		This function will control led, must called on ISR function
	@param:		none
	@return:	none 
*/
PUBLIC void vLedFlash(){
     ab0:	cf 93       	push	r28
	uint8_t ucStateTemp = ucgLedState;	
     ab2:	c0 91 a1 00 	lds	r28, 0x00A1
	
	switch(ucStateTemp){
     ab6:	cc 23       	and	r28, r28
     ab8:	61 f1       	breq	.+88     	; 0xb12 <vLedFlash+0x62>
     aba:	c1 30       	cpi	r28, 0x01	; 1
     abc:	41 f5       	brne	.+80     	; 0xb0e <vLedFlash+0x5e>
		case LED_STATE_NONE:	//State NONE do nothing.
			return;
		case LED_STATE_BLINK:		
			vPeriodicDec();
     abe:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <vPeriodicDec>
			if(uigLedPeriodic == 0){
     ac2:	80 91 64 00 	lds	r24, 0x0064
     ac6:	90 91 65 00 	lds	r25, 0x0065
     aca:	89 2b       	or	r24, r25
     acc:	29 f4       	brne	.+10     	; 0xad8 <vLedFlash+0x28>
				LED_BUG_OFF; //turn off led
     ace:	c7 9a       	sbi	0x18, 7	; 24
				bgLedFlag = LED_FLAG_OFF;//set flag is off
     ad0:	10 92 a0 00 	sts	0x00A0, r1
				ucStateTemp = LED_STATE_NONE;
     ad4:	c0 e0       	ldi	r28, 0x00	; 0
     ad6:	1b c0       	rjmp	.+54     	; 0xb0e <vLedFlash+0x5e>
			}
			else{
				vIntervalDec();
     ad8:	0e 94 09 05 	call	0xa12	; 0xa12 <vIntervalDec>
				if(uigLedInterval == 0){
     adc:	80 91 62 00 	lds	r24, 0x0062
     ae0:	90 91 63 00 	lds	r25, 0x0063
     ae4:	89 2b       	or	r24, r25
     ae6:	99 f4       	brne	.+38     	; 0xb0e <vLedFlash+0x5e>
					switch (bgLedFlag)
     ae8:	80 91 a0 00 	lds	r24, 0x00A0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	00 97       	sbiw	r24, 0x00	; 0
     af0:	31 f0       	breq	.+12     	; 0xafe <vLedFlash+0x4e>
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	41 f4       	brne	.+16     	; 0xb06 <vLedFlash+0x56>
					{
						case LED_FLAG_ON:
							bgLedFlag = LED_FLAG_OFF;
     af6:	10 92 a0 00 	sts	0x00A0, r1
							LED_BUG_OFF;
     afa:	c7 9a       	sbi	0x18, 7	; 24
							break;
     afc:	04 c0       	rjmp	.+8      	; 0xb06 <vLedFlash+0x56>
						case LED_FLAG_OFF:
							bgLedFlag = LED_FLAG_ON;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	80 93 a0 00 	sts	0x00A0, r24
							LED_BUG_ON;
     b04:	c7 98       	cbi	0x18, 7	; 24
							break;
						default:							
							break;
					}					
					ucPareLedEvent(ucLedEvent);					
     b06:	80 91 9f 00 	lds	r24, 0x009F
     b0a:	0e 94 26 05 	call	0xa4c	; 0xa4c <ucPareLedEvent>
			}
			break;
		default:			
			break;		
	}		
	ucgLedState = ucStateTemp;		
     b0e:	c0 93 a1 00 	sts	0x00A1, r28
}
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <vLedCtrl>:
/*
	@brief:		Call this function to control led
	@param:		event of led
	@return:	none 
*/
PUBLIC void vLedCtrl(uint8_t E_EVENT){
     b16:	cf 93       	push	r28
     b18:	c8 2f       	mov	r28, r24
	
	uigLedPeriodic = ucPareLedEvent(E_EVENT);
     b1a:	0e 94 26 05 	call	0xa4c	; 0xa4c <ucPareLedEvent>
     b1e:	90 93 65 00 	sts	0x0065, r25
     b22:	80 93 64 00 	sts	0x0064, r24
	ucgLedState = LED_STATE_BLINK;	
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	80 93 a1 00 	sts	0x00A1, r24
	ucLedEvent = E_EVENT;
     b2c:	c0 93 9f 00 	sts	0x009F, r28
	
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <vAssassin>:
void vRuning();

// [Vo Huu Tai 20/8/2015 ]  END ADD car Run
void vAssassin(){
	// [Vo Huu Tai 10/8/2015 ]  over 1ms
	ucTimer10ms++;
     b34:	80 91 ad 00 	lds	r24, 0x00AD
     b38:	8f 5f       	subi	r24, 0xFF	; 255
     b3a:	80 93 ad 00 	sts	0x00AD, r24
	uctimer20ms++;
     b3e:	80 91 ac 00 	lds	r24, 0x00AC
     b42:	8f 5f       	subi	r24, 0xFF	; 255
     b44:	80 93 ac 00 	sts	0x00AC, r24
	ucTimer05ms++;
     b48:	80 91 ab 00 	lds	r24, 0x00AB
     b4c:	8f 5f       	subi	r24, 0xFF	; 255
     b4e:	80 93 ab 00 	sts	0x00AB, r24
	if(ucTimer05ms == 5){//5ms
     b52:	80 91 ab 00 	lds	r24, 0x00AB
     b56:	85 30       	cpi	r24, 0x05	; 5
     b58:	21 f4       	brne	.+8      	; 0xb62 <vAssassin+0x2e>
		scanLed7();
     b5a:	0e 94 4f 04 	call	0x89e	; 0x89e <scanLed7>
		ucTimer05ms = 0;
     b5e:	10 92 ab 00 	sts	0x00AB, r1
	}
	if(ucTimer10ms == 10){//10ms
     b62:	80 91 ad 00 	lds	r24, 0x00AD
     b66:	8a 30       	cpi	r24, 0x0A	; 10
     b68:	21 f4       	brne	.+8      	; 0xb72 <vAssassin+0x3e>
		//iGetInlined();
		vLedFlash();
     b6a:	0e 94 58 05 	call	0xab0	; 0xab0 <vLedFlash>
		ucTimer10ms = 0;
     b6e:	10 92 ad 00 	sts	0x00AD, r1
	}
	if (uctimer20ms == 20){//20ms
     b72:	80 91 ac 00 	lds	r24, 0x00AC
     b76:	84 31       	cpi	r24, 0x14	; 20
     b78:	21 f4       	brne	.+8      	; 0xb82 <vAssassin+0x4e>
		#ifdef USE_PID		
			vCalPID();	
     b7a:	0e 94 1d 03 	call	0x63a	; 0x63a <vCalPID>
		#endif
		uctimer20ms = 0;		
     b7e:	10 92 ac 00 	sts	0x00AC, r1
     b82:	08 95       	ret

00000b84 <check_crossline>:
/************************************************************************/
int check_crossline( uint8_t check_from )
{
	
	int ret = 0;
	if(check_from == CHECK_FROM_LEFT){// (case 61) 0 111 1 000		
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	51 f4       	brne	.+20     	; 0xb9c <check_crossline+0x18>
		if(ucGetSensorData(0x0) == 0x01)ret = 1;// 0 000 0 00x
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
     b8e:	21 e0       	ldi	r18, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	09 f0       	breq	.+2      	; 0xb98 <check_crossline+0x14>
     b96:	20 e0       	ldi	r18, 0x00	; 0
/* Return value 0: no crossline 1: crossline exists */
/************************************************************************/
int check_crossline( uint8_t check_from )
{
	
	int ret = 0;
     b98:	82 2f       	mov	r24, r18
     b9a:	08 95       	ret
	if(check_from == CHECK_FROM_LEFT){// (case 61) 0 111 1 000		
		if(ucGetSensorData(0x0) == 0x01)ret = 1;// 0 000 0 00x
	}
	if(check_from == CHECK_FROM_RIGHT){//(case 51) 0 000 1 111
     b9c:	82 30       	cpi	r24, 0x02	; 2
     b9e:	51 f4       	brne	.+20     	; 0xbb4 <check_crossline+0x30>
		if(ucGetSensorData(0x40) == 0x40)ret = 1;// 0 x00 0 000
     ba0:	80 e4       	ldi	r24, 0x40	; 64
     ba2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
     ba6:	21 e0       	ldi	r18, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	80 34       	cpi	r24, 0x40	; 64
     bac:	09 f0       	breq	.+2      	; 0xbb0 <check_crossline+0x2c>
     bae:	20 e0       	ldi	r18, 0x00	; 0
/* Return value 0: no crossline 1: crossline exists */
/************************************************************************/
int check_crossline( uint8_t check_from )
{
	
	int ret = 0;
     bb0:	82 2f       	mov	r24, r18
     bb2:	08 95       	ret
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(check_from == CHECK_FROM_RIGHT){//(case 51) 0 000 1 111
		if(ucGetSensorData(0x40) == 0x40)ret = 1;// 0 x00 0 000
	}
	return ret;
}
     bb8:	08 95       	ret

00000bba <followLineAfterSignal>:

void followLineAfterSignal( int maxSpeed, bool PID_ON  )
{
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	ec 01       	movw	r28, r24
     bc2:	16 2f       	mov	r17, r22
	//if(BF_ON)vSetBF(true,true);		

	switch(ucGetSensorData(0x77)){//0 fff 0 fff
     bc4:	87 e7       	ldi	r24, 0x77	; 119
     bc6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
     bca:	86 30       	cpi	r24, 0x06	; 6
     bcc:	91 f1       	breq	.+100    	; 0xc32 <followLineAfterSignal+0x78>
     bce:	60 f4       	brcc	.+24     	; 0xbe8 <followLineAfterSignal+0x2e>
     bd0:	82 30       	cpi	r24, 0x02	; 2
     bd2:	d9 f1       	breq	.+118    	; 0xc4a <followLineAfterSignal+0x90>
     bd4:	18 f4       	brcc	.+6      	; 0xbdc <followLineAfterSignal+0x22>
     bd6:	88 23       	and	r24, r24
     bd8:	b1 f0       	breq	.+44     	; 0xc06 <followLineAfterSignal+0x4c>
     bda:	80 c0       	rjmp	.+256    	; 0xcdc <followLineAfterSignal+0x122>
     bdc:	83 30       	cpi	r24, 0x03	; 3
     bde:	09 f4       	brne	.+2      	; 0xbe2 <followLineAfterSignal+0x28>
     be0:	41 c0       	rjmp	.+130    	; 0xc64 <followLineAfterSignal+0xaa>
     be2:	84 30       	cpi	r24, 0x04	; 4
     be4:	d1 f0       	breq	.+52     	; 0xc1a <followLineAfterSignal+0x60>
     be6:	7a c0       	rjmp	.+244    	; 0xcdc <followLineAfterSignal+0x122>
     be8:	80 32       	cpi	r24, 0x20	; 32
     bea:	09 f4       	brne	.+2      	; 0xbee <followLineAfterSignal+0x34>
     bec:	5e c0       	rjmp	.+188    	; 0xcaa <followLineAfterSignal+0xf0>
     bee:	20 f4       	brcc	.+8      	; 0xbf8 <followLineAfterSignal+0x3e>
     bf0:	80 31       	cpi	r24, 0x10	; 16
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <followLineAfterSignal+0x3c>
     bf4:	44 c0       	rjmp	.+136    	; 0xc7e <followLineAfterSignal+0xc4>
     bf6:	72 c0       	rjmp	.+228    	; 0xcdc <followLineAfterSignal+0x122>
     bf8:	80 33       	cpi	r24, 0x30	; 48
     bfa:	09 f4       	brne	.+2      	; 0xbfe <followLineAfterSignal+0x44>
     bfc:	4b c0       	rjmp	.+150    	; 0xc94 <followLineAfterSignal+0xda>
     bfe:	80 36       	cpi	r24, 0x60	; 96
     c00:	09 f4       	brne	.+2      	; 0xc04 <followLineAfterSignal+0x4a>
     c02:	60 c0       	rjmp	.+192    	; 0xcc4 <followLineAfterSignal+0x10a>
     c04:	6b c0       	rjmp	.+214    	; 0xcdc <followLineAfterSignal+0x122>
		case 0x00:// 0 000 x 000
		vServo(0);
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
		vMotor(maxSpeed,maxSpeed,PID_ON);
     c0e:	41 2f       	mov	r20, r17
     c10:	be 01       	movw	r22, r28
     c12:	ce 01       	movw	r24, r28
     c14:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
		break;
     c18:	61 c0       	rjmp	.+194    	; 0xcdc <followLineAfterSignal+0x122>
		//
		case  0x04: // 0 000 x 100
			vServo(10);
     c1a:	8a e0       	ldi	r24, 0x0A	; 10
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
			vMotor(maxSpeed,maxSpeed-5,PID_ON);
     c22:	be 01       	movw	r22, r28
     c24:	65 50       	subi	r22, 0x05	; 5
     c26:	71 09       	sbc	r23, r1
     c28:	41 2f       	mov	r20, r17
     c2a:	ce 01       	movw	r24, r28
     c2c:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
			break;
     c30:	55 c0       	rjmp	.+170    	; 0xcdc <followLineAfterSignal+0x122>
		case 0x06: // 0 000 x 110
			vServo(15);
     c32:	8f e0       	ldi	r24, 0x0F	; 15
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
			vMotor(maxSpeed,maxSpeed-5,PID_ON);
     c3a:	be 01       	movw	r22, r28
     c3c:	65 50       	subi	r22, 0x05	; 5
     c3e:	71 09       	sbc	r23, r1
     c40:	41 2f       	mov	r20, r17
     c42:	ce 01       	movw	r24, r28
     c44:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
			break;
     c48:	49 c0       	rjmp	.+146    	; 0xcdc <followLineAfterSignal+0x122>
		case  0x02: // 0 000 0 010
			vServo(20);
     c4a:	84 e1       	ldi	r24, 0x14	; 20
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
			vMotor(maxSpeed-5,maxSpeed-10,PID_ON);
     c52:	be 01       	movw	r22, r28
     c54:	6a 50       	subi	r22, 0x0A	; 10
     c56:	71 09       	sbc	r23, r1
     c58:	41 2f       	mov	r20, r17
     c5a:	ce 01       	movw	r24, r28
     c5c:	05 97       	sbiw	r24, 0x05	; 5
     c5e:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
			break;
     c62:	3c c0       	rjmp	.+120    	; 0xcdc <followLineAfterSignal+0x122>
		case 0x03: // 0 000 x 011
			vServo(25);
     c64:	89 e1       	ldi	r24, 0x19	; 25
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
			vMotor(maxSpeed-10,maxSpeed-15,PID_ON);
     c6c:	be 01       	movw	r22, r28
     c6e:	6f 50       	subi	r22, 0x0F	; 15
     c70:	71 09       	sbc	r23, r1
     c72:	41 2f       	mov	r20, r17
     c74:	ce 01       	movw	r24, r28
     c76:	0a 97       	sbiw	r24, 0x0a	; 10
     c78:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
			break;
     c7c:	2f c0       	rjmp	.+94     	; 0xcdc <followLineAfterSignal+0x122>
		////
		case 0x10: //0 001 x 000
			vServo(-10);
     c7e:	86 ef       	ldi	r24, 0xF6	; 246
     c80:	9f ef       	ldi	r25, 0xFF	; 255
     c82:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
			vMotor(maxSpeed-5,maxSpeed,PID_ON);
     c86:	41 2f       	mov	r20, r17
     c88:	be 01       	movw	r22, r28
     c8a:	ce 01       	movw	r24, r28
     c8c:	05 97       	sbiw	r24, 0x05	; 5
     c8e:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
			break;
     c92:	24 c0       	rjmp	.+72     	; 0xcdc <followLineAfterSignal+0x122>
		case 0x30: // 0 011 x 000
			vServo(-15);
     c94:	81 ef       	ldi	r24, 0xF1	; 241
     c96:	9f ef       	ldi	r25, 0xFF	; 255
     c98:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
			vMotor(maxSpeed-5,maxSpeed,PID_ON);
     c9c:	41 2f       	mov	r20, r17
     c9e:	be 01       	movw	r22, r28
     ca0:	ce 01       	movw	r24, r28
     ca2:	05 97       	sbiw	r24, 0x05	; 5
     ca4:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
			break;
     ca8:	19 c0       	rjmp	.+50     	; 0xcdc <followLineAfterSignal+0x122>
		case 0x20: // 0 010 x 000
			vServo(-20);
     caa:	8c ee       	ldi	r24, 0xEC	; 236
     cac:	9f ef       	ldi	r25, 0xFF	; 255
     cae:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
			vMotor(maxSpeed-10,maxSpeed-5,PID_ON);
     cb2:	be 01       	movw	r22, r28
     cb4:	65 50       	subi	r22, 0x05	; 5
     cb6:	71 09       	sbc	r23, r1
     cb8:	41 2f       	mov	r20, r17
     cba:	ce 01       	movw	r24, r28
     cbc:	0a 97       	sbiw	r24, 0x0a	; 10
     cbe:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
			break;
     cc2:	0c c0       	rjmp	.+24     	; 0xcdc <followLineAfterSignal+0x122>
		case 0x60: // 0 110 x 000
			vServo(-25);
     cc4:	87 ee       	ldi	r24, 0xE7	; 231
     cc6:	9f ef       	ldi	r25, 0xFF	; 255
     cc8:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
			vMotor(maxSpeed-15,maxSpeed-10,PID_ON);
     ccc:	be 01       	movw	r22, r28
     cce:	6a 50       	subi	r22, 0x0A	; 10
     cd0:	71 09       	sbc	r23, r1
     cd2:	41 2f       	mov	r20, r17
     cd4:	ce 01       	movw	r24, r28
     cd6:	0f 97       	sbiw	r24, 0x0f	; 15
     cd8:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
			break;
	}
	
	//vSetBF(false,false);
	
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	08 95       	ret

00000ce4 <check_rightline>:
int check_rightline( void )
{
	 int ret;

	 ret = 0;
	 if( ucGetSensorData(0x0f)==0x0f)  {// 0 000 1 111
     ce4:	8f e0       	ldi	r24, 0x0F	; 15
     ce6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
     cea:	21 e0       	ldi	r18, 0x01	; 1
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	8f 30       	cpi	r24, 0x0F	; 15
     cf0:	11 f0       	breq	.+4      	; 0xcf6 <check_rightline+0x12>
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
		 ret = 1;
	 }
	 return ret;
}
     cf6:	c9 01       	movw	r24, r18
     cf8:	08 95       	ret

00000cfa <check_leftline>:
int check_leftline( void )
{
	int ret;

	ret = 0;
	if (ucGetSensorData(0x78)==0x78) {// 0 xxx x 000
     cfa:	88 e7       	ldi	r24, 0x78	; 120
     cfc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
     d00:	21 e0       	ldi	r18, 0x01	; 1
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	88 37       	cpi	r24, 0x78	; 120
     d06:	11 f0       	breq	.+4      	; 0xd0c <check_leftline+0x12>
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
		ret = 1;
	}
	return ret;
}
     d0c:	c9 01       	movw	r24, r18
     d0e:	08 95       	ret

00000d10 <vRuning>:
};

void vRuning(){
	//uint16_t fl = 0;
	// - 45 0 45
	pattern = CAR_IDLE;	
     d10:	10 92 a6 00 	sts	0x00A6, r1
     d14:	10 92 a5 00 	sts	0x00A5, r1
				break;
			case (CAR_LEFT_LINE + 4):
				vOutLed7(CAR_LEFT_LINE + 4);
				vServo(30);
				while(cnt_timer_1ms < 5);
				pattern = CAR_NORMAL_TRACE;
     d18:	ca e0       	ldi	r28, 0x0A	; 10
     d1a:	d0 e0       	ldi	r29, 0x00	; 0
						vServo(-angle[1]);
						vMotor(CS_A2[3],CS_A1[3],PID);
						break;
					case 0x04://0 000 0 100
						vServo(18);
						vMotor(CS_A2[4],CS_A1[4],PID);
     d1c:	0f 2e       	mov	r0, r31
     d1e:	f6 e8       	ldi	r31, 0x86	; 134
     d20:	2f 2e       	mov	r2, r31
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	3f 2e       	mov	r3, r31
     d26:	f0 2d       	mov	r31, r0
     d28:	0f 2e       	mov	r0, r31
     d2a:	fc e7       	ldi	r31, 0x7C	; 124
     d2c:	4f 2e       	mov	r4, r31
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	5f 2e       	mov	r5, r31
     d32:	f0 2d       	mov	r31, r0
					case 0x60://0 110 0 000
						vServo(-angle[4]);
						vMotor(CS_A2[1],CS_A1[1],PID);
						break;
					case 0x30://0 011 0 010
						vServo(-angle[3]);
     d34:	0f 2e       	mov	r0, r31
     d36:	fc e6       	ldi	r31, 0x6C	; 108
     d38:	6f 2e       	mov	r6, r31
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	7f 2e       	mov	r7, r31
     d3e:	f0 2d       	mov	r31, r0
						vMotor(CS_A2[2],CS_A1[2],PID);
     d40:	0f 2e       	mov	r0, r31
     d42:	f2 e8       	ldi	r31, 0x82	; 130
     d44:	ef 2e       	mov	r14, r31
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	ff 2e       	mov	r15, r31
     d4a:	f0 2d       	mov	r31, r0
     d4c:	08 e7       	ldi	r16, 0x78	; 120
     d4e:	10 e0       	ldi	r17, 0x00	; 0
			case (CAR_NORMAL_TRACE + 2)://cong trai
				vOutLed7(CAR_NORMAL_TRACE+2);
				PID = false;
				switch(ucGetSensorData(0x77)){// 0 xxx 0 xxx
					case 0x40://0 100 0 000
						vServo(-angle[5]);						
     d50:	0f 2e       	mov	r0, r31
     d52:	f0 e7       	ldi	r31, 0x70	; 112
     d54:	8f 2e       	mov	r8, r31
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	9f 2e       	mov	r9, r31
     d5a:	f0 2d       	mov	r31, r0
						vMotor(CS_A2[0],CS_A1[0],PID);
     d5c:	0f 2e       	mov	r0, r31
     d5e:	fe e7       	ldi	r31, 0x7E	; 126
     d60:	af 2e       	mov	r10, r31
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	bf 2e       	mov	r11, r31
     d66:	f0 2d       	mov	r31, r0
     d68:	0f 2e       	mov	r0, r31
     d6a:	f4 e7       	ldi	r31, 0x74	; 116
     d6c:	cf 2e       	mov	r12, r31
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	df 2e       	mov	r13, r31
     d72:	f0 2d       	mov	r31, r0
	//uint16_t fl = 0;
	// - 45 0 45
	pattern = CAR_IDLE;	
	//vLedCtrl(LED_SLOW_BLINK);
	while(1){
		switch (pattern)
     d74:	80 91 a5 00 	lds	r24, 0x00A5
     d78:	90 91 a6 00 	lds	r25, 0x00A6
     d7c:	82 34       	cpi	r24, 0x42	; 66
     d7e:	91 05       	cpc	r25, r1
     d80:	08 f0       	brcs	.+2      	; 0xd84 <vRuning+0x74>
     d82:	f0 c4       	rjmp	.+2528   	; 0x1764 <vRuning+0xa54>
     d84:	fc 01       	movw	r30, r24
     d86:	e6 5d       	subi	r30, 0xD6	; 214
     d88:	ff 4f       	sbci	r31, 0xFF	; 255
     d8a:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__tablejump2__>
		{
			case CAR_IDLE:
//Idle ready to run
				vOutLed7(6900);
     d8e:	84 ef       	ldi	r24, 0xF4	; 244
     d90:	9a e1       	ldi	r25, 0x1A	; 26
     d92:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				if(bStartBarClose())pattern = CAR_IDLE + 1;
     d96:	0e 94 82 02 	call	0x504	; 0x504 <bStartBarClose>
     d9a:	88 23       	and	r24, r24
     d9c:	31 f0       	breq	.+12     	; 0xdaa <vRuning+0x9a>
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	90 93 a6 00 	sts	0x00A6, r25
     da6:	80 93 a5 00 	sts	0x00A5, r24
				if(bKeyIsPress(KEY1)){
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <bKeyIsPress>
     db0:	88 23       	and	r24, r24
     db2:	01 f3       	breq	.-64     	; 0xd74 <vRuning+0x64>
					pattern = CAR_NORMAL_TRACE;
     db4:	d0 93 a6 00 	sts	0x00A6, r29
     db8:	c0 93 a5 00 	sts	0x00A5, r28
					vOutLed7(CAR_NORMAL_TRACE);
     dbc:	ce 01       	movw	r24, r28
     dbe:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
     dc2:	d8 cf       	rjmp	.-80     	; 0xd74 <vRuning+0x64>
				}
				break;
			case (CAR_IDLE + 1):
				vOutLed7(6901);
     dc4:	85 ef       	ldi	r24, 0xF5	; 245
     dc6:	9a e1       	ldi	r25, 0x1A	; 26
     dc8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				if(bStartBarClose())LED_BUG_ON;
     dcc:	0e 94 82 02 	call	0x504	; 0x504 <bStartBarClose>
     dd0:	88 23       	and	r24, r24
     dd2:	11 f0       	breq	.+4      	; 0xdd8 <vRuning+0xc8>
     dd4:	c7 98       	cbi	0x18, 7	; 24
     dd6:	0a c0       	rjmp	.+20     	; 0xdec <vRuning+0xdc>
				else{
					pattern = CAR_NORMAL_TRACE;
     dd8:	d0 93 a6 00 	sts	0x00A6, r29
     ddc:	c0 93 a5 00 	sts	0x00A5, r28
					vOutLed7(CAR_NORMAL_TRACE);
     de0:	ce 01       	movw	r24, r28
     de2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
					vLedCtrl(LED_STARTUP_COMPELETE);
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	0e 94 8b 05 	call	0xb16	; 0xb16 <vLedCtrl>
				}
				if(bKeyIsPress(KEY1)){
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <bKeyIsPress>
     df2:	88 23       	and	r24, r24
     df4:	09 f4       	brne	.+2      	; 0xdf8 <vRuning+0xe8>
     df6:	be cf       	rjmp	.-132    	; 0xd74 <vRuning+0x64>
					pattern = CAR_NORMAL_TRACE;
     df8:	d0 93 a6 00 	sts	0x00A6, r29
     dfc:	c0 93 a5 00 	sts	0x00A5, r28
					vOutLed7(CAR_NORMAL_TRACE);
     e00:	ce 01       	movw	r24, r28
     e02:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
					vLedCtrl(LED_STARTUP_COMPELETE);
     e06:	84 e0       	ldi	r24, 0x04	; 4
     e08:	0e 94 8b 05 	call	0xb16	; 0xb16 <vLedCtrl>
     e0c:	b3 cf       	rjmp	.-154    	; 0xd74 <vRuning+0x64>
				}
				break;
			case CAR_NORMAL_TRACE :
				vOutLed7(CAR_NORMAL_TRACE);
     e0e:	ce 01       	movw	r24, r28
     e10:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
// Normal trace
			PID = true;	
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	80 93 a4 00 	sts	0x00A4, r24
			//--			
			switch( ucGetSensorData(0x77) ) {	// 0 111 0 111
     e1a:	87 e7       	ldi	r24, 0x77	; 119
     e1c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
     e20:	84 30       	cpi	r24, 0x04	; 4
     e22:	89 f0       	breq	.+34     	; 0xe46 <vRuning+0x136>
     e24:	80 31       	cpi	r24, 0x10	; 16
     e26:	f1 f0       	breq	.+60     	; 0xe64 <vRuning+0x154>
     e28:	81 11       	cpse	r24, r1
     e2a:	2e c0       	rjmp	.+92     	; 0xe88 <vRuning+0x178>
				case 0x00: // 0 000 0 000
					vServo( 0 );
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
					vMotor( 50 ,50,PID);
     e34:	40 91 a4 00 	lds	r20, 0x00A4
     e38:	62 e3       	ldi	r22, 0x32	; 50
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	82 e3       	ldi	r24, 0x32	; 50
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
					break;				
     e44:	29 c0       	rjmp	.+82     	; 0xe98 <vRuning+0x188>

				case 0x04: // 0 000 0 100
					vServo( angle[0] );
     e46:	80 91 66 00 	lds	r24, 0x0066
     e4a:	90 91 67 00 	lds	r25, 0x0067
     e4e:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
					vMotor( 45, 30,PID );
     e52:	40 91 a4 00 	lds	r20, 0x00A4
     e56:	6e e1       	ldi	r22, 0x1E	; 30
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	8d e2       	ldi	r24, 0x2D	; 45
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
					break;		
     e62:	1a c0       	rjmp	.+52     	; 0xe98 <vRuning+0x188>
///
				case 0x10:// 0 001 0 000
					vServo( -angle[0] );
     e64:	80 91 66 00 	lds	r24, 0x0066
     e68:	90 91 67 00 	lds	r25, 0x0067
     e6c:	91 95       	neg	r25
     e6e:	81 95       	neg	r24
     e70:	91 09       	sbc	r25, r1
     e72:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
					vMotor( 30, 45, PID );					
     e76:	40 91 a4 00 	lds	r20, 0x00A4
     e7a:	6d e2       	ldi	r22, 0x2D	; 45
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	8e e1       	ldi	r24, 0x1E	; 30
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
					break;
     e86:	08 c0       	rjmp	.+16     	; 0xe98 <vRuning+0x188>
				default:
					vMotor(0,0,PID);
     e88:	40 91 a4 00 	lds	r20, 0x00A4
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
					break;
			}//end switch 0x77
			switch(ucGetSensorData(0x03)){//cong phai 0 000 0 0xx
     e98:	83 e0       	ldi	r24, 0x03	; 3
     e9a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
     e9e:	83 30       	cpi	r24, 0x03	; 3
     ea0:	31 f4       	brne	.+12     	; 0xeae <vRuning+0x19e>
				case 0x03:
					pattern = CAR_NORMAL_TRACE + 1;
     ea2:	8b e0       	ldi	r24, 0x0B	; 11
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	90 93 a6 00 	sts	0x00A6, r25
     eaa:	80 93 a5 00 	sts	0x00A5, r24
					break;
				default:
					break;
			}//end switch 0x20
			switch(ucGetSensorData(0x60)){// cong trai. 0 xx0 0 000
     eae:	80 e6       	ldi	r24, 0x60	; 96
     eb0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
     eb4:	80 36       	cpi	r24, 0x60	; 96
     eb6:	39 f4       	brne	.+14     	; 0xec6 <vRuning+0x1b6>
				case 0x60:
					pattern = CAR_NORMAL_TRACE + 2;
     eb8:	8c e0       	ldi	r24, 0x0C	; 12
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	90 93 a6 00 	sts	0x00A6, r25
     ec0:	80 93 a5 00 	sts	0x00A5, r24
					break;
     ec4:	07 c0       	rjmp	.+14     	; 0xed4 <vRuning+0x1c4>
				default:
					vMotor(30,30,true);
     ec6:	41 e0       	ldi	r20, 0x01	; 1
     ec8:	6e e1       	ldi	r22, 0x1E	; 30
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	8e e1       	ldi	r24, 0x1E	; 30
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
					break;
			}//end witch 0x02
			
			if (check_rightline()) {	// 0 000 1 111			
     ed4:	0e 94 72 06 	call	0xce4	; 0xce4 <check_rightline>
     ed8:	89 2b       	or	r24, r25
     eda:	91 f0       	breq	.+36     	; 0xf00 <vRuning+0x1f0>
				pattern = CAR_RIGHT_LINE;
     edc:	83 e3       	ldi	r24, 0x33	; 51
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	90 93 a6 00 	sts	0x00A6, r25
     ee4:	80 93 a5 00 	sts	0x00A5, r24
				vMotor(5,5,PID);	
     ee8:	40 91 a4 00 	lds	r20, 0x00A4
     eec:	65 e0       	ldi	r22, 0x05	; 5
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	85 e0       	ldi	r24, 0x05	; 5
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
				cnt_timer_1ms = 0;		
     ef8:	10 92 aa 00 	sts	0x00AA, r1
     efc:	10 92 a9 00 	sts	0x00A9, r1
			}

			if (check_leftline()) {	// 0 111 1 000			
     f00:	0e 94 7d 06 	call	0xcfa	; 0xcfa <check_leftline>
     f04:	89 2b       	or	r24, r25
     f06:	09 f4       	brne	.+2      	; 0xf0a <vRuning+0x1fa>
     f08:	35 cf       	rjmp	.-406    	; 0xd74 <vRuning+0x64>
				pattern = CAR_LEFT_LINE;
     f0a:	8d e3       	ldi	r24, 0x3D	; 61
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	90 93 a6 00 	sts	0x00A6, r25
     f12:	80 93 a5 00 	sts	0x00A5, r24
				vMotor(5,5,PID);						
     f16:	40 91 a4 00 	lds	r20, 0x00A4
     f1a:	65 e0       	ldi	r22, 0x05	; 5
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	85 e0       	ldi	r24, 0x05	; 5
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
				cnt_timer_1ms = 0;
     f26:	10 92 aa 00 	sts	0x00AA, r1
     f2a:	10 92 a9 00 	sts	0x00A9, r1
     f2e:	22 cf       	rjmp	.-444    	; 0xd74 <vRuning+0x64>
			}
				break; //end case 10
// Normal trace, cong phai		
			case (CAR_NORMAL_TRACE + 1)://cong phai
				vOutLed7(CAR_NORMAL_TRACE+1);
     f30:	8b e0       	ldi	r24, 0x0B	; 11
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				PID = false;
     f38:	10 92 a4 00 	sts	0x00A4, r1
				switch(ucGetSensorData(0x77)){ // 0 xxx 0 xxx				
     f3c:	87 e7       	ldi	r24, 0x77	; 119
     f3e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
     f42:	84 30       	cpi	r24, 0x04	; 4
     f44:	09 f4       	brne	.+2      	; 0xf48 <vRuning+0x238>
     f46:	49 c0       	rjmp	.+146    	; 0xfda <vRuning+0x2ca>
     f48:	38 f4       	brcc	.+14     	; 0xf58 <vRuning+0x248>
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	99 f0       	breq	.+38     	; 0xf74 <vRuning+0x264>
     f4e:	08 f4       	brcc	.+2      	; 0xf52 <vRuning+0x242>
     f50:	55 c0       	rjmp	.+170    	; 0xffc <vRuning+0x2ec>
     f52:	83 30       	cpi	r24, 0x03	; 3
     f54:	f9 f0       	breq	.+62     	; 0xf94 <vRuning+0x284>
     f56:	0e cf       	rjmp	.-484    	; 0xd74 <vRuning+0x64>
     f58:	80 33       	cpi	r24, 0x30	; 48
     f5a:	09 f4       	brne	.+2      	; 0xf5e <vRuning+0x24e>
     f5c:	62 c0       	rjmp	.+196    	; 0x1022 <vRuning+0x312>
     f5e:	18 f4       	brcc	.+6      	; 0xf66 <vRuning+0x256>
     f60:	86 30       	cpi	r24, 0x06	; 6
     f62:	59 f1       	breq	.+86     	; 0xfba <vRuning+0x2aa>
     f64:	07 cf       	rjmp	.-498    	; 0xd74 <vRuning+0x64>
     f66:	80 34       	cpi	r24, 0x40	; 64
     f68:	09 f4       	brne	.+2      	; 0xf6c <vRuning+0x25c>
     f6a:	6e c0       	rjmp	.+220    	; 0x1048 <vRuning+0x338>
     f6c:	80 36       	cpi	r24, 0x60	; 96
     f6e:	09 f4       	brne	.+2      	; 0xf72 <vRuning+0x262>
     f70:	6b c0       	rjmp	.+214    	; 0x1048 <vRuning+0x338>
     f72:	00 cf       	rjmp	.-512    	; 0xd74 <vRuning+0x64>
					case 0x01:// 0 000 0 001
						vServo(angle[5]);//goc lon nhat						
     f74:	f4 01       	movw	r30, r8
     f76:	80 81       	ld	r24, Z
     f78:	91 81       	ldd	r25, Z+1	; 0x01
     f7a:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(CS_A1[0],CS_A2[0],PID);
     f7e:	f6 01       	movw	r30, r12
     f80:	60 81       	ld	r22, Z
     f82:	71 81       	ldd	r23, Z+1	; 0x01
     f84:	40 91 a4 00 	lds	r20, 0x00A4
     f88:	f5 01       	movw	r30, r10
     f8a:	80 81       	ld	r24, Z
     f8c:	91 81       	ldd	r25, Z+1	; 0x01
     f8e:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
     f92:	f0 ce       	rjmp	.-544    	; 0xd74 <vRuning+0x64>
					case 0x03:// 0 000 0 011 
						vServo(angle[4]);						
     f94:	80 91 6e 00 	lds	r24, 0x006E
     f98:	90 91 6f 00 	lds	r25, 0x006F
     f9c:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(CS_A1[1],CS_A2[1],PID);
     fa0:	60 91 76 00 	lds	r22, 0x0076
     fa4:	70 91 77 00 	lds	r23, 0x0077
     fa8:	40 91 a4 00 	lds	r20, 0x00A4
     fac:	80 91 80 00 	lds	r24, 0x0080
     fb0:	90 91 81 00 	lds	r25, 0x0081
     fb4:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
     fb8:	dd ce       	rjmp	.-582    	; 0xd74 <vRuning+0x64>
					case 0x06://0 000 0 110
						vServo(angle[3]);						
     fba:	f3 01       	movw	r30, r6
     fbc:	80 81       	ld	r24, Z
     fbe:	91 81       	ldd	r25, Z+1	; 0x01
     fc0:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(CS_A1[2],CS_A2[2],PID);
     fc4:	f8 01       	movw	r30, r16
     fc6:	60 81       	ld	r22, Z
     fc8:	71 81       	ldd	r23, Z+1	; 0x01
     fca:	40 91 a4 00 	lds	r20, 0x00A4
     fce:	f7 01       	movw	r30, r14
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
     fd8:	cd ce       	rjmp	.-614    	; 0xd74 <vRuning+0x64>
					case 0x04://0 000 0 100
						vServo(angle[2]);
     fda:	80 91 6a 00 	lds	r24, 0x006A
     fde:	90 91 6b 00 	lds	r25, 0x006B
     fe2:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(CS_A1[2],CS_A2[2],PID);
     fe6:	f8 01       	movw	r30, r16
     fe8:	60 81       	ld	r22, Z
     fea:	71 81       	ldd	r23, Z+1	; 0x01
     fec:	40 91 a4 00 	lds	r20, 0x00A4
     ff0:	f7 01       	movw	r30, r14
     ff2:	80 81       	ld	r24, Z
     ff4:	91 81       	ldd	r25, Z+1	; 0x01
     ff6:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
     ffa:	bc ce       	rjmp	.-648    	; 0xd74 <vRuning+0x64>
					case 0x00://0 000 0 000
						vServo(angle[1]);						
     ffc:	80 91 68 00 	lds	r24, 0x0068
    1000:	90 91 69 00 	lds	r25, 0x0069
    1004:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(CS_A1[3],CS_A2[3],PID);
    1008:	60 91 7a 00 	lds	r22, 0x007A
    100c:	70 91 7b 00 	lds	r23, 0x007B
    1010:	40 91 a4 00 	lds	r20, 0x00A4
    1014:	80 91 84 00 	lds	r24, 0x0084
    1018:	90 91 85 00 	lds	r25, 0x0085
    101c:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
    1020:	a9 ce       	rjmp	.-686    	; 0xd74 <vRuning+0x64>
					case 0x30://0 011 0 000
						vServo(-18);						
    1022:	8e ee       	ldi	r24, 0xEE	; 238
    1024:	9f ef       	ldi	r25, 0xFF	; 255
    1026:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(CS_A1[4],CS_A2[4],PID);
    102a:	f2 01       	movw	r30, r4
    102c:	60 81       	ld	r22, Z
    102e:	71 81       	ldd	r23, Z+1	; 0x01
    1030:	40 91 a4 00 	lds	r20, 0x00A4
    1034:	f1 01       	movw	r30, r2
    1036:	80 81       	ld	r24, Z
    1038:	91 81       	ldd	r25, Z+1	; 0x01
    103a:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						pattern = CAR_NORMAL_TRACE;// + 1 + 5;		//return normal run
    103e:	d0 93 a6 00 	sts	0x00A6, r29
    1042:	c0 93 a5 00 	sts	0x00A5, r28
						break;
    1046:	96 ce       	rjmp	.-724    	; 0xd74 <vRuning+0x64>
					case 0x40: //0 100 0 000
					case 0x60: //0 110 0 000
						pattern = CAR_NORMAL_TRACE + 1 + 5;			
    1048:	80 e1       	ldi	r24, 0x10	; 16
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	90 93 a6 00 	sts	0x00A6, r25
    1050:	80 93 a5 00 	sts	0x00A5, r24
						break;
    1054:	8f ce       	rjmp	.-738    	; 0xd74 <vRuning+0x64>
					default:
						break;
				}//end switch 0x64
				break; //end case 11
				case CAR_NORMAL_TRACE + 1 + 5: //case 16
					vOutLed7(CAR_NORMAL_TRACE + 1 + 5);
    1056:	80 e1       	ldi	r24, 0x10	; 16
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
					vMotor(40,-15,false);
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	61 ef       	ldi	r22, 0xF1	; 241
    1062:	7f ef       	ldi	r23, 0xFF	; 255
    1064:	88 e2       	ldi	r24, 0x28	; 40
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
					vServo(angle[6]);
    106c:	e2 e7       	ldi	r30, 0x72	; 114
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	91 81       	ldd	r25, Z+1	; 0x01
    1074:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
					if(ucGetSensorData(0x77) == 0x00){// 0 xxx 0 xxx
    1078:	87 e7       	ldi	r24, 0x77	; 119
    107a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
    107e:	81 11       	cpse	r24, r1
    1080:	79 ce       	rjmp	.-782    	; 0xd74 <vRuning+0x64>
						vServo(0);
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						//_delay_ms(1);
						pattern = CAR_NORMAL_TRACE;
    108a:	d0 93 a6 00 	sts	0x00A6, r29
    108e:	c0 93 a5 00 	sts	0x00A5, r28
    1092:	70 ce       	rjmp	.-800    	; 0xd74 <vRuning+0x64>
					}
					break;
			
// Normal trace, cong trai					
			case (CAR_NORMAL_TRACE + 2)://cong trai
				vOutLed7(CAR_NORMAL_TRACE+2);
    1094:	8c e0       	ldi	r24, 0x0C	; 12
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				PID = false;
    109c:	10 92 a4 00 	sts	0x00A4, r1
				switch(ucGetSensorData(0x77)){// 0 xxx 0 xxx
    10a0:	87 e7       	ldi	r24, 0x77	; 119
    10a2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
    10a6:	84 30       	cpi	r24, 0x04	; 4
    10a8:	09 f4       	brne	.+2      	; 0x10ac <vRuning+0x39c>
    10aa:	7e c0       	rjmp	.+252    	; 0x11a8 <vRuning+0x498>
    10ac:	48 f4       	brcc	.+18     	; 0x10c0 <vRuning+0x3b0>
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <vRuning+0x3a4>
    10b2:	8d c0       	rjmp	.+282    	; 0x11ce <vRuning+0x4be>
    10b4:	08 f4       	brcc	.+2      	; 0x10b8 <vRuning+0x3a8>
    10b6:	62 c0       	rjmp	.+196    	; 0x117c <vRuning+0x46c>
    10b8:	83 30       	cpi	r24, 0x03	; 3
    10ba:	09 f4       	brne	.+2      	; 0x10be <vRuning+0x3ae>
    10bc:	88 c0       	rjmp	.+272    	; 0x11ce <vRuning+0x4be>
    10be:	5a ce       	rjmp	.-844    	; 0xd74 <vRuning+0x64>
    10c0:	80 33       	cpi	r24, 0x30	; 48
    10c2:	99 f1       	breq	.+102    	; 0x112a <vRuning+0x41a>
    10c4:	20 f4       	brcc	.+8      	; 0x10ce <vRuning+0x3be>
    10c6:	80 31       	cpi	r24, 0x10	; 16
    10c8:	09 f4       	brne	.+2      	; 0x10cc <vRuning+0x3bc>
    10ca:	42 c0       	rjmp	.+132    	; 0x1150 <vRuning+0x440>
    10cc:	53 ce       	rjmp	.-858    	; 0xd74 <vRuning+0x64>
    10ce:	80 34       	cpi	r24, 0x40	; 64
    10d0:	19 f0       	breq	.+6      	; 0x10d8 <vRuning+0x3c8>
    10d2:	80 36       	cpi	r24, 0x60	; 96
    10d4:	a1 f0       	breq	.+40     	; 0x10fe <vRuning+0x3ee>
    10d6:	4e ce       	rjmp	.-868    	; 0xd74 <vRuning+0x64>
					case 0x40://0 100 0 000
						vServo(-angle[5]);						
    10d8:	f4 01       	movw	r30, r8
    10da:	80 81       	ld	r24, Z
    10dc:	91 81       	ldd	r25, Z+1	; 0x01
    10de:	91 95       	neg	r25
    10e0:	81 95       	neg	r24
    10e2:	91 09       	sbc	r25, r1
    10e4:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(CS_A2[0],CS_A1[0],PID);
    10e8:	f5 01       	movw	r30, r10
    10ea:	60 81       	ld	r22, Z
    10ec:	71 81       	ldd	r23, Z+1	; 0x01
    10ee:	40 91 a4 00 	lds	r20, 0x00A4
    10f2:	f6 01       	movw	r30, r12
    10f4:	80 81       	ld	r24, Z
    10f6:	91 81       	ldd	r25, Z+1	; 0x01
    10f8:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
    10fc:	3b ce       	rjmp	.-906    	; 0xd74 <vRuning+0x64>
					case 0x60://0 110 0 000
						vServo(-angle[4]);
    10fe:	80 91 6e 00 	lds	r24, 0x006E
    1102:	90 91 6f 00 	lds	r25, 0x006F
    1106:	91 95       	neg	r25
    1108:	81 95       	neg	r24
    110a:	91 09       	sbc	r25, r1
    110c:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(CS_A2[1],CS_A1[1],PID);
    1110:	60 91 80 00 	lds	r22, 0x0080
    1114:	70 91 81 00 	lds	r23, 0x0081
    1118:	40 91 a4 00 	lds	r20, 0x00A4
    111c:	80 91 76 00 	lds	r24, 0x0076
    1120:	90 91 77 00 	lds	r25, 0x0077
    1124:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
    1128:	25 ce       	rjmp	.-950    	; 0xd74 <vRuning+0x64>
					case 0x30://0 011 0 010
						vServo(-angle[3]);
    112a:	f3 01       	movw	r30, r6
    112c:	80 81       	ld	r24, Z
    112e:	91 81       	ldd	r25, Z+1	; 0x01
    1130:	91 95       	neg	r25
    1132:	81 95       	neg	r24
    1134:	91 09       	sbc	r25, r1
    1136:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(CS_A2[2],CS_A1[2],PID);
    113a:	f7 01       	movw	r30, r14
    113c:	60 81       	ld	r22, Z
    113e:	71 81       	ldd	r23, Z+1	; 0x01
    1140:	40 91 a4 00 	lds	r20, 0x00A4
    1144:	f8 01       	movw	r30, r16
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
    114e:	12 ce       	rjmp	.-988    	; 0xd74 <vRuning+0x64>
					case 0x10://0 001 0 000
						vServo(-angle[2]);
    1150:	80 91 6a 00 	lds	r24, 0x006A
    1154:	90 91 6b 00 	lds	r25, 0x006B
    1158:	91 95       	neg	r25
    115a:	81 95       	neg	r24
    115c:	91 09       	sbc	r25, r1
    115e:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(CS_A2[3],CS_A1[3],PID);
    1162:	60 91 84 00 	lds	r22, 0x0084
    1166:	70 91 85 00 	lds	r23, 0x0085
    116a:	40 91 a4 00 	lds	r20, 0x00A4
    116e:	80 91 7a 00 	lds	r24, 0x007A
    1172:	90 91 7b 00 	lds	r25, 0x007B
    1176:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
    117a:	fc cd       	rjmp	.-1032   	; 0xd74 <vRuning+0x64>
					case 0x00:
						vServo(-angle[1]);
    117c:	80 91 68 00 	lds	r24, 0x0068
    1180:	90 91 69 00 	lds	r25, 0x0069
    1184:	91 95       	neg	r25
    1186:	81 95       	neg	r24
    1188:	91 09       	sbc	r25, r1
    118a:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(CS_A2[3],CS_A1[3],PID);
    118e:	60 91 84 00 	lds	r22, 0x0084
    1192:	70 91 85 00 	lds	r23, 0x0085
    1196:	40 91 a4 00 	lds	r20, 0x00A4
    119a:	80 91 7a 00 	lds	r24, 0x007A
    119e:	90 91 7b 00 	lds	r25, 0x007B
    11a2:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
    11a6:	e6 cd       	rjmp	.-1076   	; 0xd74 <vRuning+0x64>
					case 0x04://0 000 0 100
						vServo(18);
    11a8:	82 e1       	ldi	r24, 0x12	; 18
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(CS_A2[4],CS_A1[4],PID);
    11b0:	f1 01       	movw	r30, r2
    11b2:	60 81       	ld	r22, Z
    11b4:	71 81       	ldd	r23, Z+1	; 0x01
    11b6:	40 91 a4 00 	lds	r20, 0x00A4
    11ba:	f2 01       	movw	r30, r4
    11bc:	80 81       	ld	r24, Z
    11be:	91 81       	ldd	r25, Z+1	; 0x01
    11c0:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						pattern = CAR_NORMAL_TRACE;// + 2 + 5;		
    11c4:	d0 93 a6 00 	sts	0x00A6, r29
    11c8:	c0 93 a5 00 	sts	0x00A5, r28
						break;
    11cc:	d3 cd       	rjmp	.-1114   	; 0xd74 <vRuning+0x64>
					case 0x01:
					case 0x03:
						pattern = CAR_NORMAL_TRACE + 2 + 5;
    11ce:	81 e1       	ldi	r24, 0x11	; 17
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	90 93 a6 00 	sts	0x00A6, r25
    11d6:	80 93 a5 00 	sts	0x00A5, r24
					break;
    11da:	cc cd       	rjmp	.-1128   	; 0xd74 <vRuning+0x64>
					default:						
						break;
				}//end switch 0x13
				break;//end case 12
			case CAR_NORMAL_TRACE + 2 + 5: //case 17
				vOutLed7(CAR_NORMAL_TRACE + 2 + 5);
    11dc:	81 e1       	ldi	r24, 0x11	; 17
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				vMotor(-15,40,false);
    11e4:	40 e0       	ldi	r20, 0x00	; 0
    11e6:	68 e2       	ldi	r22, 0x28	; 40
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	81 ef       	ldi	r24, 0xF1	; 241
    11ec:	9f ef       	ldi	r25, 0xFF	; 255
    11ee:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
				vServo(-angle[6]);
    11f2:	e2 e7       	ldi	r30, 0x72	; 114
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	91 81       	ldd	r25, Z+1	; 0x01
    11fa:	91 95       	neg	r25
    11fc:	81 95       	neg	r24
    11fe:	91 09       	sbc	r25, r1
    1200:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
				if (ucGetSensorData(0x77) == 0x00){//0 xxx 0 xxx
    1204:	87 e7       	ldi	r24, 0x77	; 119
    1206:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
    120a:	81 11       	cpse	r24, r1
    120c:	b3 cd       	rjmp	.-1178   	; 0xd74 <vRuning+0x64>
					vServo(0);
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
					//_delay_ms(1);
					pattern = CAR_NORMAL_TRACE;
    1216:	d0 93 a6 00 	sts	0x00A6, r29
    121a:	c0 93 a5 00 	sts	0x00A5, r28
    121e:	aa cd       	rjmp	.-1196   	; 0xd74 <vRuning+0x64>
				}
				break;
	//Cross line
			case CAR_CROSS_LINE: //(case 20) 0 111 1 111
				vOutLed7(CAR_CROSS_LINE);	
    1220:	84 e1       	ldi	r24, 0x14	; 20
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				vSetBF(true,true);	
    1228:	61 e0       	ldi	r22, 0x01	; 1
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <vSetBF>
				if(cnt_timer_1ms > 50){//5ms
    1230:	80 91 a9 00 	lds	r24, 0x00A9
    1234:	90 91 aa 00 	lds	r25, 0x00AA
    1238:	c3 97       	sbiw	r24, 0x33	; 51
    123a:	08 f4       	brcc	.+2      	; 0x123e <vRuning+0x52e>
    123c:	9b cd       	rjmp	.-1226   	; 0xd74 <vRuning+0x64>
					cnt_int1 = 0;
    123e:	10 92 a8 00 	sts	0x00A8, r1
    1242:	10 92 a7 00 	sts	0x00A7, r1
					pattern = CAR_CROSS_LINE + 1;
    1246:	85 e1       	ldi	r24, 0x15	; 21
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	90 93 a6 00 	sts	0x00A6, r25
    124e:	80 93 a5 00 	sts	0x00A5, r24
    1252:	90 cd       	rjmp	.-1248   	; 0xd74 <vRuning+0x64>
				}
				break; //CAR_CROSS_LINE
			case (CAR_CROSS_LINE + 1)://on dinh				
				switch(ucGetSensorData(0x77)){//0 fff 0 fff
    1254:	87 e7       	ldi	r24, 0x77	; 119
    1256:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
    125a:	86 30       	cpi	r24, 0x06	; 6
    125c:	99 f1       	breq	.+102    	; 0x12c4 <vRuning+0x5b4>
    125e:	60 f4       	brcc	.+24     	; 0x1278 <vRuning+0x568>
    1260:	82 30       	cpi	r24, 0x02	; 2
    1262:	d9 f1       	breq	.+118    	; 0x12da <vRuning+0x5ca>
    1264:	18 f4       	brcc	.+6      	; 0x126c <vRuning+0x55c>
    1266:	88 23       	and	r24, r24
    1268:	b1 f0       	breq	.+44     	; 0x1296 <vRuning+0x586>
    126a:	79 c0       	rjmp	.+242    	; 0x135e <vRuning+0x64e>
    126c:	83 30       	cpi	r24, 0x03	; 3
    126e:	09 f4       	brne	.+2      	; 0x1272 <vRuning+0x562>
    1270:	3f c0       	rjmp	.+126    	; 0x12f0 <vRuning+0x5e0>
    1272:	84 30       	cpi	r24, 0x04	; 4
    1274:	e1 f0       	breq	.+56     	; 0x12ae <vRuning+0x59e>
    1276:	73 c0       	rjmp	.+230    	; 0x135e <vRuning+0x64e>
    1278:	80 32       	cpi	r24, 0x20	; 32
    127a:	09 f4       	brne	.+2      	; 0x127e <vRuning+0x56e>
    127c:	5b c0       	rjmp	.+182    	; 0x1334 <vRuning+0x624>
    127e:	20 f4       	brcc	.+8      	; 0x1288 <vRuning+0x578>
    1280:	80 31       	cpi	r24, 0x10	; 16
    1282:	09 f4       	brne	.+2      	; 0x1286 <vRuning+0x576>
    1284:	40 c0       	rjmp	.+128    	; 0x1306 <vRuning+0x5f6>
    1286:	6b c0       	rjmp	.+214    	; 0x135e <vRuning+0x64e>
    1288:	80 33       	cpi	r24, 0x30	; 48
    128a:	09 f4       	brne	.+2      	; 0x128e <vRuning+0x57e>
    128c:	48 c0       	rjmp	.+144    	; 0x131e <vRuning+0x60e>
    128e:	80 36       	cpi	r24, 0x60	; 96
    1290:	09 f4       	brne	.+2      	; 0x1294 <vRuning+0x584>
    1292:	5b c0       	rjmp	.+182    	; 0x134a <vRuning+0x63a>
    1294:	64 c0       	rjmp	.+200    	; 0x135e <vRuning+0x64e>
					case 0x00:// 0 000 x 000
						vServo(0);
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(20,20,true);
    129e:	41 e0       	ldi	r20, 0x01	; 1
    12a0:	64 e1       	ldi	r22, 0x14	; 20
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	84 e1       	ldi	r24, 0x14	; 20
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
    12ac:	58 c0       	rjmp	.+176    	; 0x135e <vRuning+0x64e>
					//
					case  0x04: // 0 000 x 100
						vServo(10);
    12ae:	ce 01       	movw	r24, r28
    12b0:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(15,13,true);
    12b4:	41 e0       	ldi	r20, 0x01	; 1
    12b6:	6d e0       	ldi	r22, 0x0D	; 13
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	8f e0       	ldi	r24, 0x0F	; 15
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
    12c2:	4d c0       	rjmp	.+154    	; 0x135e <vRuning+0x64e>
					case 0x06: // 0 000 x 110
						vServo(15);
    12c4:	8f e0       	ldi	r24, 0x0F	; 15
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(15,10,true);
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	be 01       	movw	r22, r28
    12d0:	8f e0       	ldi	r24, 0x0F	; 15
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
    12d8:	42 c0       	rjmp	.+132    	; 0x135e <vRuning+0x64e>
					case  0x02: // 0 000 0 010
						vServo(20);
    12da:	84 e1       	ldi	r24, 0x14	; 20
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(10,5,false);
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	65 e0       	ldi	r22, 0x05	; 5
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	ce 01       	movw	r24, r28
    12ea:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
    12ee:	37 c0       	rjmp	.+110    	; 0x135e <vRuning+0x64e>
					case 0x03: // 0 000 x 011
						vServo(25);
    12f0:	89 e1       	ldi	r24, 0x19	; 25
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(10,-10,false);
    12f8:	40 e0       	ldi	r20, 0x00	; 0
    12fa:	66 ef       	ldi	r22, 0xF6	; 246
    12fc:	7f ef       	ldi	r23, 0xFF	; 255
    12fe:	ce 01       	movw	r24, r28
    1300:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
    1304:	2c c0       	rjmp	.+88     	; 0x135e <vRuning+0x64e>
					////
					case 0x10: //0 001 x 000
						vServo(-10);
    1306:	86 ef       	ldi	r24, 0xF6	; 246
    1308:	9f ef       	ldi	r25, 0xFF	; 255
    130a:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(13,15,false);
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	6f e0       	ldi	r22, 0x0F	; 15
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	8d e0       	ldi	r24, 0x0D	; 13
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
    131c:	20 c0       	rjmp	.+64     	; 0x135e <vRuning+0x64e>
					case 0x30: // 0 011 x 000
						vServo(-15);
    131e:	81 ef       	ldi	r24, 0xF1	; 241
    1320:	9f ef       	ldi	r25, 0xFF	; 255
    1322:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(10,15,false);
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	6f e0       	ldi	r22, 0x0F	; 15
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	ce 01       	movw	r24, r28
    132e:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
    1332:	15 c0       	rjmp	.+42     	; 0x135e <vRuning+0x64e>
					case 0x20: // 0 010 x 000
						vServo(-20);
    1334:	8c ee       	ldi	r24, 0xEC	; 236
    1336:	9f ef       	ldi	r25, 0xFF	; 255
    1338:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(5,10,false);
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	be 01       	movw	r22, r28
    1340:	85 e0       	ldi	r24, 0x05	; 5
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
    1348:	0a c0       	rjmp	.+20     	; 0x135e <vRuning+0x64e>
					case 0x60: // 0 110 x 000
						vServo(-25);
    134a:	87 ee       	ldi	r24, 0xE7	; 231
    134c:	9f ef       	ldi	r25, 0xFF	; 255
    134e:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
						vMotor(10,-10,false);
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	66 ef       	ldi	r22, 0xF6	; 246
    1356:	7f ef       	ldi	r23, 0xFF	; 255
    1358:	ce 01       	movw	r24, r28
    135a:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
						break;
				}				
				if(cnt_int1 > 150){
    135e:	80 91 a7 00 	lds	r24, 0x00A7
    1362:	90 91 a8 00 	lds	r25, 0x00A8
    1366:	87 39       	cpi	r24, 0x97	; 151
    1368:	91 05       	cpc	r25, r1
    136a:	0c f4       	brge	.+2      	; 0x136e <vRuning+0x65e>
    136c:	03 cd       	rjmp	.-1530   	; 0xd74 <vRuning+0x64>
					pattern = CAR_CROSS_LINE + 2;
    136e:	e6 e1       	ldi	r30, 0x16	; 22
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	f0 93 a6 00 	sts	0x00A6, r31
    1376:	e0 93 a5 00 	sts	0x00A5, r30
    137a:	fc cc       	rjmp	.-1544   	; 0xd74 <vRuning+0x64>
				}
				break;
			case (CAR_CROSS_LINE + 2)://nhan tin hieu va queo
				followLineAfterSignal(20,true);
    137c:	61 e0       	ldi	r22, 0x01	; 1
    137e:	84 e1       	ldi	r24, 0x14	; 20
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 dd 05 	call	0xbba	; 0xbba <followLineAfterSignal>
				if(ucGetSensorData(0x70) == 0x70){//0 xxx 0 000
    1386:	80 e7       	ldi	r24, 0x70	; 112
    1388:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
    138c:	80 37       	cpi	r24, 0x70	; 112
    138e:	51 f4       	brne	.+20     	; 0x13a4 <vRuning+0x694>
					cnt_timer_1ms = 0;
    1390:	10 92 aa 00 	sts	0x00AA, r1
    1394:	10 92 a9 00 	sts	0x00A9, r1
					pattern = CAR_TURN_LEFT;					
    1398:	8e e1       	ldi	r24, 0x1E	; 30
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	90 93 a6 00 	sts	0x00A6, r25
    13a0:	80 93 a5 00 	sts	0x00A5, r24
				}
				if(ucGetSensorData(0x07) == 0x07){//0 000 0 xxx
    13a4:	87 e0       	ldi	r24, 0x07	; 7
    13a6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
    13aa:	87 30       	cpi	r24, 0x07	; 7
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <vRuning+0x6a0>
    13ae:	e2 cc       	rjmp	.-1596   	; 0xd74 <vRuning+0x64>
					cnt_timer_1ms = 0;
    13b0:	10 92 aa 00 	sts	0x00AA, r1
    13b4:	10 92 a9 00 	sts	0x00A9, r1
					pattern = CAR_TURN_RIGHT;
    13b8:	88 e2       	ldi	r24, 0x28	; 40
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	90 93 a6 00 	sts	0x00A6, r25
    13c0:	80 93 a5 00 	sts	0x00A5, r24
    13c4:	d7 cc       	rjmp	.-1618   	; 0xd74 <vRuning+0x64>
				}
				break;
//Car turn right
			case CAR_TURN_RIGHT: // 30
				vOutLed7(CAR_TURN_RIGHT);
    13c6:	88 e2       	ldi	r24, 0x28	; 40
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				
				vServo(60);
    13ce:	8c e3       	ldi	r24, 0x3C	; 60
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
				vMotor(60,-20,false);
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	6c ee       	ldi	r22, 0xEC	; 236
    13da:	7f ef       	ldi	r23, 0xFF	; 255
    13dc:	8c e3       	ldi	r24, 0x3C	; 60
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
			
				pattern = CAR_TURN_RIGHT + 1;
    13e4:	89 e2       	ldi	r24, 0x29	; 41
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	90 93 a6 00 	sts	0x00A6, r25
    13ec:	80 93 a5 00 	sts	0x00A5, r24
				cnt_timer_1ms = 0;
    13f0:	10 92 aa 00 	sts	0x00AA, r1
    13f4:	10 92 a9 00 	sts	0x00A9, r1
			break;
    13f8:	bd cc       	rjmp	.-1670   	; 0xd74 <vRuning+0x64>
			case (CAR_TURN_RIGHT + 1) :
				vOutLed7(CAR_TURN_RIGHT + 1);
    13fa:	89 e2       	ldi	r24, 0x29	; 41
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				if(cnt_timer_1ms > 60){
    1402:	80 91 a9 00 	lds	r24, 0x00A9
    1406:	90 91 aa 00 	lds	r25, 0x00AA
    140a:	cd 97       	sbiw	r24, 0x3d	; 61
    140c:	08 f4       	brcc	.+2      	; 0x1410 <vRuning+0x700>
    140e:	b2 cc       	rjmp	.-1692   	; 0xd74 <vRuning+0x64>
					pattern = CAR_TURN_RIGHT + 2;
    1410:	8a e2       	ldi	r24, 0x2A	; 42
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	90 93 a6 00 	sts	0x00A6, r25
    1418:	80 93 a5 00 	sts	0x00A5, r24
    141c:	ab cc       	rjmp	.-1706   	; 0xd74 <vRuning+0x64>
				}
				break;
			case (CAR_TURN_RIGHT + 2):
				vOutLed7(CAR_TURN_RIGHT + 2);
    141e:	8a e2       	ldi	r24, 0x2A	; 42
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				if(ucGetSensorData(0x77) == 0x02){ // 0 xxx 0 xxx. 0 000 0 011
    1426:	87 e7       	ldi	r24, 0x77	; 119
    1428:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
    142c:	82 30       	cpi	r24, 0x02	; 2
    142e:	09 f0       	breq	.+2      	; 0x1432 <vRuning+0x722>
    1430:	a1 cc       	rjmp	.-1726   	; 0xd74 <vRuning+0x64>
					pattern = CAR_NORMAL_TRACE;
    1432:	d0 93 a6 00 	sts	0x00A6, r29
    1436:	c0 93 a5 00 	sts	0x00A5, r28
					cnt_timer_1ms = 0;
    143a:	10 92 aa 00 	sts	0x00AA, r1
    143e:	10 92 a9 00 	sts	0x00A9, r1
					vSetBF(false,false);
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	0e 94 7d 01 	call	0x2fa	; 0x2fa <vSetBF>
    144a:	94 cc       	rjmp	.-1752   	; 0xd74 <vRuning+0x64>
				}
				break;
//Car turn left
			case CAR_TURN_LEFT: // 30
				vOutLed7(CAR_TURN_LEFT);
    144c:	8e e1       	ldi	r24, 0x1E	; 30
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				
				vServo(-60);
    1454:	84 ec       	ldi	r24, 0xC4	; 196
    1456:	9f ef       	ldi	r25, 0xFF	; 255
    1458:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
				vMotor(-20,60,false);
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	6c e3       	ldi	r22, 0x3C	; 60
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	8c ee       	ldi	r24, 0xEC	; 236
    1464:	9f ef       	ldi	r25, 0xFF	; 255
    1466:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
				
				pattern = CAR_TURN_LEFT + 1;
    146a:	8f e1       	ldi	r24, 0x1F	; 31
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	90 93 a6 00 	sts	0x00A6, r25
    1472:	80 93 a5 00 	sts	0x00A5, r24
				cnt_timer_1ms = 0;
    1476:	10 92 aa 00 	sts	0x00AA, r1
    147a:	10 92 a9 00 	sts	0x00A9, r1
				break;
    147e:	7a cc       	rjmp	.-1804   	; 0xd74 <vRuning+0x64>
			case (CAR_TURN_LEFT + 1) :
				if(cnt_timer_1ms > 60){
    1480:	80 91 a9 00 	lds	r24, 0x00A9
    1484:	90 91 aa 00 	lds	r25, 0x00AA
    1488:	cd 97       	sbiw	r24, 0x3d	; 61
    148a:	08 f4       	brcc	.+2      	; 0x148e <vRuning+0x77e>
    148c:	73 cc       	rjmp	.-1818   	; 0xd74 <vRuning+0x64>
					pattern = CAR_TURN_LEFT + 2;
    148e:	80 e2       	ldi	r24, 0x20	; 32
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	90 93 a6 00 	sts	0x00A6, r25
    1496:	80 93 a5 00 	sts	0x00A5, r24
    149a:	6c cc       	rjmp	.-1832   	; 0xd74 <vRuning+0x64>
				}
				break;
			case (CAR_TURN_LEFT + 2):
				vOutLed7(CAR_TURN_LEFT + 2);
    149c:	80 e2       	ldi	r24, 0x20	; 32
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				if(ucGetSensorData(0x77) == 0x60){ // 0 xxx 0 xxx
    14a4:	87 e7       	ldi	r24, 0x77	; 119
    14a6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
    14aa:	80 36       	cpi	r24, 0x60	; 96
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <vRuning+0x7a0>
    14ae:	62 cc       	rjmp	.-1852   	; 0xd74 <vRuning+0x64>
					pattern = CAR_NORMAL_TRACE;
    14b0:	d0 93 a6 00 	sts	0x00A6, r29
    14b4:	c0 93 a5 00 	sts	0x00A5, r28
					cnt_timer_1ms = 0;
    14b8:	10 92 aa 00 	sts	0x00AA, r1
    14bc:	10 92 a9 00 	sts	0x00A9, r1
					vSetBF(false,false);
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <vSetBF>
    14c8:	55 cc       	rjmp	.-1878   	; 0xd74 <vRuning+0x64>
				}
				break;
//Right line - chuyen lan		
			case CAR_RIGHT_LINE://(case 51) 0 000 1 111
				vOutLed7(CAR_RIGHT_LINE);
    14ca:	83 e3       	ldi	r24, 0x33	; 51
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				while(cnt_timer_1ms < 1);//1ms
    14d2:	80 91 a9 00 	lds	r24, 0x00A9
    14d6:	90 91 aa 00 	lds	r25, 0x00AA
    14da:	89 2b       	or	r24, r25
    14dc:	d1 f3       	breq	.-12     	; 0x14d2 <vRuning+0x7c2>
				if(check_crossline(CHECK_FROM_RIGHT)){
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	0e 94 c2 05 	call	0xb84	; 0xb84 <check_crossline>
    14e4:	89 2b       	or	r24, r25
    14e6:	51 f0       	breq	.+20     	; 0x14fc <vRuning+0x7ec>
					cnt_timer_1ms = 0;
    14e8:	10 92 aa 00 	sts	0x00AA, r1
    14ec:	10 92 a9 00 	sts	0x00A9, r1
					pattern = CAR_CROSS_LINE;
    14f0:	84 e1       	ldi	r24, 0x14	; 20
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	90 93 a6 00 	sts	0x00A6, r25
    14f8:	80 93 a5 00 	sts	0x00A5, r24
				}
				if(cnt_timer_1ms > 50){//50ms
    14fc:	80 91 a9 00 	lds	r24, 0x00A9
    1500:	90 91 aa 00 	lds	r25, 0x00AA
    1504:	c3 97       	sbiw	r24, 0x33	; 51
    1506:	08 f4       	brcc	.+2      	; 0x150a <vRuning+0x7fa>
    1508:	35 cc       	rjmp	.-1942   	; 0xd74 <vRuning+0x64>
					pattern = CAR_RIGHT_LINE + 1;
    150a:	84 e3       	ldi	r24, 0x34	; 52
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	90 93 a6 00 	sts	0x00A6, r25
    1512:	80 93 a5 00 	sts	0x00A5, r24
					vLedCtrl(LED_STARTUP_COMPELETE);
    1516:	84 e0       	ldi	r24, 0x04	; 4
    1518:	0e 94 8b 05 	call	0xb16	; 0xb16 <vLedCtrl>
					cnt_int1 = 0;
    151c:	10 92 a8 00 	sts	0x00A8, r1
    1520:	10 92 a7 00 	sts	0x00A7, r1
    1524:	27 cc       	rjmp	.-1970   	; 0xd74 <vRuning+0x64>
				}
				break;	
			case (CAR_RIGHT_LINE + 1)://is right line, chuyen lan trai
				vOutLed7(CAR_RIGHT_LINE + 1);
    1526:	84 e3       	ldi	r24, 0x34	; 52
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				vSetBF(true,true);
    152e:	61 e0       	ldi	r22, 0x01	; 1
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	0e 94 7d 01 	call	0x2fa	; 0x2fa <vSetBF>
				followLineAfterSignal(60,true);
    1536:	61 e0       	ldi	r22, 0x01	; 1
    1538:	8c e3       	ldi	r24, 0x3C	; 60
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 dd 05 	call	0xbba	; 0xbba <followLineAfterSignal>
				if(cnt_int1 > 140){
    1540:	80 91 a7 00 	lds	r24, 0x00A7
    1544:	90 91 a8 00 	lds	r25, 0x00A8
    1548:	8d 38       	cpi	r24, 0x8D	; 141
    154a:	91 05       	cpc	r25, r1
    154c:	0c f4       	brge	.+2      	; 0x1550 <vRuning+0x840>
    154e:	12 cc       	rjmp	.-2012   	; 0xd74 <vRuning+0x64>
					pattern = CAR_RIGHT_LINE + 2;
    1550:	85 e3       	ldi	r24, 0x35	; 53
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	90 93 a6 00 	sts	0x00A6, r25
    1558:	80 93 a5 00 	sts	0x00A5, r24
					vSetBF(false,false);
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	0e 94 7d 01 	call	0x2fa	; 0x2fa <vSetBF>
    1564:	07 cc       	rjmp	.-2034   	; 0xd74 <vRuning+0x64>
				}
				break;
			case (CAR_RIGHT_LINE + 2):
				vOutLed7(CAR_RIGHT_LINE+2);
    1566:	85 e3       	ldi	r24, 0x35	; 53
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				vServo(38);
    156e:	86 e2       	ldi	r24, 0x26	; 38
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
				vMotor(15,15,true);
    1576:	41 e0       	ldi	r20, 0x01	; 1
    1578:	6f e0       	ldi	r22, 0x0F	; 15
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	8f e0       	ldi	r24, 0x0F	; 15
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
				if(ucGetSensorData(0x01) == 0x01){//0 000 0 00x
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	09 f0       	breq	.+2      	; 0x1590 <vRuning+0x880>
    158e:	f2 cb       	rjmp	.-2076   	; 0xd74 <vRuning+0x64>
					vServo(10);
    1590:	ce 01       	movw	r24, r28
    1592:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
					pattern = CAR_RIGHT_LINE + 3;
    1596:	86 e3       	ldi	r24, 0x36	; 54
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	90 93 a6 00 	sts	0x00A6, r25
    159e:	80 93 a5 00 	sts	0x00A5, r24
    15a2:	e8 cb       	rjmp	.-2096   	; 0xd74 <vRuning+0x64>
				}
				break;
			case (CAR_RIGHT_LINE + 3):
				vOutLed7(CAR_RIGHT_LINE+3);
    15a4:	86 e3       	ldi	r24, 0x36	; 54
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				vMotor(20,20,true);
    15ac:	41 e0       	ldi	r20, 0x01	; 1
    15ae:	64 e1       	ldi	r22, 0x14	; 20
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	84 e1       	ldi	r24, 0x14	; 20
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
				if(ucGetSensorData(0x08) == 0x08){//0 000 x 000
    15ba:	88 e0       	ldi	r24, 0x08	; 8
    15bc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
    15c0:	88 30       	cpi	r24, 0x08	; 8
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <vRuning+0x8b6>
    15c4:	d7 cb       	rjmp	.-2130   	; 0xd74 <vRuning+0x64>
					vServo(-20);
    15c6:	8c ee       	ldi	r24, 0xEC	; 236
    15c8:	9f ef       	ldi	r25, 0xFF	; 255
    15ca:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
					cnt_timer_1ms = 0;
    15ce:	10 92 aa 00 	sts	0x00AA, r1
    15d2:	10 92 a9 00 	sts	0x00A9, r1
					while(cnt_timer_1ms < 1);
    15d6:	80 91 a9 00 	lds	r24, 0x00A9
    15da:	90 91 aa 00 	lds	r25, 0x00AA
    15de:	89 2b       	or	r24, r25
    15e0:	d1 f3       	breq	.-12     	; 0x15d6 <vRuning+0x8c6>
					pattern = CAR_RIGHT_LINE + 4;
    15e2:	87 e3       	ldi	r24, 0x37	; 55
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	90 93 a6 00 	sts	0x00A6, r25
    15ea:	80 93 a5 00 	sts	0x00A5, r24
    15ee:	c2 cb       	rjmp	.-2172   	; 0xd74 <vRuning+0x64>
				}
				break;
			case (CAR_RIGHT_LINE + 4):
				vOutLed7(CAR_RIGHT_LINE+4);
    15f0:	87 e3       	ldi	r24, 0x37	; 55
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				vServo(-30);
    15f8:	82 ee       	ldi	r24, 0xE2	; 226
    15fa:	9f ef       	ldi	r25, 0xFF	; 255
    15fc:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
				while(cnt_timer_1ms < 5);
    1600:	80 91 a9 00 	lds	r24, 0x00A9
    1604:	90 91 aa 00 	lds	r25, 0x00AA
    1608:	05 97       	sbiw	r24, 0x05	; 5
    160a:	d0 f3       	brcs	.-12     	; 0x1600 <vRuning+0x8f0>
				pattern = CAR_NORMAL_TRACE;
    160c:	d0 93 a6 00 	sts	0x00A6, r29
    1610:	c0 93 a5 00 	sts	0x00A5, r28
				break;				
    1614:	af cb       	rjmp	.-2210   	; 0xd74 <vRuning+0x64>
			
//Left line			
			case CAR_LEFT_LINE:// (case 61) 0 111 1 000	
				vOutLed7(CAR_LEFT_LINE);
    1616:	8d e3       	ldi	r24, 0x3D	; 61
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				while(cnt_timer_1ms < 1);//1ms	
    161e:	80 91 a9 00 	lds	r24, 0x00A9
    1622:	90 91 aa 00 	lds	r25, 0x00AA
    1626:	89 2b       	or	r24, r25
    1628:	d1 f3       	breq	.-12     	; 0x161e <vRuning+0x90e>
				//check cross line
				if(check_crossline(CHECK_FROM_LEFT)){
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	0e 94 c2 05 	call	0xb84	; 0xb84 <check_crossline>
    1630:	89 2b       	or	r24, r25
    1632:	51 f0       	breq	.+20     	; 0x1648 <vRuning+0x938>
					cnt_timer_1ms = 0;
    1634:	10 92 aa 00 	sts	0x00AA, r1
    1638:	10 92 a9 00 	sts	0x00A9, r1
					pattern = CAR_CROSS_LINE;
    163c:	84 e1       	ldi	r24, 0x14	; 20
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	90 93 a6 00 	sts	0x00A6, r25
    1644:	80 93 a5 00 	sts	0x00A5, r24
				}
				if(cnt_timer_1ms > 50){//50ms
    1648:	80 91 a9 00 	lds	r24, 0x00A9
    164c:	90 91 aa 00 	lds	r25, 0x00AA
    1650:	c3 97       	sbiw	r24, 0x33	; 51
    1652:	08 f4       	brcc	.+2      	; 0x1656 <vRuning+0x946>
    1654:	8f cb       	rjmp	.-2274   	; 0xd74 <vRuning+0x64>
					vLedCtrl(LED_STARTUP_COMPELETE);
    1656:	84 e0       	ldi	r24, 0x04	; 4
    1658:	0e 94 8b 05 	call	0xb16	; 0xb16 <vLedCtrl>
					pattern = CAR_LEFT_LINE + 1;
    165c:	8e e3       	ldi	r24, 0x3E	; 62
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	90 93 a6 00 	sts	0x00A6, r25
    1664:	80 93 a5 00 	sts	0x00A5, r24
					cnt_int1 = 0;
    1668:	10 92 a8 00 	sts	0x00A8, r1
    166c:	10 92 a7 00 	sts	0x00A7, r1
    1670:	81 cb       	rjmp	.-2302   	; 0xd74 <vRuning+0x64>
				}
				break;

			case (CAR_LEFT_LINE + 1)://is right line, chuyen lan trai				
				vOutLed7(CAR_LEFT_LINE + 1);
    1672:	8e e3       	ldi	r24, 0x3E	; 62
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				vSetBF(true,true);
    167a:	61 e0       	ldi	r22, 0x01	; 1
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <vSetBF>
				followLineAfterSignal(60,true);
    1682:	61 e0       	ldi	r22, 0x01	; 1
    1684:	8c e3       	ldi	r24, 0x3C	; 60
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 dd 05 	call	0xbba	; 0xbba <followLineAfterSignal>
				if(cnt_int1 > 140){
    168c:	80 91 a7 00 	lds	r24, 0x00A7
    1690:	90 91 a8 00 	lds	r25, 0x00A8
    1694:	8d 38       	cpi	r24, 0x8D	; 141
    1696:	91 05       	cpc	r25, r1
    1698:	0c f4       	brge	.+2      	; 0x169c <vRuning+0x98c>
    169a:	6c cb       	rjmp	.-2344   	; 0xd74 <vRuning+0x64>
					pattern = CAR_LEFT_LINE + 2;
    169c:	8f e3       	ldi	r24, 0x3F	; 63
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	90 93 a6 00 	sts	0x00A6, r25
    16a4:	80 93 a5 00 	sts	0x00A5, r24
					vSetBF(false,false);
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	0e 94 7d 01 	call	0x2fa	; 0x2fa <vSetBF>
    16b0:	61 cb       	rjmp	.-2366   	; 0xd74 <vRuning+0x64>
				}
				break;
			case (CAR_LEFT_LINE + 2):
				vOutLed7(CAR_LEFT_LINE + 2);
    16b2:	8f e3       	ldi	r24, 0x3F	; 63
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				vServo(-38);
    16ba:	8a ed       	ldi	r24, 0xDA	; 218
    16bc:	9f ef       	ldi	r25, 0xFF	; 255
    16be:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
				vMotor(15,15,true);
    16c2:	41 e0       	ldi	r20, 0x01	; 1
    16c4:	6f e0       	ldi	r22, 0x0F	; 15
    16c6:	70 e0       	ldi	r23, 0x00	; 0
    16c8:	8f e0       	ldi	r24, 0x0F	; 15
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
				if(ucGetSensorData(0x40) == 0x40){//0 x00 0 000
    16d0:	80 e4       	ldi	r24, 0x40	; 64
    16d2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
    16d6:	80 34       	cpi	r24, 0x40	; 64
    16d8:	09 f0       	breq	.+2      	; 0x16dc <vRuning+0x9cc>
    16da:	4c cb       	rjmp	.-2408   	; 0xd74 <vRuning+0x64>
					vServo(-10);
    16dc:	86 ef       	ldi	r24, 0xF6	; 246
    16de:	9f ef       	ldi	r25, 0xFF	; 255
    16e0:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
					pattern = CAR_LEFT_LINE + 3;
    16e4:	80 e4       	ldi	r24, 0x40	; 64
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	90 93 a6 00 	sts	0x00A6, r25
    16ec:	80 93 a5 00 	sts	0x00A5, r24
    16f0:	41 cb       	rjmp	.-2430   	; 0xd74 <vRuning+0x64>
				}
				break;
			case (CAR_LEFT_LINE + 3):
				vOutLed7(CAR_LEFT_LINE + 3);
    16f2:	80 e4       	ldi	r24, 0x40	; 64
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				vMotor(20,20,true);
    16fa:	41 e0       	ldi	r20, 0x01	; 1
    16fc:	64 e1       	ldi	r22, 0x14	; 20
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	84 e1       	ldi	r24, 0x14	; 20
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
				if(ucGetSensorData(0x08) == 0x08){//0 000 x 000
    1708:	88 e0       	ldi	r24, 0x08	; 8
    170a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
    170e:	88 30       	cpi	r24, 0x08	; 8
    1710:	09 f0       	breq	.+2      	; 0x1714 <vRuning+0xa04>
    1712:	30 cb       	rjmp	.-2464   	; 0xd74 <vRuning+0x64>
					vServo(20);
    1714:	84 e1       	ldi	r24, 0x14	; 20
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
					cnt_timer_1ms = 0;
    171c:	10 92 aa 00 	sts	0x00AA, r1
    1720:	10 92 a9 00 	sts	0x00A9, r1
					while(cnt_timer_1ms < 1);
    1724:	80 91 a9 00 	lds	r24, 0x00A9
    1728:	90 91 aa 00 	lds	r25, 0x00AA
    172c:	89 2b       	or	r24, r25
    172e:	d1 f3       	breq	.-12     	; 0x1724 <vRuning+0xa14>
					pattern = CAR_LEFT_LINE + 4;
    1730:	81 e4       	ldi	r24, 0x41	; 65
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	90 93 a6 00 	sts	0x00A6, r25
    1738:	80 93 a5 00 	sts	0x00A5, r24
    173c:	1b cb       	rjmp	.-2506   	; 0xd74 <vRuning+0x64>
				}
				break;
			case (CAR_LEFT_LINE + 4):
				vOutLed7(CAR_LEFT_LINE + 4);
    173e:	81 e4       	ldi	r24, 0x41	; 65
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
				vServo(30);
    1746:	8e e1       	ldi	r24, 0x1E	; 30
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
				while(cnt_timer_1ms < 5);
    174e:	80 91 a9 00 	lds	r24, 0x00A9
    1752:	90 91 aa 00 	lds	r25, 0x00AA
    1756:	05 97       	sbiw	r24, 0x05	; 5
    1758:	d0 f3       	brcs	.-12     	; 0x174e <vRuning+0xa3e>
				pattern = CAR_NORMAL_TRACE;
    175a:	d0 93 a6 00 	sts	0x00A6, r29
    175e:	c0 93 a5 00 	sts	0x00A5, r28
				break;
    1762:	08 cb       	rjmp	.-2544   	; 0xd74 <vRuning+0x64>
			default:
			/* When the pattern is not applied to any case, return to waiting state */
			vOutLed7(0);
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
			vLedCtrl(LED_FAST_BLINK);
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	0e 94 8b 05 	call	0xb16	; 0xb16 <vLedCtrl>
    1772:	ff cf       	rjmp	.-2      	; 0x1772 <vRuning+0xa62>

00001774 <main>:
	
}
int main(void)
{
	int iDataTemp = 0;
	vInitProgram();	
    1774:	0e 94 9c 00 	call	0x138	; 0x138 <vInitProgram>
	//_delay_ms(1000);//waiting for slaver ready, remove it ...
	/**
	       vOutLed7(1234);		// Xuat so 1234		   
		   vBeep(100);			// Phat ra tieng beeep 100 ms
	*/	
    vOutLed7(1234);
    1778:	82 ed       	ldi	r24, 0xD2	; 210
    177a:	94 e0       	ldi	r25, 0x04	; 4
    177c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
	vBeep(100);	
    1780:	84 e6       	ldi	r24, 0x64	; 100
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <vBeep>
	vMotor(0,0,false);
    1788:	40 e0       	ldi	r20, 0x00	; 0
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 00 01 	call	0x200	; 0x200 <vMotor>
	vLoad2PServoCenter();
    1796:	0e 94 b7 02 	call	0x56e	; 0x56e <vLoad2PServoCenter>
	vServo(0);
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
	}
	
}
int main(void)
{
	int iDataTemp = 0;
    17a2:	c0 e0       	ldi	r28, 0x00	; 0
    17a4:	d0 e0       	ldi	r29, 0x00	; 0
				case 1://Read ADC channel
					if(bKeyIsPress(KEY1))iDataTemp++;
					if(bKeyIsPress(KEY2))iDataTemp--;
					iDataTemp&=0x7;
					vOutLed7(uiReadADC(iDataTemp));
					vOutLed1(0x80 >> (iDataTemp));
    17a6:	00 e8       	ldi	r16, 0x80	; 128
    17a8:	10 e0       	ldi	r17, 0x00	; 0
					if(bKeyIsPress(KEY3))vLoadE2PSensor();
					if(bKeyIsPress(KEY1))iDataTemp++;
					if(bKeyIsPress(KEY2))iDataTemp--;
					iDataTemp &= 0x7;
					vOutLed7(uiGetADCAverage(iDataTemp));
					vOutLed1(1 << (iDataTemp));
    17aa:	ff 24       	eor	r15, r15
    17ac:	f3 94       	inc	r15
	vMotor(0,0,false);
	vLoad2PServoCenter();
	vServo(0);
	while(1)
    {       	
		if(isTester()){//Get switch tester
    17ae:	0e 94 97 01 	call	0x32e	; 0x32e <isTester>
    17b2:	88 23       	and	r24, r24
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <main+0x44>
    17b6:	74 c0       	rjmp	.+232    	; 0x18a0 <main+0x12c>
			switch(ucGetSwitch()&0x07){
    17b8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <ucGetSwitch>
    17bc:	87 70       	andi	r24, 0x07	; 7
    17be:	81 30       	cpi	r24, 0x01	; 1
    17c0:	59 f0       	breq	.+22     	; 0x17d8 <main+0x64>
    17c2:	30 f0       	brcs	.+12     	; 0x17d0 <main+0x5c>
    17c4:	82 30       	cpi	r24, 0x02	; 2
    17c6:	61 f1       	breq	.+88     	; 0x1820 <main+0xac>
    17c8:	83 30       	cpi	r24, 0x03	; 3
    17ca:	09 f4       	brne	.+2      	; 0x17ce <main+0x5a>
    17cc:	49 c0       	rjmp	.+146    	; 0x1860 <main+0xec>
    17ce:	ef cf       	rjmp	.-34     	; 0x17ae <main+0x3a>
				case 0://test sensor
					ucGetSensorData(0x7F);
    17d0:	8f e7       	ldi	r24, 0x7F	; 127
    17d2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ucGetSensorData>
					break;
    17d6:	eb cf       	rjmp	.-42     	; 0x17ae <main+0x3a>
				case 1://Read ADC channel
					if(bKeyIsPress(KEY1))iDataTemp++;
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <bKeyIsPress>
    17de:	81 11       	cpse	r24, r1
    17e0:	21 96       	adiw	r28, 0x01	; 1
					if(bKeyIsPress(KEY2))iDataTemp--;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <bKeyIsPress>
    17e8:	81 11       	cpse	r24, r1
    17ea:	21 97       	sbiw	r28, 0x01	; 1
					iDataTemp&=0x7;
    17ec:	c7 70       	andi	r28, 0x07	; 7
    17ee:	dd 27       	eor	r29, r29
					vOutLed7(uiReadADC(iDataTemp));
    17f0:	8c 2f       	mov	r24, r28
    17f2:	0e 94 9e 01 	call	0x33c	; 0x33c <uiReadADC>
    17f6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
					vOutLed1(0x80 >> (iDataTemp));
    17fa:	c8 01       	movw	r24, r16
    17fc:	0c 2e       	mov	r0, r28
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <main+0x90>
    1800:	95 95       	asr	r25
    1802:	87 95       	ror	r24
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <main+0x8c>
    1808:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <vOutLed1>
    180c:	8f e7       	ldi	r24, 0x7F	; 127
    180e:	99 ea       	ldi	r25, 0xA9	; 169
    1810:	23 e0       	ldi	r18, 0x03	; 3
    1812:	81 50       	subi	r24, 0x01	; 1
    1814:	90 40       	sbci	r25, 0x00	; 0
    1816:	20 40       	sbci	r18, 0x00	; 0
    1818:	e1 f7       	brne	.-8      	; 0x1812 <main+0x9e>
    181a:	00 c0       	rjmp	.+0      	; 0x181c <main+0xa8>
    181c:	00 00       	nop
    181e:	c7 cf       	rjmp	.-114    	; 0x17ae <main+0x3a>
					_delay_ms(100);
					break;
				case 2://Read adc epprom
					if(bKeyIsPress(KEY3))vLoadE2PSensor();
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <bKeyIsPress>
    1826:	81 11       	cpse	r24, r1
    1828:	0e 94 8c 02 	call	0x518	; 0x518 <vLoadE2PSensor>
					if(bKeyIsPress(KEY1))iDataTemp++;
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <bKeyIsPress>
    1832:	81 11       	cpse	r24, r1
    1834:	21 96       	adiw	r28, 0x01	; 1
					if(bKeyIsPress(KEY2))iDataTemp--;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <bKeyIsPress>
    183c:	81 11       	cpse	r24, r1
    183e:	21 97       	sbiw	r28, 0x01	; 1
					iDataTemp &= 0x7;
    1840:	c7 70       	andi	r28, 0x07	; 7
    1842:	dd 27       	eor	r29, r29
					vOutLed7(uiGetADCAverage(iDataTemp));
    1844:	8c 2f       	mov	r24, r28
    1846:	0e 94 ae 02 	call	0x55c	; 0x55c <uiGetADCAverage>
    184a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
					vOutLed1(1 << (iDataTemp));
    184e:	8f 2d       	mov	r24, r15
    1850:	0c 2e       	mov	r0, r28
    1852:	01 c0       	rjmp	.+2      	; 0x1856 <main+0xe2>
    1854:	88 0f       	add	r24, r24
    1856:	0a 94       	dec	r0
    1858:	ea f7       	brpl	.-6      	; 0x1854 <main+0xe0>
    185a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <vOutLed1>
					break;
    185e:	a7 cf       	rjmp	.-178    	; 0x17ae <main+0x3a>
				case 3://ServoCenter ADJ
					//vSetServoCenter(2350);	
					vLoad2PServoCenter();
    1860:	0e 94 b7 02 	call	0x56e	; 0x56e <vLoad2PServoCenter>
					iDataTemp = uiGetServoCenter();
    1864:	0e 94 ca 02 	call	0x594	; 0x594 <uiGetServoCenter>
    1868:	ec 01       	movw	r28, r24
					while(1){
						
						if (bKeyIsPress(KEY3))
    186a:	82 e0       	ldi	r24, 0x02	; 2
    186c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <bKeyIsPress>
    1870:	88 23       	and	r24, r24
    1872:	21 f0       	breq	.+8      	; 0x187c <main+0x108>
						{
							vSetServoCenter(iDataTemp);	
    1874:	ce 01       	movw	r24, r28
    1876:	0e 94 c0 02 	call	0x580	; 0x580 <vSetServoCenter>
						if(bKeyIsPress(KEY1))iDataTemp++;
						if(bKeyIsPress(KEY2))iDataTemp--;
						vOutLed7(iDataTemp);	
						vServo(0);	
					}	
					break;
    187a:	99 cf       	rjmp	.-206    	; 0x17ae <main+0x3a>
						if (bKeyIsPress(KEY3))
						{
							vSetServoCenter(iDataTemp);	
							break;
						}
						if(bKeyIsPress(KEY1))iDataTemp++;
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <bKeyIsPress>
    1882:	81 11       	cpse	r24, r1
    1884:	21 96       	adiw	r28, 0x01	; 1
						if(bKeyIsPress(KEY2))iDataTemp--;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <bKeyIsPress>
    188c:	81 11       	cpse	r24, r1
    188e:	21 97       	sbiw	r28, 0x01	; 1
						vOutLed7(iDataTemp);	
    1890:	ce 01       	movw	r24, r28
    1892:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
						vServo(0);	
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 88 01 	call	0x310	; 0x310 <vServo>
					}	
    189e:	e5 cf       	rjmp	.-54     	; 0x186a <main+0xf6>
				vLedCtrl(LED_STARTUP_COMPELETE); //Fix me
			}
			#endif
		}//end tester
		else{//normal running
			if(bKeyIsPress(KEY2)){//Key 2 learn color, and run
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <bKeyIsPress>
    18a6:	88 23       	and	r24, r24
    18a8:	39 f0       	breq	.+14     	; 0x18b8 <main+0x144>
				vLedCtrl(LED_SLOW_BLINK);
    18aa:	82 e0       	ldi	r24, 0x02	; 2
    18ac:	0e 94 8b 05 	call	0xb16	; 0xb16 <vLedCtrl>
				vLearnColor();			
    18b0:	0e 94 a6 01 	call	0x34c	; 0x34c <vLearnColor>
				vRuning();
    18b4:	0e 94 88 06 	call	0xd10	; 0xd10 <vRuning>
			}//end Key 2 learn color, and run
			if(bKeyIsPress(KEY1)){//Load epprom and run
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <bKeyIsPress>
    18be:	88 23       	and	r24, r24
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <main+0x150>
    18c2:	75 cf       	rjmp	.-278    	; 0x17ae <main+0x3a>
				vLoadE2PSensor();
    18c4:	0e 94 8c 02 	call	0x518	; 0x518 <vLoadE2PSensor>
					vOutLed7(ucGetSensorData(0xff));
					_delay_ms(100);
					
				}//end while 1
				#endif
				vRuning();
    18c8:	0e 94 88 06 	call	0xd10	; 0xd10 <vRuning>

000018cc <__vector_9>:
	return ret;
}

// [Vo Huu Tai 20/8/2015 ]  ISR here
ISR(TIMER0_OVF_vect)
{
    18cc:	1f 92       	push	r1
    18ce:	0f 92       	push	r0
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	0f 92       	push	r0
    18d4:	11 24       	eor	r1, r1
    18d6:	2f 93       	push	r18
    18d8:	3f 93       	push	r19
    18da:	4f 93       	push	r20
    18dc:	5f 93       	push	r21
    18de:	6f 93       	push	r22
    18e0:	7f 93       	push	r23
    18e2:	8f 93       	push	r24
    18e4:	9f 93       	push	r25
    18e6:	af 93       	push	r26
    18e8:	bf 93       	push	r27
    18ea:	ef 93       	push	r30
    18ec:	ff 93       	push	r31
	TCNT0 = 68;	//~1ms
    18ee:	84 e4       	ldi	r24, 0x44	; 68
    18f0:	82 bf       	out	0x32, r24	; 50
	//Add more cnt here..
	cnt_timer_1ms++;
    18f2:	80 91 a9 00 	lds	r24, 0x00A9
    18f6:	90 91 aa 00 	lds	r25, 0x00AA
    18fa:	01 96       	adiw	r24, 0x01	; 1
    18fc:	90 93 aa 00 	sts	0x00AA, r25
    1900:	80 93 a9 00 	sts	0x00A9, r24
	vAssassin();
    1904:	0e 94 9a 05 	call	0xb34	; 0xb34 <vAssassin>
}
    1908:	ff 91       	pop	r31
    190a:	ef 91       	pop	r30
    190c:	bf 91       	pop	r27
    190e:	af 91       	pop	r26
    1910:	9f 91       	pop	r25
    1912:	8f 91       	pop	r24
    1914:	7f 91       	pop	r23
    1916:	6f 91       	pop	r22
    1918:	5f 91       	pop	r21
    191a:	4f 91       	pop	r20
    191c:	3f 91       	pop	r19
    191e:	2f 91       	pop	r18
    1920:	0f 90       	pop	r0
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	0f 90       	pop	r0
    1926:	1f 90       	pop	r1
    1928:	18 95       	reti

0000192a <__vector_2>:
volatile int cnt_temp = 0;
ISR(INT1_vect){//encoder interrupt
    192a:	1f 92       	push	r1
    192c:	0f 92       	push	r0
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	0f 92       	push	r0
    1932:	11 24       	eor	r1, r1
    1934:	2f 93       	push	r18
    1936:	3f 93       	push	r19
    1938:	4f 93       	push	r20
    193a:	5f 93       	push	r21
    193c:	6f 93       	push	r22
    193e:	7f 93       	push	r23
    1940:	8f 93       	push	r24
    1942:	9f 93       	push	r25
    1944:	af 93       	push	r26
    1946:	bf 93       	push	r27
    1948:	ef 93       	push	r30
    194a:	ff 93       	push	r31
	vIncPulse();
    194c:	0e 94 cf 02 	call	0x59e	; 0x59e <vIncPulse>
	cnt_int1++;
    1950:	80 91 a7 00 	lds	r24, 0x00A7
    1954:	90 91 a8 00 	lds	r25, 0x00A8
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	90 93 a8 00 	sts	0x00A8, r25
    195e:	80 93 a7 00 	sts	0x00A7, r24
	if((ucGetSwitch()&0x1) == 0x1)
    1962:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <ucGetSwitch>
    1966:	80 ff       	sbrs	r24, 0
    1968:	0d c0       	rjmp	.+26     	; 0x1984 <__vector_2+0x5a>
	vOutLed7(cnt_temp++);
    196a:	80 91 a2 00 	lds	r24, 0x00A2
    196e:	90 91 a3 00 	lds	r25, 0x00A3
    1972:	9c 01       	movw	r18, r24
    1974:	2f 5f       	subi	r18, 0xFF	; 255
    1976:	3f 4f       	sbci	r19, 0xFF	; 255
    1978:	30 93 a3 00 	sts	0x00A3, r19
    197c:	20 93 a2 00 	sts	0x00A2, r18
    1980:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vOutLed7>
}	
    1984:	ff 91       	pop	r31
    1986:	ef 91       	pop	r30
    1988:	bf 91       	pop	r27
    198a:	af 91       	pop	r26
    198c:	9f 91       	pop	r25
    198e:	8f 91       	pop	r24
    1990:	7f 91       	pop	r23
    1992:	6f 91       	pop	r22
    1994:	5f 91       	pop	r21
    1996:	4f 91       	pop	r20
    1998:	3f 91       	pop	r19
    199a:	2f 91       	pop	r18
    199c:	0f 90       	pop	r0
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	0f 90       	pop	r0
    19a2:	1f 90       	pop	r1
    19a4:	18 95       	reti

000019a6 <__subsf3>:
    19a6:	50 58       	subi	r21, 0x80	; 128

000019a8 <__addsf3>:
    19a8:	bb 27       	eor	r27, r27
    19aa:	aa 27       	eor	r26, r26
    19ac:	0e d0       	rcall	.+28     	; 0x19ca <__addsf3x>
    19ae:	0d c1       	rjmp	.+538    	; 0x1bca <__fp_round>
    19b0:	fe d0       	rcall	.+508    	; 0x1bae <__fp_pscA>
    19b2:	30 f0       	brcs	.+12     	; 0x19c0 <__addsf3+0x18>
    19b4:	03 d1       	rcall	.+518    	; 0x1bbc <__fp_pscB>
    19b6:	20 f0       	brcs	.+8      	; 0x19c0 <__addsf3+0x18>
    19b8:	31 f4       	brne	.+12     	; 0x19c6 <__addsf3+0x1e>
    19ba:	9f 3f       	cpi	r25, 0xFF	; 255
    19bc:	11 f4       	brne	.+4      	; 0x19c2 <__addsf3+0x1a>
    19be:	1e f4       	brtc	.+6      	; 0x19c6 <__addsf3+0x1e>
    19c0:	f3 c0       	rjmp	.+486    	; 0x1ba8 <__fp_nan>
    19c2:	0e f4       	brtc	.+2      	; 0x19c6 <__addsf3+0x1e>
    19c4:	e0 95       	com	r30
    19c6:	e7 fb       	bst	r30, 7
    19c8:	e9 c0       	rjmp	.+466    	; 0x1b9c <__fp_inf>

000019ca <__addsf3x>:
    19ca:	e9 2f       	mov	r30, r25
    19cc:	0f d1       	rcall	.+542    	; 0x1bec <__fp_split3>
    19ce:	80 f3       	brcs	.-32     	; 0x19b0 <__addsf3+0x8>
    19d0:	ba 17       	cp	r27, r26
    19d2:	62 07       	cpc	r22, r18
    19d4:	73 07       	cpc	r23, r19
    19d6:	84 07       	cpc	r24, r20
    19d8:	95 07       	cpc	r25, r21
    19da:	18 f0       	brcs	.+6      	; 0x19e2 <__addsf3x+0x18>
    19dc:	71 f4       	brne	.+28     	; 0x19fa <__addsf3x+0x30>
    19de:	9e f5       	brtc	.+102    	; 0x1a46 <__addsf3x+0x7c>
    19e0:	27 c1       	rjmp	.+590    	; 0x1c30 <__fp_zero>
    19e2:	0e f4       	brtc	.+2      	; 0x19e6 <__addsf3x+0x1c>
    19e4:	e0 95       	com	r30
    19e6:	0b 2e       	mov	r0, r27
    19e8:	ba 2f       	mov	r27, r26
    19ea:	a0 2d       	mov	r26, r0
    19ec:	0b 01       	movw	r0, r22
    19ee:	b9 01       	movw	r22, r18
    19f0:	90 01       	movw	r18, r0
    19f2:	0c 01       	movw	r0, r24
    19f4:	ca 01       	movw	r24, r20
    19f6:	a0 01       	movw	r20, r0
    19f8:	11 24       	eor	r1, r1
    19fa:	ff 27       	eor	r31, r31
    19fc:	59 1b       	sub	r21, r25
    19fe:	99 f0       	breq	.+38     	; 0x1a26 <__addsf3x+0x5c>
    1a00:	59 3f       	cpi	r21, 0xF9	; 249
    1a02:	50 f4       	brcc	.+20     	; 0x1a18 <__addsf3x+0x4e>
    1a04:	50 3e       	cpi	r21, 0xE0	; 224
    1a06:	68 f1       	brcs	.+90     	; 0x1a62 <__addsf3x+0x98>
    1a08:	1a 16       	cp	r1, r26
    1a0a:	f0 40       	sbci	r31, 0x00	; 0
    1a0c:	a2 2f       	mov	r26, r18
    1a0e:	23 2f       	mov	r18, r19
    1a10:	34 2f       	mov	r19, r20
    1a12:	44 27       	eor	r20, r20
    1a14:	58 5f       	subi	r21, 0xF8	; 248
    1a16:	f3 cf       	rjmp	.-26     	; 0x19fe <__addsf3x+0x34>
    1a18:	46 95       	lsr	r20
    1a1a:	37 95       	ror	r19
    1a1c:	27 95       	ror	r18
    1a1e:	a7 95       	ror	r26
    1a20:	f0 40       	sbci	r31, 0x00	; 0
    1a22:	53 95       	inc	r21
    1a24:	c9 f7       	brne	.-14     	; 0x1a18 <__addsf3x+0x4e>
    1a26:	7e f4       	brtc	.+30     	; 0x1a46 <__addsf3x+0x7c>
    1a28:	1f 16       	cp	r1, r31
    1a2a:	ba 0b       	sbc	r27, r26
    1a2c:	62 0b       	sbc	r22, r18
    1a2e:	73 0b       	sbc	r23, r19
    1a30:	84 0b       	sbc	r24, r20
    1a32:	ba f0       	brmi	.+46     	; 0x1a62 <__addsf3x+0x98>
    1a34:	91 50       	subi	r25, 0x01	; 1
    1a36:	a1 f0       	breq	.+40     	; 0x1a60 <__addsf3x+0x96>
    1a38:	ff 0f       	add	r31, r31
    1a3a:	bb 1f       	adc	r27, r27
    1a3c:	66 1f       	adc	r22, r22
    1a3e:	77 1f       	adc	r23, r23
    1a40:	88 1f       	adc	r24, r24
    1a42:	c2 f7       	brpl	.-16     	; 0x1a34 <__addsf3x+0x6a>
    1a44:	0e c0       	rjmp	.+28     	; 0x1a62 <__addsf3x+0x98>
    1a46:	ba 0f       	add	r27, r26
    1a48:	62 1f       	adc	r22, r18
    1a4a:	73 1f       	adc	r23, r19
    1a4c:	84 1f       	adc	r24, r20
    1a4e:	48 f4       	brcc	.+18     	; 0x1a62 <__addsf3x+0x98>
    1a50:	87 95       	ror	r24
    1a52:	77 95       	ror	r23
    1a54:	67 95       	ror	r22
    1a56:	b7 95       	ror	r27
    1a58:	f7 95       	ror	r31
    1a5a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a5c:	08 f0       	brcs	.+2      	; 0x1a60 <__addsf3x+0x96>
    1a5e:	b3 cf       	rjmp	.-154    	; 0x19c6 <__addsf3+0x1e>
    1a60:	93 95       	inc	r25
    1a62:	88 0f       	add	r24, r24
    1a64:	08 f0       	brcs	.+2      	; 0x1a68 <__addsf3x+0x9e>
    1a66:	99 27       	eor	r25, r25
    1a68:	ee 0f       	add	r30, r30
    1a6a:	97 95       	ror	r25
    1a6c:	87 95       	ror	r24
    1a6e:	08 95       	ret

00001a70 <__cmpsf2>:
    1a70:	71 d0       	rcall	.+226    	; 0x1b54 <__fp_cmp>
    1a72:	08 f4       	brcc	.+2      	; 0x1a76 <__cmpsf2+0x6>
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	08 95       	ret

00001a78 <__fixsfsi>:
    1a78:	04 d0       	rcall	.+8      	; 0x1a82 <__fixunssfsi>
    1a7a:	68 94       	set
    1a7c:	b1 11       	cpse	r27, r1
    1a7e:	d9 c0       	rjmp	.+434    	; 0x1c32 <__fp_szero>
    1a80:	08 95       	ret

00001a82 <__fixunssfsi>:
    1a82:	bc d0       	rcall	.+376    	; 0x1bfc <__fp_splitA>
    1a84:	88 f0       	brcs	.+34     	; 0x1aa8 <__fixunssfsi+0x26>
    1a86:	9f 57       	subi	r25, 0x7F	; 127
    1a88:	90 f0       	brcs	.+36     	; 0x1aae <__fixunssfsi+0x2c>
    1a8a:	b9 2f       	mov	r27, r25
    1a8c:	99 27       	eor	r25, r25
    1a8e:	b7 51       	subi	r27, 0x17	; 23
    1a90:	a0 f0       	brcs	.+40     	; 0x1aba <__fixunssfsi+0x38>
    1a92:	d1 f0       	breq	.+52     	; 0x1ac8 <__fixunssfsi+0x46>
    1a94:	66 0f       	add	r22, r22
    1a96:	77 1f       	adc	r23, r23
    1a98:	88 1f       	adc	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	1a f0       	brmi	.+6      	; 0x1aa4 <__fixunssfsi+0x22>
    1a9e:	ba 95       	dec	r27
    1aa0:	c9 f7       	brne	.-14     	; 0x1a94 <__fixunssfsi+0x12>
    1aa2:	12 c0       	rjmp	.+36     	; 0x1ac8 <__fixunssfsi+0x46>
    1aa4:	b1 30       	cpi	r27, 0x01	; 1
    1aa6:	81 f0       	breq	.+32     	; 0x1ac8 <__fixunssfsi+0x46>
    1aa8:	c3 d0       	rcall	.+390    	; 0x1c30 <__fp_zero>
    1aaa:	b1 e0       	ldi	r27, 0x01	; 1
    1aac:	08 95       	ret
    1aae:	c0 c0       	rjmp	.+384    	; 0x1c30 <__fp_zero>
    1ab0:	67 2f       	mov	r22, r23
    1ab2:	78 2f       	mov	r23, r24
    1ab4:	88 27       	eor	r24, r24
    1ab6:	b8 5f       	subi	r27, 0xF8	; 248
    1ab8:	39 f0       	breq	.+14     	; 0x1ac8 <__fixunssfsi+0x46>
    1aba:	b9 3f       	cpi	r27, 0xF9	; 249
    1abc:	cc f3       	brlt	.-14     	; 0x1ab0 <__fixunssfsi+0x2e>
    1abe:	86 95       	lsr	r24
    1ac0:	77 95       	ror	r23
    1ac2:	67 95       	ror	r22
    1ac4:	b3 95       	inc	r27
    1ac6:	d9 f7       	brne	.-10     	; 0x1abe <__fixunssfsi+0x3c>
    1ac8:	3e f4       	brtc	.+14     	; 0x1ad8 <__fixunssfsi+0x56>
    1aca:	90 95       	com	r25
    1acc:	80 95       	com	r24
    1ace:	70 95       	com	r23
    1ad0:	61 95       	neg	r22
    1ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad8:	08 95       	ret

00001ada <__floatunsisf>:
    1ada:	e8 94       	clt
    1adc:	09 c0       	rjmp	.+18     	; 0x1af0 <__floatsisf+0x12>

00001ade <__floatsisf>:
    1ade:	97 fb       	bst	r25, 7
    1ae0:	3e f4       	brtc	.+14     	; 0x1af0 <__floatsisf+0x12>
    1ae2:	90 95       	com	r25
    1ae4:	80 95       	com	r24
    1ae6:	70 95       	com	r23
    1ae8:	61 95       	neg	r22
    1aea:	7f 4f       	sbci	r23, 0xFF	; 255
    1aec:	8f 4f       	sbci	r24, 0xFF	; 255
    1aee:	9f 4f       	sbci	r25, 0xFF	; 255
    1af0:	99 23       	and	r25, r25
    1af2:	a9 f0       	breq	.+42     	; 0x1b1e <__floatsisf+0x40>
    1af4:	f9 2f       	mov	r31, r25
    1af6:	96 e9       	ldi	r25, 0x96	; 150
    1af8:	bb 27       	eor	r27, r27
    1afa:	93 95       	inc	r25
    1afc:	f6 95       	lsr	r31
    1afe:	87 95       	ror	r24
    1b00:	77 95       	ror	r23
    1b02:	67 95       	ror	r22
    1b04:	b7 95       	ror	r27
    1b06:	f1 11       	cpse	r31, r1
    1b08:	f8 cf       	rjmp	.-16     	; 0x1afa <__floatsisf+0x1c>
    1b0a:	fa f4       	brpl	.+62     	; 0x1b4a <__floatsisf+0x6c>
    1b0c:	bb 0f       	add	r27, r27
    1b0e:	11 f4       	brne	.+4      	; 0x1b14 <__floatsisf+0x36>
    1b10:	60 ff       	sbrs	r22, 0
    1b12:	1b c0       	rjmp	.+54     	; 0x1b4a <__floatsisf+0x6c>
    1b14:	6f 5f       	subi	r22, 0xFF	; 255
    1b16:	7f 4f       	sbci	r23, 0xFF	; 255
    1b18:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1c:	16 c0       	rjmp	.+44     	; 0x1b4a <__floatsisf+0x6c>
    1b1e:	88 23       	and	r24, r24
    1b20:	11 f0       	breq	.+4      	; 0x1b26 <__floatsisf+0x48>
    1b22:	96 e9       	ldi	r25, 0x96	; 150
    1b24:	11 c0       	rjmp	.+34     	; 0x1b48 <__floatsisf+0x6a>
    1b26:	77 23       	and	r23, r23
    1b28:	21 f0       	breq	.+8      	; 0x1b32 <__floatsisf+0x54>
    1b2a:	9e e8       	ldi	r25, 0x8E	; 142
    1b2c:	87 2f       	mov	r24, r23
    1b2e:	76 2f       	mov	r23, r22
    1b30:	05 c0       	rjmp	.+10     	; 0x1b3c <__floatsisf+0x5e>
    1b32:	66 23       	and	r22, r22
    1b34:	71 f0       	breq	.+28     	; 0x1b52 <__floatsisf+0x74>
    1b36:	96 e8       	ldi	r25, 0x86	; 134
    1b38:	86 2f       	mov	r24, r22
    1b3a:	70 e0       	ldi	r23, 0x00	; 0
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	2a f0       	brmi	.+10     	; 0x1b4a <__floatsisf+0x6c>
    1b40:	9a 95       	dec	r25
    1b42:	66 0f       	add	r22, r22
    1b44:	77 1f       	adc	r23, r23
    1b46:	88 1f       	adc	r24, r24
    1b48:	da f7       	brpl	.-10     	; 0x1b40 <__floatsisf+0x62>
    1b4a:	88 0f       	add	r24, r24
    1b4c:	96 95       	lsr	r25
    1b4e:	87 95       	ror	r24
    1b50:	97 f9       	bld	r25, 7
    1b52:	08 95       	ret

00001b54 <__fp_cmp>:
    1b54:	99 0f       	add	r25, r25
    1b56:	00 08       	sbc	r0, r0
    1b58:	55 0f       	add	r21, r21
    1b5a:	aa 0b       	sbc	r26, r26
    1b5c:	e0 e8       	ldi	r30, 0x80	; 128
    1b5e:	fe ef       	ldi	r31, 0xFE	; 254
    1b60:	16 16       	cp	r1, r22
    1b62:	17 06       	cpc	r1, r23
    1b64:	e8 07       	cpc	r30, r24
    1b66:	f9 07       	cpc	r31, r25
    1b68:	c0 f0       	brcs	.+48     	; 0x1b9a <__fp_cmp+0x46>
    1b6a:	12 16       	cp	r1, r18
    1b6c:	13 06       	cpc	r1, r19
    1b6e:	e4 07       	cpc	r30, r20
    1b70:	f5 07       	cpc	r31, r21
    1b72:	98 f0       	brcs	.+38     	; 0x1b9a <__fp_cmp+0x46>
    1b74:	62 1b       	sub	r22, r18
    1b76:	73 0b       	sbc	r23, r19
    1b78:	84 0b       	sbc	r24, r20
    1b7a:	95 0b       	sbc	r25, r21
    1b7c:	39 f4       	brne	.+14     	; 0x1b8c <__fp_cmp+0x38>
    1b7e:	0a 26       	eor	r0, r26
    1b80:	61 f0       	breq	.+24     	; 0x1b9a <__fp_cmp+0x46>
    1b82:	23 2b       	or	r18, r19
    1b84:	24 2b       	or	r18, r20
    1b86:	25 2b       	or	r18, r21
    1b88:	21 f4       	brne	.+8      	; 0x1b92 <__fp_cmp+0x3e>
    1b8a:	08 95       	ret
    1b8c:	0a 26       	eor	r0, r26
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <__fp_cmp+0x3e>
    1b90:	a1 40       	sbci	r26, 0x01	; 1
    1b92:	a6 95       	lsr	r26
    1b94:	8f ef       	ldi	r24, 0xFF	; 255
    1b96:	81 1d       	adc	r24, r1
    1b98:	81 1d       	adc	r24, r1
    1b9a:	08 95       	ret

00001b9c <__fp_inf>:
    1b9c:	97 f9       	bld	r25, 7
    1b9e:	9f 67       	ori	r25, 0x7F	; 127
    1ba0:	80 e8       	ldi	r24, 0x80	; 128
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	08 95       	ret

00001ba8 <__fp_nan>:
    1ba8:	9f ef       	ldi	r25, 0xFF	; 255
    1baa:	80 ec       	ldi	r24, 0xC0	; 192
    1bac:	08 95       	ret

00001bae <__fp_pscA>:
    1bae:	00 24       	eor	r0, r0
    1bb0:	0a 94       	dec	r0
    1bb2:	16 16       	cp	r1, r22
    1bb4:	17 06       	cpc	r1, r23
    1bb6:	18 06       	cpc	r1, r24
    1bb8:	09 06       	cpc	r0, r25
    1bba:	08 95       	ret

00001bbc <__fp_pscB>:
    1bbc:	00 24       	eor	r0, r0
    1bbe:	0a 94       	dec	r0
    1bc0:	12 16       	cp	r1, r18
    1bc2:	13 06       	cpc	r1, r19
    1bc4:	14 06       	cpc	r1, r20
    1bc6:	05 06       	cpc	r0, r21
    1bc8:	08 95       	ret

00001bca <__fp_round>:
    1bca:	09 2e       	mov	r0, r25
    1bcc:	03 94       	inc	r0
    1bce:	00 0c       	add	r0, r0
    1bd0:	11 f4       	brne	.+4      	; 0x1bd6 <__fp_round+0xc>
    1bd2:	88 23       	and	r24, r24
    1bd4:	52 f0       	brmi	.+20     	; 0x1bea <__fp_round+0x20>
    1bd6:	bb 0f       	add	r27, r27
    1bd8:	40 f4       	brcc	.+16     	; 0x1bea <__fp_round+0x20>
    1bda:	bf 2b       	or	r27, r31
    1bdc:	11 f4       	brne	.+4      	; 0x1be2 <__fp_round+0x18>
    1bde:	60 ff       	sbrs	r22, 0
    1be0:	04 c0       	rjmp	.+8      	; 0x1bea <__fp_round+0x20>
    1be2:	6f 5f       	subi	r22, 0xFF	; 255
    1be4:	7f 4f       	sbci	r23, 0xFF	; 255
    1be6:	8f 4f       	sbci	r24, 0xFF	; 255
    1be8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bea:	08 95       	ret

00001bec <__fp_split3>:
    1bec:	57 fd       	sbrc	r21, 7
    1bee:	90 58       	subi	r25, 0x80	; 128
    1bf0:	44 0f       	add	r20, r20
    1bf2:	55 1f       	adc	r21, r21
    1bf4:	59 f0       	breq	.+22     	; 0x1c0c <__fp_splitA+0x10>
    1bf6:	5f 3f       	cpi	r21, 0xFF	; 255
    1bf8:	71 f0       	breq	.+28     	; 0x1c16 <__fp_splitA+0x1a>
    1bfa:	47 95       	ror	r20

00001bfc <__fp_splitA>:
    1bfc:	88 0f       	add	r24, r24
    1bfe:	97 fb       	bst	r25, 7
    1c00:	99 1f       	adc	r25, r25
    1c02:	61 f0       	breq	.+24     	; 0x1c1c <__fp_splitA+0x20>
    1c04:	9f 3f       	cpi	r25, 0xFF	; 255
    1c06:	79 f0       	breq	.+30     	; 0x1c26 <__fp_splitA+0x2a>
    1c08:	87 95       	ror	r24
    1c0a:	08 95       	ret
    1c0c:	12 16       	cp	r1, r18
    1c0e:	13 06       	cpc	r1, r19
    1c10:	14 06       	cpc	r1, r20
    1c12:	55 1f       	adc	r21, r21
    1c14:	f2 cf       	rjmp	.-28     	; 0x1bfa <__fp_split3+0xe>
    1c16:	46 95       	lsr	r20
    1c18:	f1 df       	rcall	.-30     	; 0x1bfc <__fp_splitA>
    1c1a:	08 c0       	rjmp	.+16     	; 0x1c2c <__fp_splitA+0x30>
    1c1c:	16 16       	cp	r1, r22
    1c1e:	17 06       	cpc	r1, r23
    1c20:	18 06       	cpc	r1, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	f1 cf       	rjmp	.-30     	; 0x1c08 <__fp_splitA+0xc>
    1c26:	86 95       	lsr	r24
    1c28:	71 05       	cpc	r23, r1
    1c2a:	61 05       	cpc	r22, r1
    1c2c:	08 94       	sec
    1c2e:	08 95       	ret

00001c30 <__fp_zero>:
    1c30:	e8 94       	clt

00001c32 <__fp_szero>:
    1c32:	bb 27       	eor	r27, r27
    1c34:	66 27       	eor	r22, r22
    1c36:	77 27       	eor	r23, r23
    1c38:	cb 01       	movw	r24, r22
    1c3a:	97 f9       	bld	r25, 7
    1c3c:	08 95       	ret

00001c3e <__gesf2>:
    1c3e:	8a df       	rcall	.-236    	; 0x1b54 <__fp_cmp>
    1c40:	08 f4       	brcc	.+2      	; 0x1c44 <__gesf2+0x6>
    1c42:	8f ef       	ldi	r24, 0xFF	; 255
    1c44:	08 95       	ret

00001c46 <__mulsf3>:
    1c46:	0b d0       	rcall	.+22     	; 0x1c5e <__mulsf3x>
    1c48:	c0 cf       	rjmp	.-128    	; 0x1bca <__fp_round>
    1c4a:	b1 df       	rcall	.-158    	; 0x1bae <__fp_pscA>
    1c4c:	28 f0       	brcs	.+10     	; 0x1c58 <__mulsf3+0x12>
    1c4e:	b6 df       	rcall	.-148    	; 0x1bbc <__fp_pscB>
    1c50:	18 f0       	brcs	.+6      	; 0x1c58 <__mulsf3+0x12>
    1c52:	95 23       	and	r25, r21
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <__mulsf3+0x12>
    1c56:	a2 cf       	rjmp	.-188    	; 0x1b9c <__fp_inf>
    1c58:	a7 cf       	rjmp	.-178    	; 0x1ba8 <__fp_nan>
    1c5a:	11 24       	eor	r1, r1
    1c5c:	ea cf       	rjmp	.-44     	; 0x1c32 <__fp_szero>

00001c5e <__mulsf3x>:
    1c5e:	c6 df       	rcall	.-116    	; 0x1bec <__fp_split3>
    1c60:	a0 f3       	brcs	.-24     	; 0x1c4a <__mulsf3+0x4>

00001c62 <__mulsf3_pse>:
    1c62:	95 9f       	mul	r25, r21
    1c64:	d1 f3       	breq	.-12     	; 0x1c5a <__mulsf3+0x14>
    1c66:	95 0f       	add	r25, r21
    1c68:	50 e0       	ldi	r21, 0x00	; 0
    1c6a:	55 1f       	adc	r21, r21
    1c6c:	62 9f       	mul	r22, r18
    1c6e:	f0 01       	movw	r30, r0
    1c70:	72 9f       	mul	r23, r18
    1c72:	bb 27       	eor	r27, r27
    1c74:	f0 0d       	add	r31, r0
    1c76:	b1 1d       	adc	r27, r1
    1c78:	63 9f       	mul	r22, r19
    1c7a:	aa 27       	eor	r26, r26
    1c7c:	f0 0d       	add	r31, r0
    1c7e:	b1 1d       	adc	r27, r1
    1c80:	aa 1f       	adc	r26, r26
    1c82:	64 9f       	mul	r22, r20
    1c84:	66 27       	eor	r22, r22
    1c86:	b0 0d       	add	r27, r0
    1c88:	a1 1d       	adc	r26, r1
    1c8a:	66 1f       	adc	r22, r22
    1c8c:	82 9f       	mul	r24, r18
    1c8e:	22 27       	eor	r18, r18
    1c90:	b0 0d       	add	r27, r0
    1c92:	a1 1d       	adc	r26, r1
    1c94:	62 1f       	adc	r22, r18
    1c96:	73 9f       	mul	r23, r19
    1c98:	b0 0d       	add	r27, r0
    1c9a:	a1 1d       	adc	r26, r1
    1c9c:	62 1f       	adc	r22, r18
    1c9e:	83 9f       	mul	r24, r19
    1ca0:	a0 0d       	add	r26, r0
    1ca2:	61 1d       	adc	r22, r1
    1ca4:	22 1f       	adc	r18, r18
    1ca6:	74 9f       	mul	r23, r20
    1ca8:	33 27       	eor	r19, r19
    1caa:	a0 0d       	add	r26, r0
    1cac:	61 1d       	adc	r22, r1
    1cae:	23 1f       	adc	r18, r19
    1cb0:	84 9f       	mul	r24, r20
    1cb2:	60 0d       	add	r22, r0
    1cb4:	21 1d       	adc	r18, r1
    1cb6:	82 2f       	mov	r24, r18
    1cb8:	76 2f       	mov	r23, r22
    1cba:	6a 2f       	mov	r22, r26
    1cbc:	11 24       	eor	r1, r1
    1cbe:	9f 57       	subi	r25, 0x7F	; 127
    1cc0:	50 40       	sbci	r21, 0x00	; 0
    1cc2:	8a f0       	brmi	.+34     	; 0x1ce6 <__mulsf3_pse+0x84>
    1cc4:	e1 f0       	breq	.+56     	; 0x1cfe <__mulsf3_pse+0x9c>
    1cc6:	88 23       	and	r24, r24
    1cc8:	4a f0       	brmi	.+18     	; 0x1cdc <__mulsf3_pse+0x7a>
    1cca:	ee 0f       	add	r30, r30
    1ccc:	ff 1f       	adc	r31, r31
    1cce:	bb 1f       	adc	r27, r27
    1cd0:	66 1f       	adc	r22, r22
    1cd2:	77 1f       	adc	r23, r23
    1cd4:	88 1f       	adc	r24, r24
    1cd6:	91 50       	subi	r25, 0x01	; 1
    1cd8:	50 40       	sbci	r21, 0x00	; 0
    1cda:	a9 f7       	brne	.-22     	; 0x1cc6 <__mulsf3_pse+0x64>
    1cdc:	9e 3f       	cpi	r25, 0xFE	; 254
    1cde:	51 05       	cpc	r21, r1
    1ce0:	70 f0       	brcs	.+28     	; 0x1cfe <__mulsf3_pse+0x9c>
    1ce2:	5c cf       	rjmp	.-328    	; 0x1b9c <__fp_inf>
    1ce4:	a6 cf       	rjmp	.-180    	; 0x1c32 <__fp_szero>
    1ce6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce8:	ec f3       	brlt	.-6      	; 0x1ce4 <__mulsf3_pse+0x82>
    1cea:	98 3e       	cpi	r25, 0xE8	; 232
    1cec:	dc f3       	brlt	.-10     	; 0x1ce4 <__mulsf3_pse+0x82>
    1cee:	86 95       	lsr	r24
    1cf0:	77 95       	ror	r23
    1cf2:	67 95       	ror	r22
    1cf4:	b7 95       	ror	r27
    1cf6:	f7 95       	ror	r31
    1cf8:	e7 95       	ror	r30
    1cfa:	9f 5f       	subi	r25, 0xFF	; 255
    1cfc:	c1 f7       	brne	.-16     	; 0x1cee <__mulsf3_pse+0x8c>
    1cfe:	fe 2b       	or	r31, r30
    1d00:	88 0f       	add	r24, r24
    1d02:	91 1d       	adc	r25, r1
    1d04:	96 95       	lsr	r25
    1d06:	87 95       	ror	r24
    1d08:	97 f9       	bld	r25, 7
    1d0a:	08 95       	ret

00001d0c <__divmodhi4>:
    1d0c:	97 fb       	bst	r25, 7
    1d0e:	07 2e       	mov	r0, r23
    1d10:	16 f4       	brtc	.+4      	; 0x1d16 <__divmodhi4+0xa>
    1d12:	00 94       	com	r0
    1d14:	07 d0       	rcall	.+14     	; 0x1d24 <__divmodhi4_neg1>
    1d16:	77 fd       	sbrc	r23, 7
    1d18:	09 d0       	rcall	.+18     	; 0x1d2c <__divmodhi4_neg2>
    1d1a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__udivmodhi4>
    1d1e:	07 fc       	sbrc	r0, 7
    1d20:	05 d0       	rcall	.+10     	; 0x1d2c <__divmodhi4_neg2>
    1d22:	3e f4       	brtc	.+14     	; 0x1d32 <__divmodhi4_exit>

00001d24 <__divmodhi4_neg1>:
    1d24:	90 95       	com	r25
    1d26:	81 95       	neg	r24
    1d28:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2a:	08 95       	ret

00001d2c <__divmodhi4_neg2>:
    1d2c:	70 95       	com	r23
    1d2e:	61 95       	neg	r22
    1d30:	7f 4f       	sbci	r23, 0xFF	; 255

00001d32 <__divmodhi4_exit>:
    1d32:	08 95       	ret

00001d34 <__tablejump2__>:
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31

00001d38 <__tablejump__>:
    1d38:	05 90       	lpm	r0, Z+
    1d3a:	f4 91       	lpm	r31, Z
    1d3c:	e0 2d       	mov	r30, r0
    1d3e:	09 94       	ijmp

00001d40 <__udivmodhi4>:
    1d40:	aa 1b       	sub	r26, r26
    1d42:	bb 1b       	sub	r27, r27
    1d44:	51 e1       	ldi	r21, 0x11	; 17
    1d46:	07 c0       	rjmp	.+14     	; 0x1d56 <__udivmodhi4_ep>

00001d48 <__udivmodhi4_loop>:
    1d48:	aa 1f       	adc	r26, r26
    1d4a:	bb 1f       	adc	r27, r27
    1d4c:	a6 17       	cp	r26, r22
    1d4e:	b7 07       	cpc	r27, r23
    1d50:	10 f0       	brcs	.+4      	; 0x1d56 <__udivmodhi4_ep>
    1d52:	a6 1b       	sub	r26, r22
    1d54:	b7 0b       	sbc	r27, r23

00001d56 <__udivmodhi4_ep>:
    1d56:	88 1f       	adc	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	5a 95       	dec	r21
    1d5c:	a9 f7       	brne	.-22     	; 0x1d48 <__udivmodhi4_loop>
    1d5e:	80 95       	com	r24
    1d60:	90 95       	com	r25
    1d62:	bc 01       	movw	r22, r24
    1d64:	cd 01       	movw	r24, r26
    1d66:	08 95       	ret

00001d68 <__eerd_word_m16a>:
    1d68:	a8 e1       	ldi	r26, 0x18	; 24
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	42 e0       	ldi	r20, 0x02	; 2
    1d6e:	50 e0       	ldi	r21, 0x00	; 0
    1d70:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__eerd_blraw_m16a>

00001d74 <__eewr_word_m16a>:
    1d74:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__eewr_byte_m16a>
    1d78:	27 2f       	mov	r18, r23
    1d7a:	0c 94 d0 0e 	jmp	0x1da0	; 0x1da0 <__eewr_r18_m16a>

00001d7e <__eerd_block_m16a>:
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22

00001d82 <__eerd_blraw_m16a>:
    1d82:	fc 01       	movw	r30, r24
    1d84:	e1 99       	sbic	0x1c, 1	; 28
    1d86:	fe cf       	rjmp	.-4      	; 0x1d84 <__eerd_blraw_m16a+0x2>
    1d88:	06 c0       	rjmp	.+12     	; 0x1d96 <__eerd_blraw_m16a+0x14>
    1d8a:	ff bb       	out	0x1f, r31	; 31
    1d8c:	ee bb       	out	0x1e, r30	; 30
    1d8e:	e0 9a       	sbi	0x1c, 0	; 28
    1d90:	31 96       	adiw	r30, 0x01	; 1
    1d92:	0d b2       	in	r0, 0x1d	; 29
    1d94:	0d 92       	st	X+, r0
    1d96:	41 50       	subi	r20, 0x01	; 1
    1d98:	50 40       	sbci	r21, 0x00	; 0
    1d9a:	b8 f7       	brcc	.-18     	; 0x1d8a <__eerd_blraw_m16a+0x8>
    1d9c:	08 95       	ret

00001d9e <__eewr_byte_m16a>:
    1d9e:	26 2f       	mov	r18, r22

00001da0 <__eewr_r18_m16a>:
    1da0:	e1 99       	sbic	0x1c, 1	; 28
    1da2:	fe cf       	rjmp	.-4      	; 0x1da0 <__eewr_r18_m16a>
    1da4:	9f bb       	out	0x1f, r25	; 31
    1da6:	8e bb       	out	0x1e, r24	; 30
    1da8:	2d bb       	out	0x1d, r18	; 29
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	e2 9a       	sbi	0x1c, 2	; 28
    1db0:	e1 9a       	sbi	0x1c, 1	; 28
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	01 96       	adiw	r24, 0x01	; 1
    1db6:	08 95       	ret

00001db8 <_exit>:
    1db8:	f8 94       	cli

00001dba <__stop_program>:
    1dba:	ff cf       	rjmp	.-2      	; 0x1dba <__stop_program>
