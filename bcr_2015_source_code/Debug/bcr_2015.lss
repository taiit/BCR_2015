
bcr_2015.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014f0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000014f0  000015a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000018e  0080008a  0080008a  000015ce  2**0
                  ALLOC
  3 .eeprom       00000010  00810000  00810000  000015ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  0000160e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022ac  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c7e  00000000  00000000  00003b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f2b  00000000  00000000  000047e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a4  00000000  00000000  00005714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000900  00000000  00000000  00005db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012ed  00000000  00000000  000066b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  000079a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "uint_test.h"
#include "../../lib/inc/common.h"
#include "../../lib/inc/hardware_feature.h"
#include "../../lib/inc/LedBug.h"

void vLedDebugTest(){
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
	//test led debug. 
	// total: 40s
	for(int i = 0; i < 10; i++){
		LED_BUG_BLINK;
       4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
#include "../../lib/inc/LedBug.h"

void vLedDebugTest(){
	//test led debug. 
	// total: 40s
	for(int i = 0; i < 10; i++){
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
		LED_BUG_BLINK;
		_delay_ms(500);
	}	
	vLedCtrl(LED_FAST_BLINK);
      24:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__vector_9>
      28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      2c:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__vector_11>
      30:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__vector_12>
      34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
	_delay_ms(10000);
	vLedCtrl(LED_SLOW_BLINK);
      40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	1d 06       	cpc	r1, r29
      56:	70 06       	cpc	r7, r16
      58:	c8 06       	cpc	r12, r24
	_delay_ms(10000);
	vLedCtrl(LED_STARTUP_COMPELETE);
      5a:	37 07       	cpc	r19, r23
      5c:	37 07       	cpc	r19, r23
      5e:	37 07       	cpc	r19, r23
      60:	37 07       	cpc	r19, r23
      62:	37 07       	cpc	r19, r23
      64:	37 07       	cpc	r19, r23
      66:	37 07       	cpc	r19, r23
      68:	37 07       	cpc	r19, r23
      6a:	14 06       	cpc	r1, r20
      6c:	14 06       	cpc	r1, r20
      6e:	37 07       	cpc	r19, r23
      70:	37 07       	cpc	r19, r23
      72:	37 07       	cpc	r19, r23
      74:	37 07       	cpc	r19, r23
      76:	37 07       	cpc	r19, r23
      78:	37 07       	cpc	r19, r23
      7a:	37 07       	cpc	r19, r23
      7c:	37 07       	cpc	r19, r23
      7e:	14 06       	cpc	r1, r20
      80:	37 07       	cpc	r19, r23
      82:	37 07       	cpc	r19, r23
      84:	37 07       	cpc	r19, r23
      86:	37 07       	cpc	r19, r23
      88:	37 07       	cpc	r19, r23
      8a:	37 07       	cpc	r19, r23
      8c:	37 07       	cpc	r19, r23
      8e:	37 07       	cpc	r19, r23
      90:	37 07       	cpc	r19, r23
      92:	14 06       	cpc	r1, r20
      94:	37 07       	cpc	r19, r23
      96:	37 07       	cpc	r19, r23
      98:	37 07       	cpc	r19, r23
      9a:	37 07       	cpc	r19, r23
      9c:	37 07       	cpc	r19, r23
      9e:	37 07       	cpc	r19, r23
      a0:	37 07       	cpc	r19, r23
      a2:	37 07       	cpc	r19, r23
      a4:	37 07       	cpc	r19, r23
      a6:	14 06       	cpc	r1, r20
      a8:	14 06       	cpc	r1, r20
      aa:	14 06       	cpc	r1, r20
      ac:	14 06       	cpc	r1, r20
      ae:	37 07       	cpc	r19, r23
      b0:	37 07       	cpc	r19, r23
      b2:	37 07       	cpc	r19, r23
      b4:	37 07       	cpc	r19, r23
      b6:	37 07       	cpc	r19, r23
      b8:	37 07       	cpc	r19, r23
      ba:	14 06       	cpc	r1, r20
      bc:	14 06       	cpc	r1, r20
      be:	14 06       	cpc	r1, r20
      c0:	14 06       	cpc	r1, r20

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf e5       	ldi	r28, 0x5F	; 95
      c8:	d4 e0       	ldi	r29, 0x04	; 4
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	10 e0       	ldi	r17, 0x00	; 0
      d0:	a0 e6       	ldi	r26, 0x60	; 96
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	e0 ef       	ldi	r30, 0xF0	; 240
      d6:	f4 e1       	ldi	r31, 0x14	; 20
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	aa 38       	cpi	r26, 0x8A	; 138
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	22 e0       	ldi	r18, 0x02	; 2
      e6:	aa e8       	ldi	r26, 0x8A	; 138
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	a8 31       	cpi	r26, 0x18	; 24
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	0e 94 3c 07 	call	0xe78	; 0xe78 <main>
      f8:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <_exit>

000000fc <__bad_interrupt>:
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <v_init_debug_via_uart>:
	/*
     *  Initialize UART library for debugger, pass baud rate and AVR CPU clock
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )     
     */	
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 		
     100:	86 e2       	ldi	r24, 0x26	; 38
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 83 05 	call	0xb06	; 0xb06 <uart_init>
	
	//stdout = &usartstd;
	ptr_rx_buff = (unsigned int *)calloc(DEBUG_BUFF_SIZE,sizeof(unsigned int));
     108:	62 e0       	ldi	r22, 0x02	; 2
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	80 e4       	ldi	r24, 0x40	; 64
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	0e 94 04 09 	call	0x1208	; 0x1208 <calloc>
     114:	90 93 df 01 	sts	0x01DF, r25
     118:	80 93 de 01 	sts	0x01DE, r24
	ptr_command_data = (uint8_t *)calloc(DEBUG_BUFF_SIZE,sizeof(uint8_t));
     11c:	61 e0       	ldi	r22, 0x01	; 1
     11e:	70 e0       	ldi	r23, 0x00	; 0
     120:	80 e4       	ldi	r24, 0x40	; 64
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 04 09 	call	0x1208	; 0x1208 <calloc>
     128:	90 93 e3 01 	sts	0x01E3, r25
     12c:	80 93 e2 01 	sts	0x01E2, r24
	index_rx_buf = 0;
     130:	10 92 e1 01 	sts	0x01E1, r1
     134:	10 92 e0 01 	sts	0x01E0, r1
     138:	08 95       	ret

0000013a <bDebugProcess>:
/*
	@brief:		This function have been handle of main function
	@param:		none
	@return:	none 
*/
PUBLIC bool bDebugProcess(void){
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
	
	// [Vo Huu Tai 8/8/2015 ]  Note!! unsigned int only, i don't know why ?? .. :'(
	unsigned int ucUartDataIn;
	ucUartDataIn = uart_getc();	
     13e:	0e 94 97 05 	call	0xb2e	; 0xb2e <uart_getc>

	if(ucUartDataIn & UART_NO_DATA){
     142:	90 fd       	sbrc	r25, 0
     144:	67 c0       	rjmp	.+206    	; 0x214 <bDebugProcess+0xda>
		return false; //nothing in UART buffer, return
	} else{
		#ifdef _IN_FILE_BUD_
		//uart_putc(ucUartDataIn);
		#endif
		if(ucUartDataIn == '>'){ //first UART data incoming
     146:	8e 33       	cpi	r24, 0x3E	; 62
     148:	91 05       	cpc	r25, r1
     14a:	39 f4       	brne	.+14     	; 0x15a <bDebugProcess+0x20>
			index_rx_buf = 0;
     14c:	10 92 e1 01 	sts	0x01E1, r1
     150:	10 92 e0 01 	sts	0x01E0, r1
			bIsDubugCommandCompelete = false;
     154:	10 92 8c 00 	sts	0x008C, r1
     158:	5d c0       	rjmp	.+186    	; 0x214 <bDebugProcess+0xda>
		}
		else if(ucUartDataIn == '<'){//end UART data coming
     15a:	8c 33       	cpi	r24, 0x3C	; 60
     15c:	91 05       	cpc	r25, r1
     15e:	09 f0       	breq	.+2      	; 0x162 <bDebugProcess+0x28>
     160:	42 c0       	rjmp	.+132    	; 0x1e6 <bDebugProcess+0xac>
			
			sUartPacket.ucInfo = ptr_rx_buff[0];
     162:	e0 91 de 01 	lds	r30, 0x01DE
     166:	f0 91 df 01 	lds	r31, 0x01DF
     16a:	80 81       	ld	r24, Z
     16c:	80 93 d9 01 	sts	0x01D9, r24
			sUartPacket.ucDataLength = ptr_rx_buff[1];
     170:	82 81       	ldd	r24, Z+2	; 0x02
     172:	ea ed       	ldi	r30, 0xDA	; 218
     174:	f1 e0       	ldi	r31, 0x01	; 1
     176:	80 83       	st	Z, r24
			
			for(uint8_t i = 0; i < sUartPacket.ucDataLength; i++){
     178:	80 81       	ld	r24, Z
     17a:	88 23       	and	r24, r24
     17c:	c9 f0       	breq	.+50     	; 0x1b0 <bDebugProcess+0x76>
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	ef 01       	movw	r28, r30
				ptr_command_data[i] = ptr_rx_buff[i+2];
     182:	82 2f       	mov	r24, r18
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	e0 91 e2 01 	lds	r30, 0x01E2
     18a:	f0 91 e3 01 	lds	r31, 0x01E3
     18e:	e8 0f       	add	r30, r24
     190:	f9 1f       	adc	r31, r25
     192:	02 96       	adiw	r24, 0x02	; 2
     194:	88 0f       	add	r24, r24
     196:	99 1f       	adc	r25, r25
     198:	a0 91 de 01 	lds	r26, 0x01DE
     19c:	b0 91 df 01 	lds	r27, 0x01DF
     1a0:	a8 0f       	add	r26, r24
     1a2:	b9 1f       	adc	r27, r25
     1a4:	8c 91       	ld	r24, X
     1a6:	80 83       	st	Z, r24
		else if(ucUartDataIn == '<'){//end UART data coming
			
			sUartPacket.ucInfo = ptr_rx_buff[0];
			sUartPacket.ucDataLength = ptr_rx_buff[1];
			
			for(uint8_t i = 0; i < sUartPacket.ucDataLength; i++){
     1a8:	2f 5f       	subi	r18, 0xFF	; 255
     1aa:	88 81       	ld	r24, Y
     1ac:	28 17       	cp	r18, r24
     1ae:	48 f3       	brcs	.-46     	; 0x182 <bDebugProcess+0x48>
				ptr_command_data[i] = ptr_rx_buff[i+2];
			}
			sUartPacket.ucPtrData = ptr_command_data;
     1b0:	80 91 e2 01 	lds	r24, 0x01E2
     1b4:	90 91 e3 01 	lds	r25, 0x01E3
     1b8:	90 93 dc 01 	sts	0x01DC, r25
     1bc:	80 93 db 01 	sts	0x01DB, r24
			sUartPacket.ucCheckSum = ptr_rx_buff[sUartPacket.ucDataLength + 2];
     1c0:	e0 91 da 01 	lds	r30, 0x01DA
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	32 96       	adiw	r30, 0x02	; 2
     1c8:	ee 0f       	add	r30, r30
     1ca:	ff 1f       	adc	r31, r31
     1cc:	80 91 de 01 	lds	r24, 0x01DE
     1d0:	90 91 df 01 	lds	r25, 0x01DF
     1d4:	e8 0f       	add	r30, r24
     1d6:	f9 1f       	adc	r31, r25
     1d8:	80 81       	ld	r24, Z
     1da:	80 93 dd 01 	sts	0x01DD, r24
			for(uint8_t i = 0; i < sUartPacket.ucDataLength; i++){
				vPutIntNum(sUartPacket.ucPtrData[i],DEC_TYPE);
			}
			vPutStr("========================\n");			
			#endif		   
			bIsDubugCommandCompelete = true;
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	80 93 8c 00 	sts	0x008C, r24
     1e4:	17 c0       	rjmp	.+46     	; 0x214 <bDebugProcess+0xda>
		}
		else { //get data
			bIsDubugCommandCompelete = false;
     1e6:	10 92 8c 00 	sts	0x008C, r1
			ptr_rx_buff[index_rx_buf++] = ucUartDataIn;			
     1ea:	e0 91 de 01 	lds	r30, 0x01DE
     1ee:	f0 91 df 01 	lds	r31, 0x01DF
     1f2:	20 91 e0 01 	lds	r18, 0x01E0
     1f6:	30 91 e1 01 	lds	r19, 0x01E1
     1fa:	a9 01       	movw	r20, r18
     1fc:	4f 5f       	subi	r20, 0xFF	; 255
     1fe:	5f 4f       	sbci	r21, 0xFF	; 255
     200:	50 93 e1 01 	sts	0x01E1, r21
     204:	40 93 e0 01 	sts	0x01E0, r20
     208:	22 0f       	add	r18, r18
     20a:	33 1f       	adc	r19, r19
     20c:	e2 0f       	add	r30, r18
     20e:	f3 1f       	adc	r31, r19
     210:	91 83       	std	Z+1, r25	; 0x01
     212:	80 83       	st	Z, r24
		}		
	}	

	return false;
}
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <bMsgIsOK>:
	@brief:		Check msg is OK
	@param:		none
	@return:	True: msg ready be used 
*/
PUBLIC bool bMsgIsOK(){
	if(bIsDubugCommandCompelete){
     21c:	80 91 8c 00 	lds	r24, 0x008C
     220:	88 23       	and	r24, r24
     222:	21 f0       	breq	.+8      	; 0x22c <bMsgIsOK+0x10>
		if((sUartPacket.ucCheckSum | 0xff) == 0xff)return true;
     224:	80 91 dd 01 	lds	r24, 0x01DD
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	08 95       	ret
	}	
	return false;
     22c:	80 e0       	ldi	r24, 0x00	; 0
}
     22e:	08 95       	ret

00000230 <ucGetCMDInfo>:
	@brief:		Get command info
	@param:		none
	@return:	command info 
*/
PUBLIC uint8_t ucGetCMDInfo(){
	return sUartPacket.ucInfo;
     230:	80 91 d9 01 	lds	r24, 0x01D9
}
     234:	08 95       	ret

00000236 <vSetCMDInfo>:
	@brief:		Set CMD info
	@param:		command info
	@return:	none 
*/
PUBLIC void vSetCMDInfo(uint8_t ucCMDType){
	sUartPacket.ucInfo = ucCMDType;
     236:	80 93 d9 01 	sts	0x01D9, r24
     23a:	08 95       	ret

0000023c <ucGetData>:
/*
	@brief:		Get data of S_UART_PACKET
	@param:		pointer to saving data
	@return:	none 
*/
PUBLIC void ucGetData(uint8_t *ucPrtData){
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
	// [Vo Huu Tai 9/8/2015 ]  why
	//ucPrtData = sUartPacket.ucPtrData; //why, it not work
	for (int i = 0; i < sUartPacket.ucDataLength; i++)
     240:	20 91 da 01 	lds	r18, 0x01DA
     244:	22 23       	and	r18, r18
     246:	b1 f0       	breq	.+44     	; 0x274 <ucGetData+0x38>
     248:	e8 2f       	mov	r30, r24
     24a:	f9 2f       	mov	r31, r25
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
	{
		ucPrtData[i] = sUartPacket.ucPtrData[i];
     250:	4b ed       	ldi	r20, 0xDB	; 219
     252:	51 e0       	ldi	r21, 0x01	; 1
	@return:	none 
*/
PUBLIC void ucGetData(uint8_t *ucPrtData){
	// [Vo Huu Tai 9/8/2015 ]  why
	//ucPrtData = sUartPacket.ucPtrData; //why, it not work
	for (int i = 0; i < sUartPacket.ucDataLength; i++)
     254:	6a ed       	ldi	r22, 0xDA	; 218
     256:	71 e0       	ldi	r23, 0x01	; 1
	{
		ucPrtData[i] = sUartPacket.ucPtrData[i];
     258:	ea 01       	movw	r28, r20
     25a:	a8 81       	ld	r26, Y
     25c:	b9 81       	ldd	r27, Y+1	; 0x01
     25e:	a8 0f       	add	r26, r24
     260:	b9 1f       	adc	r27, r25
     262:	2c 91       	ld	r18, X
     264:	21 93       	st	Z+, r18
	@return:	none 
*/
PUBLIC void ucGetData(uint8_t *ucPrtData){
	// [Vo Huu Tai 9/8/2015 ]  why
	//ucPrtData = sUartPacket.ucPtrData; //why, it not work
	for (int i = 0; i < sUartPacket.ucDataLength; i++)
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	db 01       	movw	r26, r22
     26a:	2c 91       	ld	r18, X
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	82 17       	cp	r24, r18
     270:	93 07       	cpc	r25, r19
     272:	94 f3       	brlt	.-28     	; 0x258 <ucGetData+0x1c>
	for(uint8_t i = 0; i < sUartPacket.ucDataLength; i++){
		vPutIntNum(ucPrtData[i],DEC_TYPE);
	}	
	vPutStr("ucGetData() END\n");
	#endif
}
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <ucCalChecSum>:
	@brief:		Internal function, Cal checksum
	@param:		UART PACKET
	@return:	Check sum of data  
	@Note:		Mine, check sum for only data, not for type and length,..
*/
PRIVATE uint8_t ucCalChecSum(struct S_UART_PACKET sPacket){
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	00 d0       	rcall	.+0      	; 0x280 <ucCalChecSum+0x6>
     280:	00 d0       	rcall	.+0      	; 0x282 <ucCalChecSum+0x8>
     282:	1f 92       	push	r1
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
     288:	49 83       	std	Y+1, r20	; 0x01
     28a:	5a 83       	std	Y+2, r21	; 0x02
     28c:	6b 83       	std	Y+3, r22	; 0x03
     28e:	7c 83       	std	Y+4, r23	; 0x04
     290:	8d 83       	std	Y+5, r24	; 0x05
	
	int ucRet = 0;
	
	ucRet += sPacket.ucInfo;
	ucRet += sPacket.ucDataLength;
     292:	65 2f       	mov	r22, r21
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	9b 01       	movw	r18, r22
     298:	24 0f       	add	r18, r20
     29a:	31 1d       	adc	r19, r1
     29c:	c9 01       	movw	r24, r18
	for (int i = 0; i < sPacket.ucDataLength; i++)
     29e:	16 16       	cp	r1, r22
     2a0:	17 06       	cpc	r1, r23
     2a2:	64 f4       	brge	.+24     	; 0x2bc <ucCalChecSum+0x42>
     2a4:	eb 81       	ldd	r30, Y+3	; 0x03
     2a6:	fc 81       	ldd	r31, Y+4	; 0x04
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	30 e0       	ldi	r19, 0x00	; 0
	{
		 ucRet += sPacket.ucPtrData[i];
     2ac:	41 91       	ld	r20, Z+
     2ae:	84 0f       	add	r24, r20
     2b0:	91 1d       	adc	r25, r1
	
	int ucRet = 0;
	
	ucRet += sPacket.ucInfo;
	ucRet += sPacket.ucDataLength;
	for (int i = 0; i < sPacket.ucDataLength; i++)
     2b2:	2f 5f       	subi	r18, 0xFF	; 255
     2b4:	3f 4f       	sbci	r19, 0xFF	; 255
     2b6:	26 17       	cp	r18, r22
     2b8:	37 07       	cpc	r19, r23
     2ba:	c4 f3       	brlt	.-16     	; 0x2ac <ucCalChecSum+0x32>
		 ucRet += sPacket.ucPtrData[i];
	}
	 ucRet ^= 0xFF;
	 return (uint8_t) ucRet;
	
}
     2bc:	80 95       	com	r24
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <vSendMSG>:
/*
	@brief:		Sending msg via UART
	@param:		msg to send
	@return:	none 
*/
PUBLIC void vSendMSG(struct S_UART_PACKET K_MSG){
     2ce:	cf 92       	push	r12
     2d0:	df 92       	push	r13
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <vSendMSG+0x12>
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <vSendMSG+0x14>
     2e2:	1f 92       	push	r1
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	49 83       	std	Y+1, r20	; 0x01
     2ea:	e5 2e       	mov	r14, r21
     2ec:	5a 83       	std	Y+2, r21	; 0x02
     2ee:	6b 83       	std	Y+3, r22	; 0x03
     2f0:	7c 83       	std	Y+4, r23	; 0x04
     2f2:	8d 83       	std	Y+5, r24	; 0x05
	       >	type	datalength		data[0:length]	checksum	<
		   
		   >	0			1			48				xx		<
	
	*/
	uint8_t *ucPtrDataSend = (uint8_t*)calloc(DEBUG_BUFF_SIZE,sizeof(uint8_t));
     2f4:	61 e0       	ldi	r22, 0x01	; 1
     2f6:	70 e0       	ldi	r23, 0x00	; 0
     2f8:	80 e4       	ldi	r24, 0x40	; 64
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 04 09 	call	0x1208	; 0x1208 <calloc>
     300:	8c 01       	movw	r16, r24
	
	ucPtrDataSend[0] = '>';
     302:	8e e3       	ldi	r24, 0x3E	; 62
     304:	f8 01       	movw	r30, r16
     306:	80 83       	st	Z, r24
	ucPtrDataSend[1] = K_MSG.ucInfo;
     308:	89 81       	ldd	r24, Y+1	; 0x01
     30a:	81 83       	std	Z+1, r24	; 0x01
	ucPtrDataSend[2] = K_MSG.ucDataLength;
     30c:	e2 82       	std	Z+2, r14	; 0x02
	
	for(int i = 0; i < K_MSG.ucDataLength; i++){
     30e:	f1 2c       	mov	r15, r1
     310:	1e 14       	cp	r1, r14
     312:	1f 04       	cpc	r1, r15
     314:	64 f4       	brge	.+24     	; 0x32e <vSendMSG+0x60>
     316:	ab 81       	ldd	r26, Y+3	; 0x03
     318:	bc 81       	ldd	r27, Y+4	; 0x04
     31a:	33 96       	adiw	r30, 0x03	; 3
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	30 e0       	ldi	r19, 0x00	; 0
		ucPtrDataSend[3 + i] = K_MSG.ucPtrData[i];
     320:	8d 91       	ld	r24, X+
     322:	81 93       	st	Z+, r24
	
	ucPtrDataSend[0] = '>';
	ucPtrDataSend[1] = K_MSG.ucInfo;
	ucPtrDataSend[2] = K_MSG.ucDataLength;
	
	for(int i = 0; i < K_MSG.ucDataLength; i++){
     324:	2f 5f       	subi	r18, 0xFF	; 255
     326:	3f 4f       	sbci	r19, 0xFF	; 255
     328:	2e 15       	cp	r18, r14
     32a:	3f 05       	cpc	r19, r15
     32c:	cc f3       	brlt	.-14     	; 0x320 <vSendMSG+0x52>
		ucPtrDataSend[3 + i] = K_MSG.ucPtrData[i];
	}
	
	ucPtrDataSend[3 + K_MSG.ucDataLength] = ucCalChecSum(K_MSG);
     32e:	67 01       	movw	r12, r14
     330:	f3 e0       	ldi	r31, 0x03	; 3
     332:	cf 0e       	add	r12, r31
     334:	d1 1c       	adc	r13, r1
     336:	c0 0e       	add	r12, r16
     338:	d1 1e       	adc	r13, r17
     33a:	49 81       	ldd	r20, Y+1	; 0x01
     33c:	5a 81       	ldd	r21, Y+2	; 0x02
     33e:	6b 81       	ldd	r22, Y+3	; 0x03
     340:	7c 81       	ldd	r23, Y+4	; 0x04
     342:	8d 81       	ldd	r24, Y+5	; 0x05
     344:	0e 94 3d 01 	call	0x27a	; 0x27a <ucCalChecSum>
     348:	f6 01       	movw	r30, r12
     34a:	80 83       	st	Z, r24
	ucPtrDataSend[4 + K_MSG.ucDataLength] = '<';	
     34c:	f8 01       	movw	r30, r16
     34e:	ee 0d       	add	r30, r14
     350:	ff 1d       	adc	r31, r15
     352:	8c e3       	ldi	r24, 0x3C	; 60
     354:	84 83       	std	Z+4, r24	; 0x04
	
	
	for(uint8_t i = 0; i < (K_MSG.ucDataLength + 5); i++){
     356:	c7 01       	movw	r24, r14
     358:	05 96       	adiw	r24, 0x05	; 5
     35a:	7c 01       	movw	r14, r24
     35c:	d1 2c       	mov	r13, r1
		uart_putc(ucPtrDataSend[i]);
     35e:	f8 01       	movw	r30, r16
     360:	ed 0d       	add	r30, r13
     362:	f1 1d       	adc	r31, r1
     364:	80 81       	ld	r24, Z
     366:	0e 94 b0 05 	call	0xb60	; 0xb60 <uart_putc>
	
	ucPtrDataSend[3 + K_MSG.ucDataLength] = ucCalChecSum(K_MSG);
	ucPtrDataSend[4 + K_MSG.ucDataLength] = '<';	
	
	
	for(uint8_t i = 0; i < (K_MSG.ucDataLength + 5); i++){
     36a:	d3 94       	inc	r13
     36c:	2d 2d       	mov	r18, r13
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	2e 15       	cp	r18, r14
     372:	3f 05       	cpc	r19, r15
     374:	a4 f3       	brlt	.-24     	; 0x35e <vSendMSG+0x90>
		uart_putc(ucPtrDataSend[i]);
	}
	
	free(ucPtrDataSend);
     376:	c8 01       	movw	r24, r16
     378:	0e 94 b8 09 	call	0x1370	; 0x1370 <free>
}
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	ef 90       	pop	r14
     392:	df 90       	pop	r13
     394:	cf 90       	pop	r12
     396:	08 95       	ret

00000398 <vOutLed7>:
/*
	@brief:		Send data data' LED 7 segment to slave board
	@param:		Data to be sent
	@return:	none 
*/
PUBLIC void vOutLed7(unsigned int uiData){
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	27 97       	sbiw	r28, 0x07	; 7
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	8c 01       	movw	r16, r24
	if(uiData == uiOldDataLed7seg)return;
     3b2:	80 91 8a 00 	lds	r24, 0x008A
     3b6:	90 91 8b 00 	lds	r25, 0x008B
     3ba:	08 17       	cp	r16, r24
     3bc:	19 07       	cpc	r17, r25
     3be:	29 f1       	breq	.+74     	; 0x40a <vOutLed7+0x72>
	
	
	struct S_UART_PACKET msg ;
	uint8_t ucPrtData[2];
	
	ucPrtData[0] = uiData / 100;
     3c0:	98 01       	movw	r18, r16
     3c2:	36 95       	lsr	r19
     3c4:	27 95       	ror	r18
     3c6:	36 95       	lsr	r19
     3c8:	27 95       	ror	r18
     3ca:	ab e7       	ldi	r26, 0x7B	; 123
     3cc:	b4 e1       	ldi	r27, 0x14	; 20
     3ce:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__umulhisi3>
     3d2:	96 95       	lsr	r25
     3d4:	87 95       	ror	r24
     3d6:	8e 83       	std	Y+6, r24	; 0x06
	ucPrtData[1] = uiData % 100;
     3d8:	44 e6       	ldi	r20, 0x64	; 100
     3da:	48 9f       	mul	r20, r24
     3dc:	90 01       	movw	r18, r0
     3de:	49 9f       	mul	r20, r25
     3e0:	30 0d       	add	r19, r0
     3e2:	11 24       	eor	r1, r1
     3e4:	c8 01       	movw	r24, r16
     3e6:	82 1b       	sub	r24, r18
     3e8:	93 0b       	sbc	r25, r19
     3ea:	8f 83       	std	Y+7, r24	; 0x07
	
	msg.ucInfo = CMD_UPDATE_LED_7SEG;
	msg.ucDataLength = 2;
	msg.ucPtrData = ucPrtData;	
     3ec:	ce 01       	movw	r24, r28
     3ee:	06 96       	adiw	r24, 0x06	; 6
     3f0:	68 2f       	mov	r22, r24
     3f2:	9c 83       	std	Y+4, r25	; 0x04
     3f4:	8b 83       	std	Y+3, r24	; 0x03
	
	vSendMSG(msg);	
     3f6:	40 e0       	ldi	r20, 0x00	; 0
     3f8:	52 e0       	ldi	r21, 0x02	; 2
     3fa:	7c 81       	ldd	r23, Y+4	; 0x04
     3fc:	8d 81       	ldd	r24, Y+5	; 0x05
     3fe:	0e 94 67 01 	call	0x2ce	; 0x2ce <vSendMSG>
	
	uiOldDataLed7seg = uiData;
     402:	10 93 8b 00 	sts	0x008B, r17
     406:	00 93 8a 00 	sts	0x008A, r16
}
     40a:	27 96       	adiw	r28, 0x07	; 7
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	08 95       	ret

00000420 <vBeep>:
/*
	@brief:		send msg control beep
	@param:		time beep in ms, form 000 to 9999 ms
	@return:	none 
*/
PUBLIC void vBeep(unsigned int uiBeepTime_ms){
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
     428:	27 97       	sbiw	r28, 0x07	; 7
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	ac 01       	movw	r20, r24
     436:	40 31       	cpi	r20, 0x10	; 16
     438:	87 e2       	ldi	r24, 0x27	; 39
     43a:	58 07       	cpc	r21, r24
     43c:	10 f0       	brcs	.+4      	; 0x442 <vBeep+0x22>
     43e:	4f e0       	ldi	r20, 0x0F	; 15
     440:	57 e2       	ldi	r21, 0x27	; 39
	uint8_t ucPrtData[2];
	struct S_UART_PACKET msg ;
	
	if(uiBeepTime_ms > 9999)uiBeepTime_ms = 9999;
	
	ucPrtData[0] = uiBeepTime_ms / 100;
     442:	9a 01       	movw	r18, r20
     444:	36 95       	lsr	r19
     446:	27 95       	ror	r18
     448:	36 95       	lsr	r19
     44a:	27 95       	ror	r18
     44c:	ab e7       	ldi	r26, 0x7B	; 123
     44e:	b4 e1       	ldi	r27, 0x14	; 20
     450:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__umulhisi3>
     454:	96 95       	lsr	r25
     456:	87 95       	ror	r24
     458:	89 83       	std	Y+1, r24	; 0x01
	ucPrtData[1] = uiBeepTime_ms % 100;
     45a:	64 e6       	ldi	r22, 0x64	; 100
     45c:	68 9f       	mul	r22, r24
     45e:	90 01       	movw	r18, r0
     460:	69 9f       	mul	r22, r25
     462:	30 0d       	add	r19, r0
     464:	11 24       	eor	r1, r1
     466:	42 1b       	sub	r20, r18
     468:	53 0b       	sbc	r21, r19
     46a:	4a 83       	std	Y+2, r20	; 0x02

	
	msg.ucInfo = CMD_BEEP;
	msg.ucDataLength = 2;
	msg.ucPtrData = ucPrtData;
     46c:	ce 01       	movw	r24, r28
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	68 2f       	mov	r22, r24
     472:	9e 83       	std	Y+6, r25	; 0x06
     474:	8d 83       	std	Y+5, r24	; 0x05
	
	vSendMSG(msg);	
     476:	41 e0       	ldi	r20, 0x01	; 1
     478:	52 e0       	ldi	r21, 0x02	; 2
     47a:	7e 81       	ldd	r23, Y+6	; 0x06
     47c:	8f 81       	ldd	r24, Y+7	; 0x07
     47e:	0e 94 67 01 	call	0x2ce	; 0x2ce <vSendMSG>
}
     482:	27 96       	adiw	r28, 0x07	; 7
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <iGetInlined>:
/*
	@brief:		Get inclined of mpu6050 board
	@param:		none
	@return:	inclined of sensor 
*/
PUBLIC int iGetInlined(){
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	00 d0       	rcall	.+0      	; 0x49a <iGetInlined+0x6>
     49a:	00 d0       	rcall	.+0      	; 0x49c <iGetInlined+0x8>
     49c:	00 d0       	rcall	.+0      	; 0x49e <iGetInlined+0xa>
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
	uint8_t ucPrtData[1] = {0};// = (uint8_t *)calloc(1,sizeof(uint8_t));	
     4a2:	19 82       	std	Y+1, r1	; 0x01
	
	struct S_UART_PACKET msg ;
	msg.ucInfo = CMD_SENSOR;
	msg.ucDataLength = 1;
	msg.ucPtrData = ucPrtData;
     4a4:	ce 01       	movw	r24, r28
     4a6:	01 96       	adiw	r24, 0x01	; 1
     4a8:	68 2f       	mov	r22, r24
     4aa:	9d 83       	std	Y+5, r25	; 0x05
     4ac:	8c 83       	std	Y+4, r24	; 0x04
	vSendMSG(msg);	
     4ae:	42 e0       	ldi	r20, 0x02	; 2
     4b0:	51 e0       	ldi	r21, 0x01	; 1
     4b2:	7d 81       	ldd	r23, Y+5	; 0x05
     4b4:	8e 81       	ldd	r24, Y+6	; 0x06
     4b6:	0e 94 67 01 	call	0x2ce	; 0x2ce <vSendMSG>
		
	return 0;
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	26 96       	adiw	r28, 0x06	; 6
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <vInitTimer0>:
				Normal mode.
				F = 12Mhz
				T = 5.33333us
				=> prescaler = 64
	*/
	TCCR0 = (1 << CS01) | (1<<CS00);
     4d0:	83 e0       	ldi	r24, 0x03	; 3
     4d2:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
     4d4:	89 b7       	in	r24, 0x39	; 57
     4d6:	81 60       	ori	r24, 0x01	; 1
     4d8:	89 bf       	out	0x39, r24	; 57
     4da:	08 95       	ret

000004dc <vInitTimer1>:
				F = 12Mhz
				T = 15ms
				=> prescaler = 8.
				ICR1 = 15ms / ((1/12Mhz)*8) = 22500	
	*/
	TCCR1A = (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
     4dc:	82 ea       	ldi	r24, 0xA2	; 162
     4de:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
     4e0:	8a e1       	ldi	r24, 0x1A	; 26
     4e2:	8e bd       	out	0x2e, r24	; 46
	ICR1 = PWM_PERIOD_LEFT_MAX;
     4e4:	84 ee       	ldi	r24, 0xE4	; 228
     4e6:	97 e5       	ldi	r25, 0x57	; 87
     4e8:	97 bd       	out	0x27, r25	; 39
     4ea:	86 bd       	out	0x26, r24	; 38
	OCR1A = SERVO_CENTER; //Servo, 1ms <-> 1500 and 2ms <-> 3000
     4ec:	8e e2       	ldi	r24, 0x2E	; 46
     4ee:	99 e0       	ldi	r25, 0x09	; 9
     4f0:	9b bd       	out	0x2b, r25	; 43
     4f2:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 0;//Motor Left
     4f4:	19 bc       	out	0x29, r1	; 41
     4f6:	18 bc       	out	0x28, r1	; 40
     4f8:	08 95       	ret

000004fa <vInitProgram>:
#include "../inc/hardware_config.h"
#include "../inc/debug.h"

void vInitProgram(){
	//disable local interrupt
	cli();
     4fa:	f8 94       	cli
	
	//IO initialize
	LED_BUB_INIT;		//Led debug is output
     4fc:	bf 9a       	sbi	0x17, 7	; 23
     4fe:	c7 9a       	sbi	0x18, 7	; 24
	KEY_INIT;			//Key is input
     500:	b8 98       	cbi	0x17, 0	; 23
     502:	c0 9a       	sbi	0x18, 0	; 24
     504:	b9 98       	cbi	0x17, 1	; 23
     506:	c1 9a       	sbi	0x18, 1	; 24
     508:	ba 98       	cbi	0x17, 2	; 23
     50a:	c2 9a       	sbi	0x18, 2	; 24
	SWITCH_INIT;		//Switch is input
     50c:	a3 98       	cbi	0x14, 3	; 20
     50e:	ab 9a       	sbi	0x15, 3	; 21
     510:	a2 98       	cbi	0x14, 2	; 20
     512:	aa 9a       	sbi	0x15, 2	; 21
     514:	a1 98       	cbi	0x14, 1	; 20
     516:	a9 9a       	sbi	0x15, 1	; 21
     518:	a0 98       	cbi	0x14, 0	; 20
     51a:	a8 9a       	sbi	0x15, 0	; 21
     51c:	a6 98       	cbi	0x14, 6	; 20
     51e:	ae 9a       	sbi	0x15, 6	; 21
	MOTOR_LEFT_INIT;
     520:	bc 9a       	sbi	0x17, 4	; 23
     522:	c4 98       	cbi	0x18, 4	; 24
     524:	be 9a       	sbi	0x17, 6	; 23
     526:	c6 9a       	sbi	0x18, 6	; 24
     528:	8c 9a       	sbi	0x11, 4	; 17
	MOTOR_RIGHT_INIT;
     52a:	bb 9a       	sbi	0x17, 3	; 23
     52c:	c3 98       	cbi	0x18, 3	; 24
     52e:	bd 9a       	sbi	0x17, 5	; 23
     530:	c5 9a       	sbi	0x18, 5	; 24
     532:	8f 9a       	sbi	0x11, 7	; 17
	SERVO_INIT;
     534:	8d 9a       	sbi	0x11, 5	; 17
	SLAVE_ENABLE_INIT;
     536:	a4 9a       	sbi	0x14, 4	; 20
	SLAVE_ON;
     538:	ac 9a       	sbi	0x15, 4	; 21
	USB_DISABLE;
     53a:	a7 98       	cbi	0x14, 7	; 20
     53c:	a7 98       	cbi	0x14, 7	; 20
	//SENSOR_INTIT; //Use ADC
	ADC_INIT;
     53e:	1a ba       	out	0x1a, r1	; 26
     540:	85 e8       	ldi	r24, 0x85	; 133
     542:	86 b9       	out	0x06, r24	; 6
     544:	80 e4       	ldi	r24, 0x40	; 64
     546:	87 b9       	out	0x07, r24	; 7
	
	//Timer and PWM
	vInitTimer0();
     548:	0e 94 68 02 	call	0x4d0	; 0x4d0 <vInitTimer0>
	vInitTimer1();
     54c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <vInitTimer1>
				Non-inverting: COM2[1:0] = 10
				F = 12Mhz
				T = 5.5ms
				=> prescaler = 256.
	*/
	TCCR2 = (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (1 << CS22) | (1 << CS21);
     550:	8e e6       	ldi	r24, 0x6E	; 110
     552:	85 bd       	out	0x25, r24	; 37
	vInitTimer0();
	vInitTimer1();
	vInitTimer2();	
	
	//SERIAL
	v_init_debug_via_uart();
     554:	0e 94 80 00 	call	0x100	; 0x100 <v_init_debug_via_uart>
	//enable local interrupt
	sei();
     558:	78 94       	sei
     55a:	08 95       	ret

0000055c <bKeyIsPress>:
 */ 
#include "../inc/hardware_feature.h"
#include "../inc/debug.h"

bool bKeyIsPress(uint8_t ucKeyID){
	uint8_t mask = (1<<ucKeyID);
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	a9 01       	movw	r20, r18
     562:	02 c0       	rjmp	.+4      	; 0x568 <bKeyIsPress+0xc>
     564:	44 0f       	add	r20, r20
     566:	55 1f       	adc	r21, r21
     568:	8a 95       	dec	r24
     56a:	e2 f7       	brpl	.-8      	; 0x564 <bKeyIsPress+0x8>
     56c:	ca 01       	movw	r24, r20
     56e:	24 2f       	mov	r18, r20
	//key is pressed when pin = 0;
	if((PIN_KEY & mask) != mask){
     570:	36 b3       	in	r19, 0x16	; 22
     572:	34 23       	and	r19, r20
     574:	34 17       	cp	r19, r20
     576:	d1 f0       	breq	.+52     	; 0x5ac <bKeyIsPress+0x50>
     578:	ef e2       	ldi	r30, 0x2F	; 47
     57a:	f5 e7       	ldi	r31, 0x75	; 117
     57c:	31 97       	sbiw	r30, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <bKeyIsPress+0x20>
     580:	00 c0       	rjmp	.+0      	; 0x582 <bKeyIsPress+0x26>
     582:	00 00       	nop
		_delay_ms(10);
		if((PIN_KEY & mask) != mask){
     584:	96 b3       	in	r25, 0x16	; 22
     586:	89 23       	and	r24, r25
     588:	84 17       	cp	r24, r20
     58a:	91 f0       	breq	.+36     	; 0x5b0 <bKeyIsPress+0x54>
     58c:	8f e2       	ldi	r24, 0x2F	; 47
     58e:	95 e7       	ldi	r25, 0x75	; 117
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	f1 f7       	brne	.-4      	; 0x590 <bKeyIsPress+0x34>
     594:	00 c0       	rjmp	.+0      	; 0x596 <bKeyIsPress+0x3a>
     596:	00 00       	nop
			//LED_BUG_ON;
			_delay_ms(10);
			while((PIN_KEY&mask)!=mask);//waiting for key is released
     598:	86 b3       	in	r24, 0x16	; 22
     59a:	82 23       	and	r24, r18
     59c:	82 13       	cpse	r24, r18
     59e:	fc cf       	rjmp	.-8      	; 0x598 <bKeyIsPress+0x3c>
			//LED_BUG_OFF;
			vBeep(30);
     5a0:	8e e1       	ldi	r24, 0x1E	; 30
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	0e 94 10 02 	call	0x420	; 0x420 <vBeep>
			return true;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	08 95       	ret
		}
	}
	return false;
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	08 95       	ret
     5b0:	80 e0       	ldi	r24, 0x00	; 0
}
     5b2:	08 95       	ret

000005b4 <ucGetSwitch>:

uint8_t ucGetSwitch(){
	uint8_t mask = (1<<SW1) | (1<<SW2) | (1<<SW3) | (1<<SW4);
	uint8_t binData = (~PIN_SWITCH) & mask; 	
     5b4:	83 b3       	in	r24, 0x13	; 19
     5b6:	80 95       	com	r24
	// Must swap switch bit
	//binData = 0000 1101 => 0000 1011 		
	return binData;
}
     5b8:	8f 70       	andi	r24, 0x0F	; 15
     5ba:	08 95       	ret

000005bc <vMotor>:

/*TaiVH1 -- Aug 11, 2015  brief: Add for control motor and servo*/

void vMotor(int iSpeedLeft, int iSpeedRight){
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	eb 01       	movw	r28, r22
	//uint8_t ucSwData = ucGetSwitch() + 5;//ucSwData = [0..20]
	int iSpeedOfset ;//= (PWM_PERIOD_LEFT_MAX-1)*((float)(ucSwData/20));
	iSpeedOfset = PWM_PERIOD_LEFT_MAX - 1; //Fix me
	//Speed motor left
	if(iSpeedLeft >= 0){
     5c2:	99 23       	and	r25, r25
     5c4:	cc f0       	brlt	.+50     	; 0x5f8 <vMotor+0x3c>
		sbi(PORT_MOTOR,DIR_L);
     5c6:	c4 9a       	sbi	0x18, 4	; 24
		OCR1B = iSpeedOfset * ((float)(iSpeedLeft * 0.01));
     5c8:	bc 01       	movw	r22, r24
     5ca:	88 27       	eor	r24, r24
     5cc:	77 fd       	sbrc	r23, 7
     5ce:	80 95       	com	r24
     5d0:	98 2f       	mov	r25, r24
     5d2:	0e 94 00 08 	call	0x1000	; 0x1000 <__floatsisf>
     5d6:	2a e0       	ldi	r18, 0x0A	; 10
     5d8:	37 ed       	ldi	r19, 0xD7	; 215
     5da:	43 e2       	ldi	r20, 0x23	; 35
     5dc:	5c e3       	ldi	r21, 0x3C	; 60
     5de:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__mulsf3>
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	36 ec       	ldi	r19, 0xC6	; 198
     5e6:	4f ea       	ldi	r20, 0xAF	; 175
     5e8:	56 e4       	ldi	r21, 0x46	; 70
     5ea:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__mulsf3>
     5ee:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__fixunssfsi>
     5f2:	79 bd       	out	0x29, r23	; 41
     5f4:	68 bd       	out	0x28, r22	; 40
     5f6:	1b c0       	rjmp	.+54     	; 0x62e <vMotor+0x72>
	}
	else{
		cbi(PORT_MOTOR,DIR_L);
     5f8:	c4 98       	cbi	0x18, 4	; 24
		OCR1B = iSpeedOfset * (float)((-iSpeedLeft) * 0.01);
     5fa:	91 95       	neg	r25
     5fc:	81 95       	neg	r24
     5fe:	91 09       	sbc	r25, r1
     600:	bc 01       	movw	r22, r24
     602:	88 27       	eor	r24, r24
     604:	77 fd       	sbrc	r23, 7
     606:	80 95       	com	r24
     608:	98 2f       	mov	r25, r24
     60a:	0e 94 00 08 	call	0x1000	; 0x1000 <__floatsisf>
     60e:	2a e0       	ldi	r18, 0x0A	; 10
     610:	37 ed       	ldi	r19, 0xD7	; 215
     612:	43 e2       	ldi	r20, 0x23	; 35
     614:	5c e3       	ldi	r21, 0x3C	; 60
     616:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__mulsf3>
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	36 ec       	ldi	r19, 0xC6	; 198
     61e:	4f ea       	ldi	r20, 0xAF	; 175
     620:	56 e4       	ldi	r21, 0x46	; 70
     622:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__mulsf3>
     626:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__fixunssfsi>
     62a:	79 bd       	out	0x29, r23	; 41
     62c:	68 bd       	out	0x28, r22	; 40
	}
	//Speed motor right
	iSpeedOfset = PEM_PERIOD_RIGHT_MAX - 1;
	if(iSpeedRight >= 0){
     62e:	dd 23       	and	r29, r29
     630:	c4 f0       	brlt	.+48     	; 0x662 <vMotor+0xa6>
		cbi(PORT_MOTOR,DIR_R);
     632:	c3 98       	cbi	0x18, 3	; 24
		OCR2  = iSpeedOfset * ((float)(iSpeedRight * 0.01));
     634:	be 01       	movw	r22, r28
     636:	88 27       	eor	r24, r24
     638:	77 fd       	sbrc	r23, 7
     63a:	80 95       	com	r24
     63c:	98 2f       	mov	r25, r24
     63e:	0e 94 00 08 	call	0x1000	; 0x1000 <__floatsisf>
     642:	2a e0       	ldi	r18, 0x0A	; 10
     644:	37 ed       	ldi	r19, 0xD7	; 215
     646:	43 e2       	ldi	r20, 0x23	; 35
     648:	5c e3       	ldi	r21, 0x3C	; 60
     64a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__mulsf3>
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	4e e7       	ldi	r20, 0x7E	; 126
     654:	53 e4       	ldi	r21, 0x43	; 67
     656:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__mulsf3>
     65a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__fixunssfsi>
     65e:	63 bd       	out	0x23, r22	; 35
     660:	1a c0       	rjmp	.+52     	; 0x696 <vMotor+0xda>
	}
	else{
		sbi(PORT_MOTOR,DIR_R);
     662:	c3 9a       	sbi	0x18, 3	; 24
		OCR2  = iSpeedOfset * ((float)((-iSpeedRight) * 0.01));
     664:	66 27       	eor	r22, r22
     666:	77 27       	eor	r23, r23
     668:	6c 1b       	sub	r22, r28
     66a:	7d 0b       	sbc	r23, r29
     66c:	88 27       	eor	r24, r24
     66e:	77 fd       	sbrc	r23, 7
     670:	80 95       	com	r24
     672:	98 2f       	mov	r25, r24
     674:	0e 94 00 08 	call	0x1000	; 0x1000 <__floatsisf>
     678:	2a e0       	ldi	r18, 0x0A	; 10
     67a:	37 ed       	ldi	r19, 0xD7	; 215
     67c:	43 e2       	ldi	r20, 0x23	; 35
     67e:	5c e3       	ldi	r21, 0x3C	; 60
     680:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__mulsf3>
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	4e e7       	ldi	r20, 0x7E	; 126
     68a:	53 e4       	ldi	r21, 0x43	; 67
     68c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__mulsf3>
     690:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__fixunssfsi>
     694:	63 bd       	out	0x23, r22	; 35
	}
}
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	08 95       	ret

0000069c <vServo>:
	}else{
		cbi(PORT_MOTOR,BF_R);
	}
}
void vServo(int iAngle){
	OCR1A = SERVO_CENTER + iAngle*SERVO_ANGLE_STEP;
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	88 0f       	add	r24, r24
     6a6:	99 1f       	adc	r25, r25
     6a8:	82 5d       	subi	r24, 0xD2	; 210
     6aa:	96 4f       	sbci	r25, 0xF6	; 246
     6ac:	9b bd       	out	0x2b, r25	; 43
     6ae:	8a bd       	out	0x2a, r24	; 42
     6b0:	08 95       	ret

000006b2 <isTester>:
/*TaiVH1 -- Aug 11, 2015  brief: End add for motor and servo*/

// [Vo Huu Tai 12/8/2015 ]  Add for inclined and tester

bool isTester(){
	if((PIN_SWITCH&(1<<SW_TEST)) == (1<<SW_TEST) )return false;
     6b2:	83 b3       	in	r24, 0x13	; 19
     6b4:	86 fb       	bst	r24, 6
     6b6:	88 27       	eor	r24, r24
     6b8:	80 f9       	bld	r24, 0
	return true;
}
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	89 27       	eor	r24, r25
     6be:	08 95       	ret

000006c0 <uiReadADC>:
uint16_t EEMEM  uiMyEppDataArr[8];
uint16_t uiAdAverage[8],uiAdMin[8],uiAdMax[8];

PUBLIC uint16_t uiReadADC(unsigned char chanenel)
{
	ADMUX = chanenel|ADC_VREF_TYPE;
     6c0:	80 64       	ori	r24, 0x40	; 64
     6c2:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
     6c4:	36 9a       	sbi	0x06, 6	; 6
	loop_until_bit_is_set(ADCSRA,ADIF);
     6c6:	34 9b       	sbis	0x06, 4	; 6
     6c8:	fe cf       	rjmp	.-4      	; 0x6c6 <uiReadADC+0x6>
	return ADCW;
     6ca:	84 b1       	in	r24, 0x04	; 4
     6cc:	95 b1       	in	r25, 0x05	; 5
}
     6ce:	08 95       	ret

000006d0 <vLearnColor>:
PUBLIC void vLearnColor()
{
     6d0:	6f 92       	push	r6
     6d2:	7f 92       	push	r7
     6d4:	8f 92       	push	r8
     6d6:	9f 92       	push	r9
     6d8:	af 92       	push	r10
     6da:	bf 92       	push	r11
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	0f 2e       	mov	r0, r31
     6ee:	f4 ee       	ldi	r31, 0xE4	; 228
     6f0:	cf 2e       	mov	r12, r31
     6f2:	f1 e0       	ldi	r31, 0x01	; 1
     6f4:	df 2e       	mov	r13, r31
     6f6:	f0 2d       	mov	r31, r0
     6f8:	0f 2e       	mov	r0, r31
     6fa:	f4 e0       	ldi	r31, 0x04	; 4
     6fc:	ef 2e       	mov	r14, r31
     6fe:	f2 e0       	ldi	r31, 0x02	; 2
     700:	ff 2e       	mov	r15, r31
     702:	f0 2d       	mov	r31, r0
	while(1)
	{  
		vOutLed7(99);
		//ADC0	ADC1	ADC2				ADC6	ADC7
		// xx	 xx		 xx	 x-x	xx	xx	 xx      --
		for(uint8_t i = 0; i < 7; i++)
     704:	61 2c       	mov	r6, r1
PUBLIC void vLearnColor()
{
	uint16_t temp = 0;
	while(1)
	{  
		vOutLed7(99);
     706:	83 e6       	ldi	r24, 0x63	; 99
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0e 94 cc 01 	call	0x398	; 0x398 <vOutLed7>
     70e:	9c 2c       	mov	r9, r12
     710:	ad 2c       	mov	r10, r13
     712:	be 2c       	mov	r11, r14
     714:	7f 2c       	mov	r7, r15
     716:	87 01       	movw	r16, r14
     718:	e6 01       	movw	r28, r12
		//ADC0	ADC1	ADC2				ADC6	ADC7
		// xx	 xx		 xx	 x-x	xx	xx	 xx      --
		for(uint8_t i = 0; i < 7; i++)
     71a:	86 2c       	mov	r8, r6
		{
			temp = uiReadADC(i);
     71c:	88 2d       	mov	r24, r8
     71e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <uiReadADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     722:	28 ec       	ldi	r18, 0xC8	; 200
     724:	2a 95       	dec	r18
     726:	f1 f7       	brne	.-4      	; 0x724 <vLearnColor+0x54>
			_delay_us(50);
			if(uiAdMax[i] == 0) uiAdMax[i] = temp;
     728:	28 81       	ld	r18, Y
     72a:	39 81       	ldd	r19, Y+1	; 0x01
     72c:	21 15       	cp	r18, r1
     72e:	31 05       	cpc	r19, r1
     730:	19 f4       	brne	.+6      	; 0x738 <vLearnColor+0x68>
     732:	99 83       	std	Y+1, r25	; 0x01
     734:	88 83       	st	Y, r24
     736:	05 c0       	rjmp	.+10     	; 0x742 <vLearnColor+0x72>
			else if(temp > uiAdMax[i]) uiAdMax[i] = temp;
     738:	28 17       	cp	r18, r24
     73a:	39 07       	cpc	r19, r25
     73c:	10 f4       	brcc	.+4      	; 0x742 <vLearnColor+0x72>
     73e:	99 83       	std	Y+1, r25	; 0x01
     740:	88 83       	st	Y, r24
     742:	f8 01       	movw	r30, r16
			if(uiAdMin[i] == 0) uiAdMin[i] = temp;
     744:	20 81       	ld	r18, Z
     746:	31 81       	ldd	r19, Z+1	; 0x01
     748:	21 15       	cp	r18, r1
     74a:	31 05       	cpc	r19, r1
     74c:	19 f4       	brne	.+6      	; 0x754 <vLearnColor+0x84>
     74e:	91 83       	std	Z+1, r25	; 0x01
     750:	80 83       	st	Z, r24
     752:	05 c0       	rjmp	.+10     	; 0x75e <vLearnColor+0x8e>
			else if(temp < uiAdMin[i]){
     754:	82 17       	cp	r24, r18
     756:	93 07       	cpc	r25, r19
     758:	10 f4       	brcc	.+4      	; 0x75e <vLearnColor+0x8e>
				uiAdMin[i] = temp;
     75a:	91 83       	std	Z+1, r25	; 0x01
     75c:	80 83       	st	Z, r24
	while(1)
	{  
		vOutLed7(99);
		//ADC0	ADC1	ADC2				ADC6	ADC7
		// xx	 xx		 xx	 x-x	xx	xx	 xx      --
		for(uint8_t i = 0; i < 7; i++)
     75e:	83 94       	inc	r8
     760:	22 96       	adiw	r28, 0x02	; 2
     762:	0e 5f       	subi	r16, 0xFE	; 254
     764:	1f 4f       	sbci	r17, 0xFF	; 255
     766:	87 e0       	ldi	r24, 0x07	; 7
     768:	88 12       	cpse	r8, r24
     76a:	d8 cf       	rjmp	.-80     	; 0x71c <vLearnColor+0x4c>
			if(uiAdMin[i] == 0) uiAdMin[i] = temp;
			else if(temp < uiAdMin[i]){
				uiAdMin[i] = temp;
			}
		}
		if(bKeyIsPress(KEY3)) break;//Exit
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	0e 94 ae 02 	call	0x55c	; 0x55c <bKeyIsPress>
     772:	88 23       	and	r24, r24
     774:	41 f2       	breq	.-112    	; 0x706 <vLearnColor+0x36>
	}//end while(1)
	vOutLed7(66);
     776:	82 e4       	ldi	r24, 0x42	; 66
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 cc 01 	call	0x398	; 0x398 <vOutLed7>
	vBeep(100);	_delay_ms(100);	vBeep(100);
     77e:	84 e6       	ldi	r24, 0x64	; 100
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 10 02 	call	0x420	; 0x420 <vBeep>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     786:	9f e7       	ldi	r25, 0x7F	; 127
     788:	a9 ea       	ldi	r26, 0xA9	; 169
     78a:	b3 e0       	ldi	r27, 0x03	; 3
     78c:	91 50       	subi	r25, 0x01	; 1
     78e:	a0 40       	sbci	r26, 0x00	; 0
     790:	b0 40       	sbci	r27, 0x00	; 0
     792:	e1 f7       	brne	.-8      	; 0x78c <vLearnColor+0xbc>
     794:	00 c0       	rjmp	.+0      	; 0x796 <vLearnColor+0xc6>
     796:	00 00       	nop
     798:	84 e6       	ldi	r24, 0x64	; 100
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 10 02 	call	0x420	; 0x420 <vBeep>
	uiAdAverage[7] = 100;//Note, start bar is bit 0. if adc[7] < adc_average[7] it mean start bar is open
     7a0:	84 e6       	ldi	r24, 0x64	; 100
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	90 93 03 02 	sts	0x0203, r25
     7a8:	80 93 02 02 	sts	0x0202, r24
	write_eeprom_word(&uiMyEppDataArr[7] , uiAdAverage[7]);
     7ac:	64 e6       	ldi	r22, 0x64	; 100
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	8e e0       	ldi	r24, 0x0E	; 14
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__eewr_word_m16a>
     7b8:	04 ef       	ldi	r16, 0xF4	; 244
     7ba:	11 e0       	ldi	r17, 0x01	; 1
     7bc:	0f 2e       	mov	r0, r31
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	cf 2e       	mov	r12, r31
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	df 2e       	mov	r13, r31
     7c6:	f0 2d       	mov	r31, r0
     7c8:	0f 2e       	mov	r0, r31
     7ca:	f2 e1       	ldi	r31, 0x12	; 18
     7cc:	ef 2e       	mov	r14, r31
     7ce:	f2 e0       	ldi	r31, 0x02	; 2
     7d0:	ff 2e       	mov	r15, r31
     7d2:	f0 2d       	mov	r31, r0
     7d4:	c9 2d       	mov	r28, r9
     7d6:	da 2d       	mov	r29, r10
     7d8:	8b 2c       	mov	r8, r11
     7da:	97 2c       	mov	r9, r7
	for (uint8_t i = 0; i < 7; i++)
	{
		uiAdAverage[i] = (uiAdMin[i] + uiAdMax[i])/2;
     7dc:	f4 01       	movw	r30, r8
     7de:	81 91       	ld	r24, Z+
     7e0:	91 91       	ld	r25, Z+
     7e2:	4f 01       	movw	r8, r30
     7e4:	69 91       	ld	r22, Y+
     7e6:	79 91       	ld	r23, Y+
     7e8:	68 0f       	add	r22, r24
     7ea:	79 1f       	adc	r23, r25
     7ec:	76 95       	lsr	r23
     7ee:	67 95       	ror	r22
     7f0:	d8 01       	movw	r26, r16
     7f2:	6d 93       	st	X+, r22
     7f4:	7d 93       	st	X+, r23
     7f6:	8d 01       	movw	r16, r26
		//adc_average[i] = adc_average[i]*19/20;
		//adc_average[i] = adc_average[i]*((float)1.25);
		write_eeprom_word(&uiMyEppDataArr[i] , uiAdAverage[i]);
     7f8:	c6 01       	movw	r24, r12
     7fa:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__eewr_word_m16a>
     7fe:	b2 e0       	ldi	r27, 0x02	; 2
     800:	cb 0e       	add	r12, r27
     802:	d1 1c       	adc	r13, r1
	}//end while(1)
	vOutLed7(66);
	vBeep(100);	_delay_ms(100);	vBeep(100);
	uiAdAverage[7] = 100;//Note, start bar is bit 0. if adc[7] < adc_average[7] it mean start bar is open
	write_eeprom_word(&uiMyEppDataArr[7] , uiAdAverage[7]);
	for (uint8_t i = 0; i < 7; i++)
     804:	8e 14       	cp	r8, r14
     806:	9f 04       	cpc	r9, r15
     808:	49 f7       	brne	.-46     	; 0x7dc <vLearnColor+0x10c>
		uiAdAverage[i] = (uiAdMin[i] + uiAdMax[i])/2;
		//adc_average[i] = adc_average[i]*19/20;
		//adc_average[i] = adc_average[i]*((float)1.25);
		write_eeprom_word(&uiMyEppDataArr[i] , uiAdAverage[i]);
	}
}
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	df 90       	pop	r13
     818:	cf 90       	pop	r12
     81a:	bf 90       	pop	r11
     81c:	af 90       	pop	r10
     81e:	9f 90       	pop	r9
     820:	8f 90       	pop	r8
     822:	7f 90       	pop	r7
     824:	6f 90       	pop	r6
     826:	08 95       	ret

00000828 <ucGetRawSensor>:
PUBLIC uint8_t ucGetRawSensor()
{
     828:	cf 92       	push	r12
     82a:	df 92       	push	r13
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	04 ef       	ldi	r16, 0xF4	; 244
     83a:	11 e0       	ldi	r17, 0x01	; 1
     83c:	c6 e0       	ldi	r28, 0x06	; 6
     83e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t result = 0;
     840:	d1 2c       	mov	r13, r1
     842:	0f 2e       	mov	r0, r31
     844:	f6 e0       	ldi	r31, 0x06	; 6
     846:	cf 2e       	mov	r12, r31
     848:	f0 2d       	mov	r31, r0
		//swap bit here
		if(temp <= uiAdAverage[i]){
			sbi(result,6-i);
		}
		else{
			cbi(result,6-i);	
     84a:	ee 24       	eor	r14, r14
     84c:	e3 94       	inc	r14
     84e:	f1 2c       	mov	r15, r1
	uint16_t temp = 0;
	//ADC0	ADC1	ADC2				ADC6	ADC7
	// xx	 xx		 xx	 x-x	xx	xx	 xx      --
	for(int i = 0; i < 7;i++)
	{
		temp = uiReadADC(i);
     850:	8c 2d       	mov	r24, r12
     852:	8c 1b       	sub	r24, r28
     854:	0e 94 60 03 	call	0x6c0	; 0x6c0 <uiReadADC>
		//swap bit here
		if(temp <= uiAdAverage[i]){
     858:	f8 01       	movw	r30, r16
     85a:	21 91       	ld	r18, Z+
     85c:	31 91       	ld	r19, Z+
     85e:	8f 01       	movw	r16, r30
     860:	28 17       	cp	r18, r24
     862:	39 07       	cpc	r19, r25
     864:	48 f0       	brcs	.+18     	; 0x878 <ucGetRawSensor+0x50>
			sbi(result,6-i);
     866:	97 01       	movw	r18, r14
     868:	0c 2e       	mov	r0, r28
     86a:	02 c0       	rjmp	.+4      	; 0x870 <ucGetRawSensor+0x48>
     86c:	22 0f       	add	r18, r18
     86e:	33 1f       	adc	r19, r19
     870:	0a 94       	dec	r0
     872:	e2 f7       	brpl	.-8      	; 0x86c <ucGetRawSensor+0x44>
     874:	d2 2a       	or	r13, r18
     876:	09 c0       	rjmp	.+18     	; 0x88a <ucGetRawSensor+0x62>
		}
		else{
			cbi(result,6-i);	
     878:	97 01       	movw	r18, r14
     87a:	0c 2e       	mov	r0, r28
     87c:	02 c0       	rjmp	.+4      	; 0x882 <ucGetRawSensor+0x5a>
     87e:	22 0f       	add	r18, r18
     880:	33 1f       	adc	r19, r19
     882:	0a 94       	dec	r0
     884:	e2 f7       	brpl	.-8      	; 0x87e <ucGetRawSensor+0x56>
     886:	20 95       	com	r18
     888:	d2 22       	and	r13, r18
     88a:	21 97       	sbiw	r28, 0x01	; 1
     88c:	08 f7       	brcc	.-62     	; 0x850 <ucGetRawSensor+0x28>
		}		
	}
	cbi(result,7);
	//data_led = result;
	return result;
}
     88e:	8d 2d       	mov	r24, r13
     890:	8f 77       	andi	r24, 0x7F	; 127
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	df 90       	pop	r13
     8a0:	cf 90       	pop	r12
     8a2:	08 95       	ret

000008a4 <ucGetSensorData>:
PUBLIC uint8_t ucGetSensorData(uint8_t mask){
     8a4:	cf 93       	push	r28
     8a6:	c8 2f       	mov	r28, r24

	return (ucGetRawSensor() & mask);
     8a8:	0e 94 14 04 	call	0x828	; 0x828 <ucGetRawSensor>
}
     8ac:	8c 23       	and	r24, r28
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <bStartBarIsStart>:
int iGetSensorPosition(){
	return 0;
}
bool bStartBarIsStart(){
	uint16_t ucDataADC = uiReadADC(7);
     8b2:	87 e0       	ldi	r24, 0x07	; 7
     8b4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <uiReadADC>
	if(ucDataADC < 100) return true;//adc_average[7]
     8b8:	21 e0       	ldi	r18, 0x01	; 1
     8ba:	84 36       	cpi	r24, 0x64	; 100
     8bc:	91 05       	cpc	r25, r1
     8be:	08 f0       	brcs	.+2      	; 0x8c2 <bStartBarIsStart+0x10>
     8c0:	20 e0       	ldi	r18, 0x00	; 0
	return false;
}
     8c2:	82 2f       	mov	r24, r18
     8c4:	08 95       	ret

000008c6 <vLoadE2P>:
void vLoadE2P(){
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	c0 e0       	ldi	r28, 0x00	; 0
     8d4:	d0 e0       	ldi	r29, 0x00	; 0
     8d6:	04 ef       	ldi	r16, 0xF4	; 244
     8d8:	11 e0       	ldi	r17, 0x01	; 1
     8da:	0f 2e       	mov	r0, r31
     8dc:	f0 e1       	ldi	r31, 0x10	; 16
     8de:	ef 2e       	mov	r14, r31
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	ff 2e       	mov	r15, r31
     8e4:	f0 2d       	mov	r31, r0
	for(int i = 0;i < 8;i++){
		uiAdAverage[i] = read_eeprom_word(&uiMyEppDataArr[i]);
     8e6:	ce 01       	movw	r24, r28
     8e8:	0e 94 4e 0a 	call	0x149c	; 0x149c <__eerd_word_m16a>
     8ec:	f8 01       	movw	r30, r16
     8ee:	81 93       	st	Z+, r24
     8f0:	91 93       	st	Z+, r25
     8f2:	8f 01       	movw	r16, r30
     8f4:	22 96       	adiw	r28, 0x02	; 2
	uint16_t ucDataADC = uiReadADC(7);
	if(ucDataADC < 100) return true;//adc_average[7]
	return false;
}
void vLoadE2P(){
	for(int i = 0;i < 8;i++){
     8f6:	ce 15       	cp	r28, r14
     8f8:	df 05       	cpc	r29, r15
     8fa:	a9 f7       	brne	.-22     	; 0x8e6 <vLoadE2P+0x20>
		uiAdAverage[i] = read_eeprom_word(&uiMyEppDataArr[i]);
	}
}
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	ff 90       	pop	r15
     906:	ef 90       	pop	r14
     908:	08 95       	ret

0000090a <vPeriodicDec>:
	@brief:		Decrease periodic counter
	@param:		none
	@return:	none 
*/
PRIVATE void vPeriodicDec(){	
	if((uigLedPeriodic == 0) || (uigLedPeriodic == NO_LIMIT)){
     90a:	80 91 68 00 	lds	r24, 0x0068
     90e:	90 91 69 00 	lds	r25, 0x0069
     912:	89 2b       	or	r24, r25
     914:	31 f0       	breq	.+12     	; 0x922 <vPeriodicDec+0x18>
     916:	80 91 68 00 	lds	r24, 0x0068
     91a:	90 91 69 00 	lds	r25, 0x0069
     91e:	01 96       	adiw	r24, 0x01	; 1
     920:	39 f4       	brne	.+14     	; 0x930 <vPeriodicDec+0x26>
		uigLedPeriodic = NO_LIMIT;
     922:	8f ef       	ldi	r24, 0xFF	; 255
     924:	9f ef       	ldi	r25, 0xFF	; 255
     926:	90 93 69 00 	sts	0x0069, r25
     92a:	80 93 68 00 	sts	0x0068, r24
     92e:	08 95       	ret
	}else
	uigLedPeriodic--;	
     930:	80 91 68 00 	lds	r24, 0x0068
     934:	90 91 69 00 	lds	r25, 0x0069
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	90 93 69 00 	sts	0x0069, r25
     93e:	80 93 68 00 	sts	0x0068, r24
     942:	08 95       	ret

00000944 <vIntervalDec>:
	@param:		none
	@return:	none 
*/
PRIVATE void vIntervalDec(){
	
	if((uigLedInterval == 0) || (uigLedInterval == NO_LIMIT)){
     944:	80 91 66 00 	lds	r24, 0x0066
     948:	90 91 67 00 	lds	r25, 0x0067
     94c:	89 2b       	or	r24, r25
     94e:	31 f0       	breq	.+12     	; 0x95c <vIntervalDec+0x18>
     950:	80 91 66 00 	lds	r24, 0x0066
     954:	90 91 67 00 	lds	r25, 0x0067
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	39 f4       	brne	.+14     	; 0x96a <vIntervalDec+0x26>
		uigLedInterval = NO_LIMIT;
     95c:	8f ef       	ldi	r24, 0xFF	; 255
     95e:	9f ef       	ldi	r25, 0xFF	; 255
     960:	90 93 67 00 	sts	0x0067, r25
     964:	80 93 66 00 	sts	0x0066, r24
     968:	08 95       	ret
	}
	else
	uigLedInterval--;	
     96a:	80 91 66 00 	lds	r24, 0x0066
     96e:	90 91 67 00 	lds	r25, 0x0067
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	90 93 67 00 	sts	0x0067, r25
     978:	80 93 66 00 	sts	0x0066, r24
     97c:	08 95       	ret

0000097e <ucPareLedEvent>:
	@param:		led event
	@return:	Led Periodic counter
*/
PRIVATE uint16_t ucPareLedEvent(uint8_t led_event){
	uint16_t uiRet = NO_LIMIT;
	switch(led_event){
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	91 f0       	breq	.+36     	; 0x9a6 <ucPareLedEvent+0x28>
     982:	18 f4       	brcc	.+6      	; 0x98a <ucPareLedEvent+0xc>
     984:	81 30       	cpi	r24, 0x01	; 1
     986:	31 f0       	breq	.+12     	; 0x994 <ucPareLedEvent+0x16>
     988:	29 c0       	rjmp	.+82     	; 0x9dc <ucPareLedEvent+0x5e>
     98a:	83 30       	cpi	r24, 0x03	; 3
     98c:	f1 f0       	breq	.+60     	; 0x9ca <ucPareLedEvent+0x4c>
     98e:	84 30       	cpi	r24, 0x04	; 4
     990:	99 f0       	breq	.+38     	; 0x9b8 <ucPareLedEvent+0x3a>
     992:	24 c0       	rjmp	.+72     	; 0x9dc <ucPareLedEvent+0x5e>
		case LED_FAST_BLINK:			
			uigLedInterval = LED_50_MS;			
     994:	85 e0       	ldi	r24, 0x05	; 5
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	90 93 67 00 	sts	0x0067, r25
     99c:	80 93 66 00 	sts	0x0066, r24
	@brief:		parse control for led
	@param:		led event
	@return:	Led Periodic counter
*/
PRIVATE uint16_t ucPareLedEvent(uint8_t led_event){
	uint16_t uiRet = NO_LIMIT;
     9a0:	8f ef       	ldi	r24, 0xFF	; 255
     9a2:	9f ef       	ldi	r25, 0xFF	; 255
	switch(led_event){
		case LED_FAST_BLINK:			
			uigLedInterval = LED_50_MS;			
			break;
     9a4:	08 95       	ret
		case LED_SLOW_BLINK:			
			uigLedInterval = LED_100_MS;			
     9a6:	8a e0       	ldi	r24, 0x0A	; 10
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	90 93 67 00 	sts	0x0067, r25
     9ae:	80 93 66 00 	sts	0x0066, r24
	@brief:		parse control for led
	@param:		led event
	@return:	Led Periodic counter
*/
PRIVATE uint16_t ucPareLedEvent(uint8_t led_event){
	uint16_t uiRet = NO_LIMIT;
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	9f ef       	ldi	r25, 0xFF	; 255
		case LED_FAST_BLINK:			
			uigLedInterval = LED_50_MS;			
			break;
		case LED_SLOW_BLINK:			
			uigLedInterval = LED_100_MS;			
			break;
     9b6:	08 95       	ret
		case LED_STARTUP_COMPELETE:			
			uigLedInterval = LED_50_MS;	
     9b8:	85 e0       	ldi	r24, 0x05	; 5
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	90 93 67 00 	sts	0x0067, r25
     9c0:	80 93 66 00 	sts	0x0066, r24
			uiRet = LED_1_S;	
     9c4:	84 e6       	ldi	r24, 0x64	; 100
     9c6:	90 e0       	ldi	r25, 0x00	; 0
			break;	
     9c8:	08 95       	ret
		case LED_START_BAR_OK:
			uigLedInterval = LED_50_MS;
     9ca:	85 e0       	ldi	r24, 0x05	; 5
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	90 93 67 00 	sts	0x0067, r25
     9d2:	80 93 66 00 	sts	0x0066, r24
			uiRet = LED_500_MS;
     9d6:	82 e3       	ldi	r24, 0x32	; 50
     9d8:	90 e0       	ldi	r25, 0x00	; 0
			break;	
     9da:	08 95       	ret
	@brief:		parse control for led
	@param:		led event
	@return:	Led Periodic counter
*/
PRIVATE uint16_t ucPareLedEvent(uint8_t led_event){
	uint16_t uiRet = NO_LIMIT;
     9dc:	8f ef       	ldi	r24, 0xFF	; 255
     9de:	9f ef       	ldi	r25, 0xFF	; 255
			break;	
		default:			
			break;
	}
	return uiRet;
}
     9e0:	08 95       	ret

000009e2 <vLedFlash>:
/*
	@brief:		This function will control led, must called on ISR function
	@param:		none
	@return:	none 
*/
PUBLIC void vLedFlash(){
     9e2:	cf 93       	push	r28
	uint8_t ucStateTemp = ucgLedState;	
     9e4:	c0 91 8f 00 	lds	r28, 0x008F
	
	switch(ucStateTemp){
     9e8:	cc 23       	and	r28, r28
     9ea:	61 f1       	breq	.+88     	; 0xa44 <vLedFlash+0x62>
     9ec:	c1 30       	cpi	r28, 0x01	; 1
     9ee:	41 f5       	brne	.+80     	; 0xa40 <vLedFlash+0x5e>
		case LED_STATE_NONE:	//State NONE do nothing.
			return;
		case LED_STATE_BLINK:		
			vPeriodicDec();
     9f0:	0e 94 85 04 	call	0x90a	; 0x90a <vPeriodicDec>
			if(uigLedPeriodic == 0){
     9f4:	80 91 68 00 	lds	r24, 0x0068
     9f8:	90 91 69 00 	lds	r25, 0x0069
     9fc:	89 2b       	or	r24, r25
     9fe:	29 f4       	brne	.+10     	; 0xa0a <vLedFlash+0x28>
				LED_BUG_OFF; //turn off led
     a00:	c7 9a       	sbi	0x18, 7	; 24
				bgLedFlag = LED_FLAG_OFF;//set flag is off
     a02:	10 92 8e 00 	sts	0x008E, r1
				ucStateTemp = LED_STATE_NONE;
     a06:	c0 e0       	ldi	r28, 0x00	; 0
     a08:	1b c0       	rjmp	.+54     	; 0xa40 <vLedFlash+0x5e>
			}
			else{
				vIntervalDec();
     a0a:	0e 94 a2 04 	call	0x944	; 0x944 <vIntervalDec>
				if(uigLedInterval == 0){
     a0e:	80 91 66 00 	lds	r24, 0x0066
     a12:	90 91 67 00 	lds	r25, 0x0067
     a16:	89 2b       	or	r24, r25
     a18:	99 f4       	brne	.+38     	; 0xa40 <vLedFlash+0x5e>
					switch (bgLedFlag)
     a1a:	80 91 8e 00 	lds	r24, 0x008E
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	31 f0       	breq	.+12     	; 0xa30 <vLedFlash+0x4e>
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	41 f4       	brne	.+16     	; 0xa38 <vLedFlash+0x56>
					{
						case LED_FLAG_ON:
							bgLedFlag = LED_FLAG_OFF;
     a28:	10 92 8e 00 	sts	0x008E, r1
							LED_BUG_OFF;
     a2c:	c7 9a       	sbi	0x18, 7	; 24
							break;
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <vLedFlash+0x56>
						case LED_FLAG_OFF:
							bgLedFlag = LED_FLAG_ON;
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	80 93 8e 00 	sts	0x008E, r24
							LED_BUG_ON;
     a36:	c7 98       	cbi	0x18, 7	; 24
							break;
						default:							
							break;
					}					
					ucPareLedEvent(ucLedEvent);					
     a38:	80 91 8d 00 	lds	r24, 0x008D
     a3c:	0e 94 bf 04 	call	0x97e	; 0x97e <ucPareLedEvent>
			}
			break;
		default:			
			break;		
	}		
	ucgLedState = ucStateTemp;		
     a40:	c0 93 8f 00 	sts	0x008F, r28
}
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <vLedCtrl>:
/*
	@brief:		Call this function to control led
	@param:		event of led
	@return:	none 
*/
PUBLIC void vLedCtrl(uint8_t E_EVENT){
     a48:	cf 93       	push	r28
     a4a:	c8 2f       	mov	r28, r24
	
	uigLedPeriodic = ucPareLedEvent(E_EVENT);
     a4c:	0e 94 bf 04 	call	0x97e	; 0x97e <ucPareLedEvent>
     a50:	90 93 69 00 	sts	0x0069, r25
     a54:	80 93 68 00 	sts	0x0068, r24
	ucgLedState = LED_STATE_BLINK;	
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	80 93 8f 00 	sts	0x008F, r24
	ucLedEvent = E_EVENT;
     a5e:	c0 93 8d 00 	sts	0x008D, r28
	
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <__vector_11>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     a66:	1f 92       	push	r1
     a68:	0f 92       	push	r0
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	0f 92       	push	r0
     a6e:	11 24       	eor	r1, r1
     a70:	2f 93       	push	r18
     a72:	8f 93       	push	r24
     a74:	9f 93       	push	r25
     a76:	ef 93       	push	r30
     a78:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     a7a:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
     a7c:	2c b1       	in	r18, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
     a7e:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     a80:	e0 91 92 00 	lds	r30, 0x0092
     a84:	ef 5f       	subi	r30, 0xFF	; 255
     a86:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART_RxTail ) {
     a88:	90 91 91 00 	lds	r25, 0x0091
     a8c:	e9 17       	cp	r30, r25
     a8e:	39 f0       	breq	.+14     	; 0xa9e <__vector_11+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     a90:	e0 93 92 00 	sts	0x0092, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	eb 56       	subi	r30, 0x6B	; 107
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	20 83       	st	Z, r18
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <__vector_11+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     a9e:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
     aa0:	90 91 90 00 	lds	r25, 0x0090
     aa4:	89 2b       	or	r24, r25
     aa6:	80 93 90 00 	sts	0x0090, r24
}
     aaa:	ff 91       	pop	r31
     aac:	ef 91       	pop	r30
     aae:	9f 91       	pop	r25
     ab0:	8f 91       	pop	r24
     ab2:	2f 91       	pop	r18
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <__vector_12>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     abe:	1f 92       	push	r1
     ac0:	0f 92       	push	r0
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
     ac8:	8f 93       	push	r24
     aca:	9f 93       	push	r25
     acc:	ef 93       	push	r30
     ace:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     ad0:	90 91 94 00 	lds	r25, 0x0094
     ad4:	80 91 93 00 	lds	r24, 0x0093
     ad8:	98 17       	cp	r25, r24
     ada:	59 f0       	breq	.+22     	; 0xaf2 <__vector_12+0x34>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     adc:	e0 91 93 00 	lds	r30, 0x0093
     ae0:	ef 5f       	subi	r30, 0xFF	; 255
        UART_TxTail = tmptail;
     ae2:	e0 93 93 00 	sts	0x0093, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	eb 52       	subi	r30, 0x2B	; 43
     aea:	ff 4f       	sbci	r31, 0xFF	; 255
     aec:	80 81       	ld	r24, Z
     aee:	8c b9       	out	0x0c, r24	; 12
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <__vector_12+0x36>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     af2:	55 98       	cbi	0x0a, 5	; 10
    }
}
     af4:	ff 91       	pop	r31
     af6:	ef 91       	pop	r30
     af8:	9f 91       	pop	r25
     afa:	8f 91       	pop	r24
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
     b06:	10 92 94 00 	sts	0x0094, r1
    UART_TxTail = 0;
     b0a:	10 92 93 00 	sts	0x0093, r1
    UART_RxHead = 0;
     b0e:	10 92 92 00 	sts	0x0092, r1
    UART_RxTail = 0;
     b12:	10 92 91 00 	sts	0x0091, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
     b16:	99 23       	and	r25, r25
     b18:	1c f4       	brge	.+6      	; 0xb20 <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
     b1a:	22 e0       	ldi	r18, 0x02	; 2
     b1c:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
     b1e:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
     b20:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
     b22:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
     b24:	88 e9       	ldi	r24, 0x98	; 152
     b26:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
     b28:	86 e8       	ldi	r24, 0x86	; 134
     b2a:	80 bd       	out	0x20, r24	; 32
     b2c:	08 95       	ret

00000b2e <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
     b2e:	90 91 92 00 	lds	r25, 0x0092
     b32:	80 91 91 00 	lds	r24, 0x0091
     b36:	98 17       	cp	r25, r24
     b38:	81 f0       	breq	.+32     	; 0xb5a <uart_getc+0x2c>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     b3a:	e0 91 91 00 	lds	r30, 0x0091
     b3e:	ef 5f       	subi	r30, 0xFF	; 255
     b40:	ef 73       	andi	r30, 0x3F	; 63
    UART_RxTail = tmptail; 
     b42:	e0 93 91 00 	sts	0x0091, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	eb 56       	subi	r30, 0x6B	; 107
     b4a:	ff 4f       	sbci	r31, 0xFF	; 255
     b4c:	80 81       	ld	r24, Z
    
    data = (UART_LastRxError << 8) + data;
     b4e:	90 91 90 00 	lds	r25, 0x0090
    UART_LastRxError = 0;
     b52:	10 92 90 00 	sts	0x0090, r1
    return data;
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	91 e0       	ldi	r25, 0x01	; 1
    
    data = (UART_LastRxError << 8) + data;
    UART_LastRxError = 0;
    return data;

}/* uart_getc */
     b5e:	08 95       	ret

00000b60 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     b60:	20 91 94 00 	lds	r18, 0x0094
     b64:	2f 5f       	subi	r18, 0xFF	; 255
    
    while ( tmphead == UART_TxTail ){
     b66:	90 91 93 00 	lds	r25, 0x0093
     b6a:	29 17       	cp	r18, r25
     b6c:	e1 f3       	breq	.-8      	; 0xb66 <uart_putc+0x6>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     b6e:	e2 2f       	mov	r30, r18
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	eb 52       	subi	r30, 0x2B	; 43
     b74:	ff 4f       	sbci	r31, 0xFF	; 255
     b76:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     b78:	20 93 94 00 	sts	0x0094, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     b7c:	55 9a       	sbi	0x0a, 5	; 10
     b7e:	08 95       	ret

00000b80 <vAssassin>:
void vRuning();

// [Vo Huu Tai 20/8/2015 ]  END ADD car Run
void vAssassin(){
	// [Vo Huu Tai 10/8/2015 ]  over 1ms
	uiTimer0Cnt++;
     b80:	80 91 d7 01 	lds	r24, 0x01D7
     b84:	90 91 d8 01 	lds	r25, 0x01D8
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	90 93 d8 01 	sts	0x01D8, r25
     b8e:	80 93 d7 01 	sts	0x01D7, r24
	switch(uiTimer0Cnt){//I wish it is called very 10ms		
     b92:	80 91 d7 01 	lds	r24, 0x01D7
     b96:	90 91 d8 01 	lds	r25, 0x01D8
     b9a:	0a 97       	sbiw	r24, 0x0a	; 10
     b9c:	41 f4       	brne	.+16     	; 0xbae <vAssassin+0x2e>
		case 10:
			iGetInlined();
     b9e:	0e 94 4a 02 	call	0x494	; 0x494 <iGetInlined>
			vLedFlash();
     ba2:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <vLedFlash>
			uiTimer0Cnt = 0;
     ba6:	10 92 d8 01 	sts	0x01D8, r1
     baa:	10 92 d7 01 	sts	0x01D7, r1
     bae:	08 95       	ret

00000bb0 <vRuning>:
	55		//5
};
void vRuning(){
	//uint16_t fl = 0;
	// - 45 0 45
	vOutLed7(9999);
     bb0:	8f e0       	ldi	r24, 0x0F	; 15
     bb2:	97 e2       	ldi	r25, 0x27	; 39
     bb4:	0e 94 cc 01 	call	0x398	; 0x398 <vOutLed7>
	pattern = 10;
     bb8:	8a e0       	ldi	r24, 0x0A	; 10
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	90 93 d6 01 	sts	0x01D6, r25
     bc0:	80 93 d5 01 	sts	0x01D5, r24
					case 0x03://0 000 0 011
						vServo(-angle[4] - 9);
						vMotor(0,30);
						break;
					case 0x02://0 000 0 010
						vServo(-angle[3] - 8);
     bc4:	0f 2e       	mov	r0, r31
     bc6:	f0 e7       	ldi	r31, 0x70	; 112
     bc8:	2f 2e       	mov	r2, r31
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	3f 2e       	mov	r3, r31
     bce:	f0 2d       	mov	r31, r0
     bd0:	0f 2e       	mov	r0, r31
     bd2:	f8 ef       	ldi	r31, 0xF8	; 248
     bd4:	af 2e       	mov	r10, r31
     bd6:	bb 24       	eor	r11, r11
     bd8:	ba 94       	dec	r11
     bda:	f0 2d       	mov	r31, r0
						vServo(-angle[1] - 6);
						vMotor(25,30);
						pattern = 10;		//return normal run
						break;
					default:
						pattern = 12;
     bdc:	0f 2e       	mov	r0, r31
     bde:	fc e0       	ldi	r31, 0x0C	; 12
     be0:	ef 2e       	mov	r14, r31
     be2:	f1 2c       	mov	r15, r1
     be4:	f0 2d       	mov	r31, r0
					case 0x01://0 000 0 001
						vServo(-angle[5] - 10);
						vMotor(-10,30);
						break;
					case 0x03://0 000 0 011
						vServo(-angle[4] - 9);
     be6:	0f 2e       	mov	r0, r31
     be8:	f7 ef       	ldi	r31, 0xF7	; 247
     bea:	8f 2e       	mov	r8, r31
     bec:	99 24       	eor	r9, r9
     bee:	9a 94       	dec	r9
     bf0:	f0 2d       	mov	r31, r0
					case 0x00://0 000 0 000
						vServo(-angle[2] - 7);
						vMotor(20,25);
						break;
					case 0x10://0 001 0 000
						vServo(-angle[1] - 6);
     bf2:	0f 2e       	mov	r0, r31
     bf4:	fa ef       	ldi	r31, 0xFA	; 250
     bf6:	6f 2e       	mov	r6, r31
     bf8:	77 24       	eor	r7, r7
     bfa:	7a 94       	dec	r7
     bfc:	f0 2d       	mov	r31, r0
					case 0x02://0 000 0 010
						vServo(-angle[3] - 8);
						vMotor(10,27);
						break;
					case 0x00://0 000 0 000
						vServo(-angle[2] - 7);
     bfe:	0f 2e       	mov	r0, r31
     c00:	f9 ef       	ldi	r31, 0xF9	; 249
     c02:	4f 2e       	mov	r4, r31
     c04:	55 24       	eor	r5, r5
     c06:	5a 94       	dec	r5
     c08:	f0 2d       	mov	r31, r0
				}//end switch 0x64
				break; //end case 11
			case 12://cong trai
				switch(ucGetSensorData(0x13)){// 0 00x 0 0xx
					case 0x01://0 000 0 001
						vServo(-angle[5] - 10);
     c0a:	0f 2e       	mov	r0, r31
     c0c:	f6 ef       	ldi	r31, 0xF6	; 246
     c0e:	cf 2e       	mov	r12, r31
     c10:	dd 24       	eor	r13, r13
     c12:	da 94       	dec	r13
     c14:	f0 2d       	mov	r31, r0
						vServo(angle[0]);
						vMotor(30,25);
						pattern = 10;		//return normal run
						break;
					default:
						pattern = 11;
     c16:	0b e0       	ldi	r16, 0x0B	; 11
     c18:	10 e0       	ldi	r17, 0x00	; 0
					case 0x00://0 000 0 000
						vServo(angle[2]);
						vMotor(25,20);
						break;
					case 0x04://0 000 0 100
						vServo(angle[0]);
     c1a:	ca e6       	ldi	r28, 0x6A	; 106
     c1c:	d0 e0       	ldi	r29, 0x00	; 0
	// - 45 0 45
	vOutLed7(9999);
	pattern = 10;
	//SLAVE_OFF;
	while(1){
		switch (pattern)
     c1e:	80 91 d5 01 	lds	r24, 0x01D5
     c22:	90 91 d6 01 	lds	r25, 0x01D6
     c26:	0a 97       	sbiw	r24, 0x0a	; 10
     c28:	87 33       	cpi	r24, 0x37	; 55
     c2a:	91 05       	cpc	r25, r1
     c2c:	08 f0       	brcs	.+2      	; 0xc30 <vRuning+0x80>
     c2e:	1f c1       	rjmp	.+574    	; 0xe6e <vRuning+0x2be>
     c30:	fc 01       	movw	r30, r24
     c32:	e6 5d       	subi	r30, 0xD6	; 214
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__tablejump2__>
		{
			case 10 :
			   /* Normal trace */
				
			//--
			switch( ucGetSensorData(0x77) ) {	// 0 111 0 111
     c3a:	87 e7       	ldi	r24, 0x77	; 119
     c3c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <ucGetSensorData>
     c40:	84 30       	cpi	r24, 0x04	; 4
     c42:	99 f0       	breq	.+38     	; 0xc6a <vRuning+0xba>
     c44:	80 31       	cpi	r24, 0x10	; 16
     c46:	01 f1       	breq	.+64     	; 0xc88 <vRuning+0xd8>
     c48:	81 11       	cpse	r24, r1
     c4a:	30 c0       	rjmp	.+96     	; 0xcac <vRuning+0xfc>
				case 0x00: // 0 000 0 000
					vServo( 0 );
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 4e 03 	call	0x69c	; 0x69c <vServo>
					vMotor( vMotor_BL[0] ,vMotor_BR[0] );
     c54:	60 91 76 00 	lds	r22, 0x0076
     c58:	70 91 77 00 	lds	r23, 0x0077
     c5c:	80 91 80 00 	lds	r24, 0x0080
     c60:	90 91 81 00 	lds	r25, 0x0081
     c64:	0e 94 de 02 	call	0x5bc	; 0x5bc <vMotor>
					break;				
     c68:	27 c0       	rjmp	.+78     	; 0xcb8 <vRuning+0x108>
///
				case 0x04: // 0 000 0 100
					vServo( angle[0] );
     c6a:	88 81       	ld	r24, Y
     c6c:	99 81       	ldd	r25, Y+1	; 0x01
     c6e:	0e 94 4e 03 	call	0x69c	; 0x69c <vServo>
					vMotor( vMotor_BL[0], vMotor_BR[1] );
     c72:	60 91 78 00 	lds	r22, 0x0078
     c76:	70 91 79 00 	lds	r23, 0x0079
     c7a:	80 91 80 00 	lds	r24, 0x0080
     c7e:	90 91 81 00 	lds	r25, 0x0081
     c82:	0e 94 de 02 	call	0x5bc	; 0x5bc <vMotor>
					break;		
     c86:	18 c0       	rjmp	.+48     	; 0xcb8 <vRuning+0x108>
///
				case 0x10:// 0 001 0 000
					vServo( -angle[0] );
     c88:	88 81       	ld	r24, Y
     c8a:	99 81       	ldd	r25, Y+1	; 0x01
     c8c:	91 95       	neg	r25
     c8e:	81 95       	neg	r24
     c90:	91 09       	sbc	r25, r1
     c92:	0e 94 4e 03 	call	0x69c	; 0x69c <vServo>
					vMotor( vMotor_BL[1] , vMotor_BR[0] );					
     c96:	60 91 76 00 	lds	r22, 0x0076
     c9a:	70 91 77 00 	lds	r23, 0x0077
     c9e:	80 91 82 00 	lds	r24, 0x0082
     ca2:	90 91 83 00 	lds	r25, 0x0083
     ca6:	0e 94 de 02 	call	0x5bc	; 0x5bc <vMotor>
					break;
     caa:	06 c0       	rjmp	.+12     	; 0xcb8 <vRuning+0x108>
				default:
					vMotor(0,0);
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 de 02 	call	0x5bc	; 0x5bc <vMotor>
					break;
			}//end switch 0x77
			switch(ucGetSensorData(0x02)){//cong phai 0 000 0 0x0
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	0e 94 52 04 	call	0x8a4	; 0x8a4 <ucGetSensorData>
     cbe:	82 30       	cpi	r24, 0x02	; 2
     cc0:	21 f4       	brne	.+8      	; 0xcca <vRuning+0x11a>
				case 0x02:
					pattern = 11;
     cc2:	10 93 d6 01 	sts	0x01D6, r17
     cc6:	00 93 d5 01 	sts	0x01D5, r16
					break;
				default:
					break;
			}//end switch 0x20
			switch(ucGetSensorData(0x20)){// cong trai. 0 0x0 0 000
     cca:	80 e2       	ldi	r24, 0x20	; 32
     ccc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <ucGetSensorData>
     cd0:	80 32       	cpi	r24, 0x20	; 32
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <vRuning+0x126>
     cd4:	a4 cf       	rjmp	.-184    	; 0xc1e <vRuning+0x6e>
				case 0x20:
					pattern = 12;
     cd6:	f0 92 d6 01 	sts	0x01D6, r15
     cda:	e0 92 d5 01 	sts	0x01D5, r14
					break;
     cde:	9f cf       	rjmp	.-194    	; 0xc1e <vRuning+0x6e>
					break;
			}//end witch 0x02
				break; //end case 10
				
			case 11://cong phai
				switch(ucGetSensorData(0x64)){ // 0 xx0 0 x00				
     ce0:	84 e6       	ldi	r24, 0x64	; 100
     ce2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <ucGetSensorData>
     ce6:	80 32       	cpi	r24, 0x20	; 32
     ce8:	21 f1       	breq	.+72     	; 0xd32 <vRuning+0x182>
     cea:	28 f4       	brcc	.+10     	; 0xcf6 <vRuning+0x146>
     cec:	88 23       	and	r24, r24
     cee:	69 f1       	breq	.+90     	; 0xd4a <vRuning+0x19a>
     cf0:	84 30       	cpi	r24, 0x04	; 4
     cf2:	c1 f1       	breq	.+112    	; 0xd64 <vRuning+0x1b4>
     cf4:	48 c0       	rjmp	.+144    	; 0xd86 <vRuning+0x1d6>
     cf6:	80 34       	cpi	r24, 0x40	; 64
     cf8:	19 f0       	breq	.+6      	; 0xd00 <vRuning+0x150>
     cfa:	80 36       	cpi	r24, 0x60	; 96
     cfc:	69 f0       	breq	.+26     	; 0xd18 <vRuning+0x168>
     cfe:	43 c0       	rjmp	.+134    	; 0xd86 <vRuning+0x1d6>
					case 0x40:// 0 100 0 000
						vServo(angle[5]);
     d00:	e4 e7       	ldi	r30, 0x74	; 116
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	91 81       	ldd	r25, Z+1	; 0x01
     d08:	0e 94 4e 03 	call	0x69c	; 0x69c <vServo>
						vMotor(30,-10);
     d0c:	b6 01       	movw	r22, r12
     d0e:	8e e1       	ldi	r24, 0x1E	; 30
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 de 02 	call	0x5bc	; 0x5bc <vMotor>
						break;
     d16:	83 cf       	rjmp	.-250    	; 0xc1e <vRuning+0x6e>
					case 0x60:// 0 110 0 000 
						vServo(angle[4]);
     d18:	e2 e7       	ldi	r30, 0x72	; 114
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	91 81       	ldd	r25, Z+1	; 0x01
     d20:	0e 94 4e 03 	call	0x69c	; 0x69c <vServo>
						vMotor(30,0);
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	8e e1       	ldi	r24, 0x1E	; 30
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 de 02 	call	0x5bc	; 0x5bc <vMotor>
						break;
     d30:	76 cf       	rjmp	.-276    	; 0xc1e <vRuning+0x6e>
					case 0x20://0 010 0 000
						vServo(angle[3]);
     d32:	f1 01       	movw	r30, r2
     d34:	80 81       	ld	r24, Z
     d36:	91 81       	ldd	r25, Z+1	; 0x01
     d38:	0e 94 4e 03 	call	0x69c	; 0x69c <vServo>
						vMotor(27,10);
     d3c:	6a e0       	ldi	r22, 0x0A	; 10
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	8b e1       	ldi	r24, 0x1B	; 27
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 de 02 	call	0x5bc	; 0x5bc <vMotor>
						break;
     d48:	6a cf       	rjmp	.-300    	; 0xc1e <vRuning+0x6e>
					case 0x00://0 000 0 000
						vServo(angle[2]);
     d4a:	ee e6       	ldi	r30, 0x6E	; 110
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	91 81       	ldd	r25, Z+1	; 0x01
     d52:	0e 94 4e 03 	call	0x69c	; 0x69c <vServo>
						vMotor(25,20);
     d56:	64 e1       	ldi	r22, 0x14	; 20
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	89 e1       	ldi	r24, 0x19	; 25
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 de 02 	call	0x5bc	; 0x5bc <vMotor>
						break;
     d62:	5d cf       	rjmp	.-326    	; 0xc1e <vRuning+0x6e>
					case 0x04://0 000 0 100
						vServo(angle[0]);
     d64:	88 81       	ld	r24, Y
     d66:	99 81       	ldd	r25, Y+1	; 0x01
     d68:	0e 94 4e 03 	call	0x69c	; 0x69c <vServo>
						vMotor(30,25);
     d6c:	69 e1       	ldi	r22, 0x19	; 25
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	8e e1       	ldi	r24, 0x1E	; 30
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 de 02 	call	0x5bc	; 0x5bc <vMotor>
						pattern = 10;		//return normal run
     d78:	8a e0       	ldi	r24, 0x0A	; 10
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	90 93 d6 01 	sts	0x01D6, r25
     d80:	80 93 d5 01 	sts	0x01D5, r24
						break;
     d84:	4c cf       	rjmp	.-360    	; 0xc1e <vRuning+0x6e>
					default:
						pattern = 11;
     d86:	10 93 d6 01 	sts	0x01D6, r17
     d8a:	00 93 d5 01 	sts	0x01D5, r16
						break;
     d8e:	47 cf       	rjmp	.-370    	; 0xc1e <vRuning+0x6e>
				}//end switch 0x64
				break; //end case 11
			case 12://cong trai
				switch(ucGetSensorData(0x13)){// 0 00x 0 0xx
     d90:	83 e1       	ldi	r24, 0x13	; 19
     d92:	0e 94 52 04 	call	0x8a4	; 0x8a4 <ucGetSensorData>
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	69 f1       	breq	.+90     	; 0xdf4 <vRuning+0x244>
     d9a:	28 f4       	brcc	.+10     	; 0xda6 <vRuning+0x1f6>
     d9c:	88 23       	and	r24, r24
     d9e:	d1 f1       	breq	.+116    	; 0xe14 <vRuning+0x264>
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	39 f0       	breq	.+14     	; 0xdb2 <vRuning+0x202>
     da4:	5f c0       	rjmp	.+190    	; 0xe64 <vRuning+0x2b4>
     da6:	83 30       	cpi	r24, 0x03	; 3
     da8:	a1 f0       	breq	.+40     	; 0xdd2 <vRuning+0x222>
     daa:	80 31       	cpi	r24, 0x10	; 16
     dac:	09 f4       	brne	.+2      	; 0xdb0 <vRuning+0x200>
     dae:	43 c0       	rjmp	.+134    	; 0xe36 <vRuning+0x286>
     db0:	59 c0       	rjmp	.+178    	; 0xe64 <vRuning+0x2b4>
					case 0x01://0 000 0 001
						vServo(-angle[5] - 10);
     db2:	e4 e7       	ldi	r30, 0x74	; 116
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	96 01       	movw	r18, r12
     dbc:	28 1b       	sub	r18, r24
     dbe:	39 0b       	sbc	r19, r25
     dc0:	c9 01       	movw	r24, r18
     dc2:	0e 94 4e 03 	call	0x69c	; 0x69c <vServo>
						vMotor(-10,30);
     dc6:	6e e1       	ldi	r22, 0x1E	; 30
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	c6 01       	movw	r24, r12
     dcc:	0e 94 de 02 	call	0x5bc	; 0x5bc <vMotor>
						break;
     dd0:	26 cf       	rjmp	.-436    	; 0xc1e <vRuning+0x6e>
					case 0x03://0 000 0 011
						vServo(-angle[4] - 9);
     dd2:	e2 e7       	ldi	r30, 0x72	; 114
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	91 81       	ldd	r25, Z+1	; 0x01
     dda:	94 01       	movw	r18, r8
     ddc:	28 1b       	sub	r18, r24
     dde:	39 0b       	sbc	r19, r25
     de0:	c9 01       	movw	r24, r18
     de2:	0e 94 4e 03 	call	0x69c	; 0x69c <vServo>
						vMotor(0,30);
     de6:	6e e1       	ldi	r22, 0x1E	; 30
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 de 02 	call	0x5bc	; 0x5bc <vMotor>
						break;
     df2:	15 cf       	rjmp	.-470    	; 0xc1e <vRuning+0x6e>
					case 0x02://0 000 0 010
						vServo(-angle[3] - 8);
     df4:	f1 01       	movw	r30, r2
     df6:	80 81       	ld	r24, Z
     df8:	91 81       	ldd	r25, Z+1	; 0x01
     dfa:	95 01       	movw	r18, r10
     dfc:	28 1b       	sub	r18, r24
     dfe:	39 0b       	sbc	r19, r25
     e00:	c9 01       	movw	r24, r18
     e02:	0e 94 4e 03 	call	0x69c	; 0x69c <vServo>
						vMotor(10,27);
     e06:	6b e1       	ldi	r22, 0x1B	; 27
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	8a e0       	ldi	r24, 0x0A	; 10
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 de 02 	call	0x5bc	; 0x5bc <vMotor>
						break;
     e12:	05 cf       	rjmp	.-502    	; 0xc1e <vRuning+0x6e>
					case 0x00://0 000 0 000
						vServo(-angle[2] - 7);
     e14:	ee e6       	ldi	r30, 0x6E	; 110
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	92 01       	movw	r18, r4
     e1e:	28 1b       	sub	r18, r24
     e20:	39 0b       	sbc	r19, r25
     e22:	c9 01       	movw	r24, r18
     e24:	0e 94 4e 03 	call	0x69c	; 0x69c <vServo>
						vMotor(20,25);
     e28:	69 e1       	ldi	r22, 0x19	; 25
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	84 e1       	ldi	r24, 0x14	; 20
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 de 02 	call	0x5bc	; 0x5bc <vMotor>
						break;
     e34:	f4 ce       	rjmp	.-536    	; 0xc1e <vRuning+0x6e>
					case 0x10://0 001 0 000
						vServo(-angle[1] - 6);
     e36:	ec e6       	ldi	r30, 0x6C	; 108
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	91 81       	ldd	r25, Z+1	; 0x01
     e3e:	93 01       	movw	r18, r6
     e40:	28 1b       	sub	r18, r24
     e42:	39 0b       	sbc	r19, r25
     e44:	c9 01       	movw	r24, r18
     e46:	0e 94 4e 03 	call	0x69c	; 0x69c <vServo>
						vMotor(25,30);
     e4a:	6e e1       	ldi	r22, 0x1E	; 30
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	89 e1       	ldi	r24, 0x19	; 25
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 de 02 	call	0x5bc	; 0x5bc <vMotor>
						pattern = 10;		//return normal run
     e56:	8a e0       	ldi	r24, 0x0A	; 10
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	90 93 d6 01 	sts	0x01D6, r25
     e5e:	80 93 d5 01 	sts	0x01D5, r24
						break;
     e62:	dd ce       	rjmp	.-582    	; 0xc1e <vRuning+0x6e>
					default:
						pattern = 12;
     e64:	f0 92 d6 01 	sts	0x01D6, r15
     e68:	e0 92 d5 01 	sts	0x01D5, r14
						break;
     e6c:	d8 ce       	rjmp	.-592    	; 0xc1e <vRuning+0x6e>
			case 41:			
				break;
			
			default:
			/* When the pattern is not applied to any case, return to waiting state */
			pattern = 0;
     e6e:	10 92 d6 01 	sts	0x01D6, r1
     e72:	10 92 d5 01 	sts	0x01D5, r1
			break;
     e76:	d3 ce       	rjmp	.-602    	; 0xc1e <vRuning+0x6e>

00000e78 <main>:
	}
	// [Vo Huu Tai 14/8/2015 ]  BUGGY here :(((
}
int main(void)
{
	uint8_t *ucBuff = (uint8_t*)calloc(DEBUG_BUFF_SIZE,sizeof(uint8_t));
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	80 e4       	ldi	r24, 0x40	; 64
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 04 09 	call	0x1208	; 0x1208 <calloc>
     e84:	ec 01       	movw	r28, r24
	int iSensorData = 0;
	vInitProgram();	
     e86:	0e 94 7d 02 	call	0x4fa	; 0x4fa <vInitProgram>
     e8a:	2f ef       	ldi	r18, 0xFF	; 255
     e8c:	8e e9       	ldi	r24, 0x9E	; 158
     e8e:	94 e2       	ldi	r25, 0x24	; 36
     e90:	21 50       	subi	r18, 0x01	; 1
     e92:	80 40       	sbci	r24, 0x00	; 0
     e94:	90 40       	sbci	r25, 0x00	; 0
     e96:	e1 f7       	brne	.-8      	; 0xe90 <main+0x18>
     e98:	00 c0       	rjmp	.+0      	; 0xe9a <main+0x22>
     e9a:	00 00       	nop
	_delay_ms(1000);//waiting for slaver ready, remove it ...
	/**
	       vOutLed7(1234);		// Xuat so 1234		   
		   vBeep(100);			// Phat ra tieng beeep 100 ms
	*/	
    vOutLed7(1234);
     e9c:	82 ed       	ldi	r24, 0xD2	; 210
     e9e:	94 e0       	ldi	r25, 0x04	; 4
     ea0:	0e 94 cc 01 	call	0x398	; 0x398 <vOutLed7>
	vBeep(100);	
     ea4:	84 e6       	ldi	r24, 0x64	; 100
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 10 02 	call	0x420	; 0x420 <vBeep>
	vMotor(0,0);
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 de 02 	call	0x5bc	; 0x5bc <vMotor>
	vServo(0);
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 4e 03 	call	0x69c	; 0x69c <vServo>
	while(1)
    {       	
		if(isTester()){//Get switch tester
     ec0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <isTester>
     ec4:	88 23       	and	r24, r24
     ec6:	a9 f1       	breq	.+106    	; 0xf32 <main+0xba>
			vOutLed7(ucGetSwitch());
     ec8:	0e 94 da 02 	call	0x5b4	; 0x5b4 <ucGetSwitch>
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 cc 01 	call	0x398	; 0x398 <vOutLed7>
			bDebugProcess();
     ed2:	0e 94 9d 00 	call	0x13a	; 0x13a <bDebugProcess>
			if(bMsgIsOK()){
     ed6:	0e 94 0e 01 	call	0x21c	; 0x21c <bMsgIsOK>
     eda:	88 23       	and	r24, r24
     edc:	d1 f0       	breq	.+52     	; 0xf12 <main+0x9a>
				switch (ucGetCMDInfo())
     ede:	0e 94 18 01 	call	0x230	; 0x230 <ucGetCMDInfo>
     ee2:	82 30       	cpi	r24, 0x02	; 2
     ee4:	b1 f4       	brne	.+44     	; 0xf12 <main+0x9a>
				{
					case CMD_SENSOR:
					vSetCMDInfo(CMD_NONE);
     ee6:	83 e0       	ldi	r24, 0x03	; 3
     ee8:	0e 94 1b 01 	call	0x236	; 0x236 <vSetCMDInfo>
					ucGetData(ucBuff);
     eec:	ce 01       	movw	r24, r28
     eee:	0e 94 1e 01 	call	0x23c	; 0x23c <ucGetData>
					if (ucBuff[0] == 1){//negative
     ef2:	88 81       	ld	r24, Y
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	31 f4       	brne	.+12     	; 0xf04 <main+0x8c>
						iSensorData = -ucBuff[1];
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	90 e0       	ldi	r25, 0x00	; 0
						vOutLed7((-iSensorData + 1000));
     efc:	88 51       	subi	r24, 0x18	; 24
     efe:	9c 4f       	sbci	r25, 0xFC	; 252
     f00:	0e 94 cc 01 	call	0x398	; 0x398 <vOutLed7>
					}
					if(ucBuff[0] == 0){
     f04:	88 81       	ld	r24, Y
     f06:	81 11       	cpse	r24, r1
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <main+0x9a>
						iSensorData = ucBuff[1];
						vOutLed7(iSensorData);
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 cc 01 	call	0x398	; 0x398 <vOutLed7>
					break;
					default: break;
				}
			}
			
			if(bKeyIsPress(KEY1)){
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	0e 94 ae 02 	call	0x55c	; 0x55c <bKeyIsPress>
     f18:	88 23       	and	r24, r24
     f1a:	19 f0       	breq	.+6      	; 0xf22 <main+0xaa>
				vLedCtrl(LED_STARTUP_COMPELETE);
     f1c:	84 e0       	ldi	r24, 0x04	; 4
     f1e:	0e 94 24 05 	call	0xa48	; 0xa48 <vLedCtrl>
			}
			if(bStartBarIsStart()){
     f22:	0e 94 59 04 	call	0x8b2	; 0x8b2 <bStartBarIsStart>
     f26:	88 23       	and	r24, r24
     f28:	59 f2       	breq	.-106    	; 0xec0 <main+0x48>
				vLedCtrl(LED_STARTUP_COMPELETE); //Fix me
     f2a:	84 e0       	ldi	r24, 0x04	; 4
     f2c:	0e 94 24 05 	call	0xa48	; 0xa48 <vLedCtrl>
     f30:	c7 cf       	rjmp	.-114    	; 0xec0 <main+0x48>
			}
		}//end tester
		else{//normal running
			if(bKeyIsPress(KEY2)){//Key 2 learn color, and run
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	0e 94 ae 02 	call	0x55c	; 0x55c <bKeyIsPress>
     f38:	88 23       	and	r24, r24
     f3a:	21 f0       	breq	.+8      	; 0xf44 <main+0xcc>
				vLearnColor();			
     f3c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <vLearnColor>
				vRuning();
     f40:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vRuning>
			}//end Key 2 learn color, and run
			if(bKeyIsPress(KEY1)){//Load epprom and run
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	0e 94 ae 02 	call	0x55c	; 0x55c <bKeyIsPress>
     f4a:	88 23       	and	r24, r24
     f4c:	09 f4       	brne	.+2      	; 0xf50 <main+0xd8>
     f4e:	b8 cf       	rjmp	.-144    	; 0xec0 <main+0x48>
				vLoadE2P();
     f50:	0e 94 63 04 	call	0x8c6	; 0x8c6 <vLoadE2P>
					vOutLed7(ucGetSensorData(0xff));
					_delay_ms(100);
					
				}//end while 1
				#endif
				vRuning();
     f54:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vRuning>

00000f58 <__vector_9>:
	return ret;
}

// [Vo Huu Tai 20/8/2015 ]  ISR here
ISR(TIMER0_OVF_vect)
{
     f58:	1f 92       	push	r1
     f5a:	0f 92       	push	r0
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	0f 92       	push	r0
     f60:	11 24       	eor	r1, r1
     f62:	2f 93       	push	r18
     f64:	3f 93       	push	r19
     f66:	4f 93       	push	r20
     f68:	5f 93       	push	r21
     f6a:	6f 93       	push	r22
     f6c:	7f 93       	push	r23
     f6e:	8f 93       	push	r24
     f70:	9f 93       	push	r25
     f72:	af 93       	push	r26
     f74:	bf 93       	push	r27
     f76:	ef 93       	push	r30
     f78:	ff 93       	push	r31
	TCNT0 = 68;	//~1ms
     f7a:	84 e4       	ldi	r24, 0x44	; 68
     f7c:	82 bf       	out	0x32, r24	; 50
	//Add more cnt here..
	vAssassin();
     f7e:	0e 94 c0 05 	call	0xb80	; 0xb80 <vAssassin>
}
     f82:	ff 91       	pop	r31
     f84:	ef 91       	pop	r30
     f86:	bf 91       	pop	r27
     f88:	af 91       	pop	r26
     f8a:	9f 91       	pop	r25
     f8c:	8f 91       	pop	r24
     f8e:	7f 91       	pop	r23
     f90:	6f 91       	pop	r22
     f92:	5f 91       	pop	r21
     f94:	4f 91       	pop	r20
     f96:	3f 91       	pop	r19
     f98:	2f 91       	pop	r18
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	0f 90       	pop	r0
     fa0:	1f 90       	pop	r1
     fa2:	18 95       	reti

00000fa4 <__fixunssfsi>:
     fa4:	70 d0       	rcall	.+224    	; 0x1086 <__fp_splitA>
     fa6:	88 f0       	brcs	.+34     	; 0xfca <__fixunssfsi+0x26>
     fa8:	9f 57       	subi	r25, 0x7F	; 127
     faa:	90 f0       	brcs	.+36     	; 0xfd0 <__fixunssfsi+0x2c>
     fac:	b9 2f       	mov	r27, r25
     fae:	99 27       	eor	r25, r25
     fb0:	b7 51       	subi	r27, 0x17	; 23
     fb2:	a0 f0       	brcs	.+40     	; 0xfdc <__fixunssfsi+0x38>
     fb4:	d1 f0       	breq	.+52     	; 0xfea <__fixunssfsi+0x46>
     fb6:	66 0f       	add	r22, r22
     fb8:	77 1f       	adc	r23, r23
     fba:	88 1f       	adc	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	1a f0       	brmi	.+6      	; 0xfc6 <__fixunssfsi+0x22>
     fc0:	ba 95       	dec	r27
     fc2:	c9 f7       	brne	.-14     	; 0xfb6 <__fixunssfsi+0x12>
     fc4:	12 c0       	rjmp	.+36     	; 0xfea <__fixunssfsi+0x46>
     fc6:	b1 30       	cpi	r27, 0x01	; 1
     fc8:	81 f0       	breq	.+32     	; 0xfea <__fixunssfsi+0x46>
     fca:	77 d0       	rcall	.+238    	; 0x10ba <__fp_zero>
     fcc:	b1 e0       	ldi	r27, 0x01	; 1
     fce:	08 95       	ret
     fd0:	74 c0       	rjmp	.+232    	; 0x10ba <__fp_zero>
     fd2:	67 2f       	mov	r22, r23
     fd4:	78 2f       	mov	r23, r24
     fd6:	88 27       	eor	r24, r24
     fd8:	b8 5f       	subi	r27, 0xF8	; 248
     fda:	39 f0       	breq	.+14     	; 0xfea <__fixunssfsi+0x46>
     fdc:	b9 3f       	cpi	r27, 0xF9	; 249
     fde:	cc f3       	brlt	.-14     	; 0xfd2 <__fixunssfsi+0x2e>
     fe0:	86 95       	lsr	r24
     fe2:	77 95       	ror	r23
     fe4:	67 95       	ror	r22
     fe6:	b3 95       	inc	r27
     fe8:	d9 f7       	brne	.-10     	; 0xfe0 <__fixunssfsi+0x3c>
     fea:	3e f4       	brtc	.+14     	; 0xffa <__fixunssfsi+0x56>
     fec:	90 95       	com	r25
     fee:	80 95       	com	r24
     ff0:	70 95       	com	r23
     ff2:	61 95       	neg	r22
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255
     ff6:	8f 4f       	sbci	r24, 0xFF	; 255
     ff8:	9f 4f       	sbci	r25, 0xFF	; 255
     ffa:	08 95       	ret

00000ffc <__floatunsisf>:
     ffc:	e8 94       	clt
     ffe:	09 c0       	rjmp	.+18     	; 0x1012 <__floatsisf+0x12>

00001000 <__floatsisf>:
    1000:	97 fb       	bst	r25, 7
    1002:	3e f4       	brtc	.+14     	; 0x1012 <__floatsisf+0x12>
    1004:	90 95       	com	r25
    1006:	80 95       	com	r24
    1008:	70 95       	com	r23
    100a:	61 95       	neg	r22
    100c:	7f 4f       	sbci	r23, 0xFF	; 255
    100e:	8f 4f       	sbci	r24, 0xFF	; 255
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	99 23       	and	r25, r25
    1014:	a9 f0       	breq	.+42     	; 0x1040 <__floatsisf+0x40>
    1016:	f9 2f       	mov	r31, r25
    1018:	96 e9       	ldi	r25, 0x96	; 150
    101a:	bb 27       	eor	r27, r27
    101c:	93 95       	inc	r25
    101e:	f6 95       	lsr	r31
    1020:	87 95       	ror	r24
    1022:	77 95       	ror	r23
    1024:	67 95       	ror	r22
    1026:	b7 95       	ror	r27
    1028:	f1 11       	cpse	r31, r1
    102a:	f8 cf       	rjmp	.-16     	; 0x101c <__floatsisf+0x1c>
    102c:	fa f4       	brpl	.+62     	; 0x106c <__floatsisf+0x6c>
    102e:	bb 0f       	add	r27, r27
    1030:	11 f4       	brne	.+4      	; 0x1036 <__floatsisf+0x36>
    1032:	60 ff       	sbrs	r22, 0
    1034:	1b c0       	rjmp	.+54     	; 0x106c <__floatsisf+0x6c>
    1036:	6f 5f       	subi	r22, 0xFF	; 255
    1038:	7f 4f       	sbci	r23, 0xFF	; 255
    103a:	8f 4f       	sbci	r24, 0xFF	; 255
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	16 c0       	rjmp	.+44     	; 0x106c <__floatsisf+0x6c>
    1040:	88 23       	and	r24, r24
    1042:	11 f0       	breq	.+4      	; 0x1048 <__floatsisf+0x48>
    1044:	96 e9       	ldi	r25, 0x96	; 150
    1046:	11 c0       	rjmp	.+34     	; 0x106a <__floatsisf+0x6a>
    1048:	77 23       	and	r23, r23
    104a:	21 f0       	breq	.+8      	; 0x1054 <__floatsisf+0x54>
    104c:	9e e8       	ldi	r25, 0x8E	; 142
    104e:	87 2f       	mov	r24, r23
    1050:	76 2f       	mov	r23, r22
    1052:	05 c0       	rjmp	.+10     	; 0x105e <__floatsisf+0x5e>
    1054:	66 23       	and	r22, r22
    1056:	71 f0       	breq	.+28     	; 0x1074 <__floatsisf+0x74>
    1058:	96 e8       	ldi	r25, 0x86	; 134
    105a:	86 2f       	mov	r24, r22
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	2a f0       	brmi	.+10     	; 0x106c <__floatsisf+0x6c>
    1062:	9a 95       	dec	r25
    1064:	66 0f       	add	r22, r22
    1066:	77 1f       	adc	r23, r23
    1068:	88 1f       	adc	r24, r24
    106a:	da f7       	brpl	.-10     	; 0x1062 <__floatsisf+0x62>
    106c:	88 0f       	add	r24, r24
    106e:	96 95       	lsr	r25
    1070:	87 95       	ror	r24
    1072:	97 f9       	bld	r25, 7
    1074:	08 95       	ret

00001076 <__fp_split3>:
    1076:	57 fd       	sbrc	r21, 7
    1078:	90 58       	subi	r25, 0x80	; 128
    107a:	44 0f       	add	r20, r20
    107c:	55 1f       	adc	r21, r21
    107e:	59 f0       	breq	.+22     	; 0x1096 <__fp_splitA+0x10>
    1080:	5f 3f       	cpi	r21, 0xFF	; 255
    1082:	71 f0       	breq	.+28     	; 0x10a0 <__fp_splitA+0x1a>
    1084:	47 95       	ror	r20

00001086 <__fp_splitA>:
    1086:	88 0f       	add	r24, r24
    1088:	97 fb       	bst	r25, 7
    108a:	99 1f       	adc	r25, r25
    108c:	61 f0       	breq	.+24     	; 0x10a6 <__fp_splitA+0x20>
    108e:	9f 3f       	cpi	r25, 0xFF	; 255
    1090:	79 f0       	breq	.+30     	; 0x10b0 <__fp_splitA+0x2a>
    1092:	87 95       	ror	r24
    1094:	08 95       	ret
    1096:	12 16       	cp	r1, r18
    1098:	13 06       	cpc	r1, r19
    109a:	14 06       	cpc	r1, r20
    109c:	55 1f       	adc	r21, r21
    109e:	f2 cf       	rjmp	.-28     	; 0x1084 <__fp_split3+0xe>
    10a0:	46 95       	lsr	r20
    10a2:	f1 df       	rcall	.-30     	; 0x1086 <__fp_splitA>
    10a4:	08 c0       	rjmp	.+16     	; 0x10b6 <__fp_splitA+0x30>
    10a6:	16 16       	cp	r1, r22
    10a8:	17 06       	cpc	r1, r23
    10aa:	18 06       	cpc	r1, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	f1 cf       	rjmp	.-30     	; 0x1092 <__fp_splitA+0xc>
    10b0:	86 95       	lsr	r24
    10b2:	71 05       	cpc	r23, r1
    10b4:	61 05       	cpc	r22, r1
    10b6:	08 94       	sec
    10b8:	08 95       	ret

000010ba <__fp_zero>:
    10ba:	e8 94       	clt

000010bc <__fp_szero>:
    10bc:	bb 27       	eor	r27, r27
    10be:	66 27       	eor	r22, r22
    10c0:	77 27       	eor	r23, r23
    10c2:	cb 01       	movw	r24, r22
    10c4:	97 f9       	bld	r25, 7
    10c6:	08 95       	ret

000010c8 <__mulsf3>:
    10c8:	0b d0       	rcall	.+22     	; 0x10e0 <__mulsf3x>
    10ca:	78 c0       	rjmp	.+240    	; 0x11bc <__fp_round>
    10cc:	69 d0       	rcall	.+210    	; 0x11a0 <__fp_pscA>
    10ce:	28 f0       	brcs	.+10     	; 0x10da <__mulsf3+0x12>
    10d0:	6e d0       	rcall	.+220    	; 0x11ae <__fp_pscB>
    10d2:	18 f0       	brcs	.+6      	; 0x10da <__mulsf3+0x12>
    10d4:	95 23       	and	r25, r21
    10d6:	09 f0       	breq	.+2      	; 0x10da <__mulsf3+0x12>
    10d8:	5a c0       	rjmp	.+180    	; 0x118e <__fp_inf>
    10da:	5f c0       	rjmp	.+190    	; 0x119a <__fp_nan>
    10dc:	11 24       	eor	r1, r1
    10de:	ee cf       	rjmp	.-36     	; 0x10bc <__fp_szero>

000010e0 <__mulsf3x>:
    10e0:	ca df       	rcall	.-108    	; 0x1076 <__fp_split3>
    10e2:	a0 f3       	brcs	.-24     	; 0x10cc <__mulsf3+0x4>

000010e4 <__mulsf3_pse>:
    10e4:	95 9f       	mul	r25, r21
    10e6:	d1 f3       	breq	.-12     	; 0x10dc <__mulsf3+0x14>
    10e8:	95 0f       	add	r25, r21
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	55 1f       	adc	r21, r21
    10ee:	62 9f       	mul	r22, r18
    10f0:	f0 01       	movw	r30, r0
    10f2:	72 9f       	mul	r23, r18
    10f4:	bb 27       	eor	r27, r27
    10f6:	f0 0d       	add	r31, r0
    10f8:	b1 1d       	adc	r27, r1
    10fa:	63 9f       	mul	r22, r19
    10fc:	aa 27       	eor	r26, r26
    10fe:	f0 0d       	add	r31, r0
    1100:	b1 1d       	adc	r27, r1
    1102:	aa 1f       	adc	r26, r26
    1104:	64 9f       	mul	r22, r20
    1106:	66 27       	eor	r22, r22
    1108:	b0 0d       	add	r27, r0
    110a:	a1 1d       	adc	r26, r1
    110c:	66 1f       	adc	r22, r22
    110e:	82 9f       	mul	r24, r18
    1110:	22 27       	eor	r18, r18
    1112:	b0 0d       	add	r27, r0
    1114:	a1 1d       	adc	r26, r1
    1116:	62 1f       	adc	r22, r18
    1118:	73 9f       	mul	r23, r19
    111a:	b0 0d       	add	r27, r0
    111c:	a1 1d       	adc	r26, r1
    111e:	62 1f       	adc	r22, r18
    1120:	83 9f       	mul	r24, r19
    1122:	a0 0d       	add	r26, r0
    1124:	61 1d       	adc	r22, r1
    1126:	22 1f       	adc	r18, r18
    1128:	74 9f       	mul	r23, r20
    112a:	33 27       	eor	r19, r19
    112c:	a0 0d       	add	r26, r0
    112e:	61 1d       	adc	r22, r1
    1130:	23 1f       	adc	r18, r19
    1132:	84 9f       	mul	r24, r20
    1134:	60 0d       	add	r22, r0
    1136:	21 1d       	adc	r18, r1
    1138:	82 2f       	mov	r24, r18
    113a:	76 2f       	mov	r23, r22
    113c:	6a 2f       	mov	r22, r26
    113e:	11 24       	eor	r1, r1
    1140:	9f 57       	subi	r25, 0x7F	; 127
    1142:	50 40       	sbci	r21, 0x00	; 0
    1144:	8a f0       	brmi	.+34     	; 0x1168 <__mulsf3_pse+0x84>
    1146:	e1 f0       	breq	.+56     	; 0x1180 <__mulsf3_pse+0x9c>
    1148:	88 23       	and	r24, r24
    114a:	4a f0       	brmi	.+18     	; 0x115e <__mulsf3_pse+0x7a>
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	bb 1f       	adc	r27, r27
    1152:	66 1f       	adc	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	88 1f       	adc	r24, r24
    1158:	91 50       	subi	r25, 0x01	; 1
    115a:	50 40       	sbci	r21, 0x00	; 0
    115c:	a9 f7       	brne	.-22     	; 0x1148 <__mulsf3_pse+0x64>
    115e:	9e 3f       	cpi	r25, 0xFE	; 254
    1160:	51 05       	cpc	r21, r1
    1162:	70 f0       	brcs	.+28     	; 0x1180 <__mulsf3_pse+0x9c>
    1164:	14 c0       	rjmp	.+40     	; 0x118e <__fp_inf>
    1166:	aa cf       	rjmp	.-172    	; 0x10bc <__fp_szero>
    1168:	5f 3f       	cpi	r21, 0xFF	; 255
    116a:	ec f3       	brlt	.-6      	; 0x1166 <__mulsf3_pse+0x82>
    116c:	98 3e       	cpi	r25, 0xE8	; 232
    116e:	dc f3       	brlt	.-10     	; 0x1166 <__mulsf3_pse+0x82>
    1170:	86 95       	lsr	r24
    1172:	77 95       	ror	r23
    1174:	67 95       	ror	r22
    1176:	b7 95       	ror	r27
    1178:	f7 95       	ror	r31
    117a:	e7 95       	ror	r30
    117c:	9f 5f       	subi	r25, 0xFF	; 255
    117e:	c1 f7       	brne	.-16     	; 0x1170 <__mulsf3_pse+0x8c>
    1180:	fe 2b       	or	r31, r30
    1182:	88 0f       	add	r24, r24
    1184:	91 1d       	adc	r25, r1
    1186:	96 95       	lsr	r25
    1188:	87 95       	ror	r24
    118a:	97 f9       	bld	r25, 7
    118c:	08 95       	ret

0000118e <__fp_inf>:
    118e:	97 f9       	bld	r25, 7
    1190:	9f 67       	ori	r25, 0x7F	; 127
    1192:	80 e8       	ldi	r24, 0x80	; 128
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	08 95       	ret

0000119a <__fp_nan>:
    119a:	9f ef       	ldi	r25, 0xFF	; 255
    119c:	80 ec       	ldi	r24, 0xC0	; 192
    119e:	08 95       	ret

000011a0 <__fp_pscA>:
    11a0:	00 24       	eor	r0, r0
    11a2:	0a 94       	dec	r0
    11a4:	16 16       	cp	r1, r22
    11a6:	17 06       	cpc	r1, r23
    11a8:	18 06       	cpc	r1, r24
    11aa:	09 06       	cpc	r0, r25
    11ac:	08 95       	ret

000011ae <__fp_pscB>:
    11ae:	00 24       	eor	r0, r0
    11b0:	0a 94       	dec	r0
    11b2:	12 16       	cp	r1, r18
    11b4:	13 06       	cpc	r1, r19
    11b6:	14 06       	cpc	r1, r20
    11b8:	05 06       	cpc	r0, r21
    11ba:	08 95       	ret

000011bc <__fp_round>:
    11bc:	09 2e       	mov	r0, r25
    11be:	03 94       	inc	r0
    11c0:	00 0c       	add	r0, r0
    11c2:	11 f4       	brne	.+4      	; 0x11c8 <__fp_round+0xc>
    11c4:	88 23       	and	r24, r24
    11c6:	52 f0       	brmi	.+20     	; 0x11dc <__fp_round+0x20>
    11c8:	bb 0f       	add	r27, r27
    11ca:	40 f4       	brcc	.+16     	; 0x11dc <__fp_round+0x20>
    11cc:	bf 2b       	or	r27, r31
    11ce:	11 f4       	brne	.+4      	; 0x11d4 <__fp_round+0x18>
    11d0:	60 ff       	sbrs	r22, 0
    11d2:	04 c0       	rjmp	.+8      	; 0x11dc <__fp_round+0x20>
    11d4:	6f 5f       	subi	r22, 0xFF	; 255
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	8f 4f       	sbci	r24, 0xFF	; 255
    11da:	9f 4f       	sbci	r25, 0xFF	; 255
    11dc:	08 95       	ret

000011de <__tablejump2__>:
    11de:	ee 0f       	add	r30, r30
    11e0:	ff 1f       	adc	r31, r31

000011e2 <__tablejump__>:
    11e2:	05 90       	lpm	r0, Z+
    11e4:	f4 91       	lpm	r31, Z
    11e6:	e0 2d       	mov	r30, r0
    11e8:	09 94       	ijmp

000011ea <__umulhisi3>:
    11ea:	a2 9f       	mul	r26, r18
    11ec:	b0 01       	movw	r22, r0
    11ee:	b3 9f       	mul	r27, r19
    11f0:	c0 01       	movw	r24, r0
    11f2:	a3 9f       	mul	r26, r19
    11f4:	70 0d       	add	r23, r0
    11f6:	81 1d       	adc	r24, r1
    11f8:	11 24       	eor	r1, r1
    11fa:	91 1d       	adc	r25, r1
    11fc:	b2 9f       	mul	r27, r18
    11fe:	70 0d       	add	r23, r0
    1200:	81 1d       	adc	r24, r1
    1202:	11 24       	eor	r1, r1
    1204:	91 1d       	adc	r25, r1
    1206:	08 95       	ret

00001208 <calloc>:
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	86 9f       	mul	r24, r22
    1212:	80 01       	movw	r16, r0
    1214:	87 9f       	mul	r24, r23
    1216:	10 0d       	add	r17, r0
    1218:	96 9f       	mul	r25, r22
    121a:	10 0d       	add	r17, r0
    121c:	11 24       	eor	r1, r1
    121e:	c8 01       	movw	r24, r16
    1220:	0e 94 20 09 	call	0x1240	; 0x1240 <malloc>
    1224:	ec 01       	movw	r28, r24
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	29 f0       	breq	.+10     	; 0x1234 <calloc+0x2c>
    122a:	a8 01       	movw	r20, r16
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	0e 94 47 0a 	call	0x148e	; 0x148e <memset>
    1234:	ce 01       	movw	r24, r28
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	08 95       	ret

00001240 <malloc>:
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	82 30       	cpi	r24, 0x02	; 2
    1246:	91 05       	cpc	r25, r1
    1248:	10 f4       	brcc	.+4      	; 0x124e <malloc+0xe>
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	e0 91 16 02 	lds	r30, 0x0216
    1252:	f0 91 17 02 	lds	r31, 0x0217
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	a0 e0       	ldi	r26, 0x00	; 0
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	30 97       	sbiw	r30, 0x00	; 0
    1260:	39 f1       	breq	.+78     	; 0x12b0 <malloc+0x70>
    1262:	40 81       	ld	r20, Z
    1264:	51 81       	ldd	r21, Z+1	; 0x01
    1266:	48 17       	cp	r20, r24
    1268:	59 07       	cpc	r21, r25
    126a:	b8 f0       	brcs	.+46     	; 0x129a <malloc+0x5a>
    126c:	48 17       	cp	r20, r24
    126e:	59 07       	cpc	r21, r25
    1270:	71 f4       	brne	.+28     	; 0x128e <malloc+0x4e>
    1272:	82 81       	ldd	r24, Z+2	; 0x02
    1274:	93 81       	ldd	r25, Z+3	; 0x03
    1276:	10 97       	sbiw	r26, 0x00	; 0
    1278:	29 f0       	breq	.+10     	; 0x1284 <malloc+0x44>
    127a:	13 96       	adiw	r26, 0x03	; 3
    127c:	9c 93       	st	X, r25
    127e:	8e 93       	st	-X, r24
    1280:	12 97       	sbiw	r26, 0x02	; 2
    1282:	2c c0       	rjmp	.+88     	; 0x12dc <malloc+0x9c>
    1284:	90 93 17 02 	sts	0x0217, r25
    1288:	80 93 16 02 	sts	0x0216, r24
    128c:	27 c0       	rjmp	.+78     	; 0x12dc <malloc+0x9c>
    128e:	21 15       	cp	r18, r1
    1290:	31 05       	cpc	r19, r1
    1292:	31 f0       	breq	.+12     	; 0x12a0 <malloc+0x60>
    1294:	42 17       	cp	r20, r18
    1296:	53 07       	cpc	r21, r19
    1298:	18 f0       	brcs	.+6      	; 0x12a0 <malloc+0x60>
    129a:	a9 01       	movw	r20, r18
    129c:	db 01       	movw	r26, r22
    129e:	01 c0       	rjmp	.+2      	; 0x12a2 <malloc+0x62>
    12a0:	ef 01       	movw	r28, r30
    12a2:	9a 01       	movw	r18, r20
    12a4:	bd 01       	movw	r22, r26
    12a6:	df 01       	movw	r26, r30
    12a8:	02 80       	ldd	r0, Z+2	; 0x02
    12aa:	f3 81       	ldd	r31, Z+3	; 0x03
    12ac:	e0 2d       	mov	r30, r0
    12ae:	d7 cf       	rjmp	.-82     	; 0x125e <malloc+0x1e>
    12b0:	21 15       	cp	r18, r1
    12b2:	31 05       	cpc	r19, r1
    12b4:	f9 f0       	breq	.+62     	; 0x12f4 <malloc+0xb4>
    12b6:	28 1b       	sub	r18, r24
    12b8:	39 0b       	sbc	r19, r25
    12ba:	24 30       	cpi	r18, 0x04	; 4
    12bc:	31 05       	cpc	r19, r1
    12be:	80 f4       	brcc	.+32     	; 0x12e0 <malloc+0xa0>
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	9b 81       	ldd	r25, Y+3	; 0x03
    12c4:	61 15       	cp	r22, r1
    12c6:	71 05       	cpc	r23, r1
    12c8:	21 f0       	breq	.+8      	; 0x12d2 <malloc+0x92>
    12ca:	fb 01       	movw	r30, r22
    12cc:	93 83       	std	Z+3, r25	; 0x03
    12ce:	82 83       	std	Z+2, r24	; 0x02
    12d0:	04 c0       	rjmp	.+8      	; 0x12da <malloc+0x9a>
    12d2:	90 93 17 02 	sts	0x0217, r25
    12d6:	80 93 16 02 	sts	0x0216, r24
    12da:	fe 01       	movw	r30, r28
    12dc:	32 96       	adiw	r30, 0x02	; 2
    12de:	44 c0       	rjmp	.+136    	; 0x1368 <malloc+0x128>
    12e0:	fe 01       	movw	r30, r28
    12e2:	e2 0f       	add	r30, r18
    12e4:	f3 1f       	adc	r31, r19
    12e6:	81 93       	st	Z+, r24
    12e8:	91 93       	st	Z+, r25
    12ea:	22 50       	subi	r18, 0x02	; 2
    12ec:	31 09       	sbc	r19, r1
    12ee:	39 83       	std	Y+1, r19	; 0x01
    12f0:	28 83       	st	Y, r18
    12f2:	3a c0       	rjmp	.+116    	; 0x1368 <malloc+0x128>
    12f4:	20 91 14 02 	lds	r18, 0x0214
    12f8:	30 91 15 02 	lds	r19, 0x0215
    12fc:	23 2b       	or	r18, r19
    12fe:	41 f4       	brne	.+16     	; 0x1310 <malloc+0xd0>
    1300:	20 91 62 00 	lds	r18, 0x0062
    1304:	30 91 63 00 	lds	r19, 0x0063
    1308:	30 93 15 02 	sts	0x0215, r19
    130c:	20 93 14 02 	sts	0x0214, r18
    1310:	20 91 60 00 	lds	r18, 0x0060
    1314:	30 91 61 00 	lds	r19, 0x0061
    1318:	21 15       	cp	r18, r1
    131a:	31 05       	cpc	r19, r1
    131c:	41 f4       	brne	.+16     	; 0x132e <malloc+0xee>
    131e:	2d b7       	in	r18, 0x3d	; 61
    1320:	3e b7       	in	r19, 0x3e	; 62
    1322:	40 91 64 00 	lds	r20, 0x0064
    1326:	50 91 65 00 	lds	r21, 0x0065
    132a:	24 1b       	sub	r18, r20
    132c:	35 0b       	sbc	r19, r21
    132e:	e0 91 14 02 	lds	r30, 0x0214
    1332:	f0 91 15 02 	lds	r31, 0x0215
    1336:	e2 17       	cp	r30, r18
    1338:	f3 07       	cpc	r31, r19
    133a:	a0 f4       	brcc	.+40     	; 0x1364 <malloc+0x124>
    133c:	2e 1b       	sub	r18, r30
    133e:	3f 0b       	sbc	r19, r31
    1340:	28 17       	cp	r18, r24
    1342:	39 07       	cpc	r19, r25
    1344:	78 f0       	brcs	.+30     	; 0x1364 <malloc+0x124>
    1346:	ac 01       	movw	r20, r24
    1348:	4e 5f       	subi	r20, 0xFE	; 254
    134a:	5f 4f       	sbci	r21, 0xFF	; 255
    134c:	24 17       	cp	r18, r20
    134e:	35 07       	cpc	r19, r21
    1350:	48 f0       	brcs	.+18     	; 0x1364 <malloc+0x124>
    1352:	4e 0f       	add	r20, r30
    1354:	5f 1f       	adc	r21, r31
    1356:	50 93 15 02 	sts	0x0215, r21
    135a:	40 93 14 02 	sts	0x0214, r20
    135e:	81 93       	st	Z+, r24
    1360:	91 93       	st	Z+, r25
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <malloc+0x128>
    1364:	e0 e0       	ldi	r30, 0x00	; 0
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	cf 01       	movw	r24, r30
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	08 95       	ret

00001370 <free>:
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	09 f4       	brne	.+2      	; 0x137a <free+0xa>
    1378:	87 c0       	rjmp	.+270    	; 0x1488 <free+0x118>
    137a:	fc 01       	movw	r30, r24
    137c:	32 97       	sbiw	r30, 0x02	; 2
    137e:	13 82       	std	Z+3, r1	; 0x03
    1380:	12 82       	std	Z+2, r1	; 0x02
    1382:	c0 91 16 02 	lds	r28, 0x0216
    1386:	d0 91 17 02 	lds	r29, 0x0217
    138a:	20 97       	sbiw	r28, 0x00	; 0
    138c:	81 f4       	brne	.+32     	; 0x13ae <free+0x3e>
    138e:	20 81       	ld	r18, Z
    1390:	31 81       	ldd	r19, Z+1	; 0x01
    1392:	28 0f       	add	r18, r24
    1394:	39 1f       	adc	r19, r25
    1396:	80 91 14 02 	lds	r24, 0x0214
    139a:	90 91 15 02 	lds	r25, 0x0215
    139e:	82 17       	cp	r24, r18
    13a0:	93 07       	cpc	r25, r19
    13a2:	79 f5       	brne	.+94     	; 0x1402 <free+0x92>
    13a4:	f0 93 15 02 	sts	0x0215, r31
    13a8:	e0 93 14 02 	sts	0x0214, r30
    13ac:	6d c0       	rjmp	.+218    	; 0x1488 <free+0x118>
    13ae:	de 01       	movw	r26, r28
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	ae 17       	cp	r26, r30
    13b6:	bf 07       	cpc	r27, r31
    13b8:	50 f4       	brcc	.+20     	; 0x13ce <free+0x5e>
    13ba:	12 96       	adiw	r26, 0x02	; 2
    13bc:	4d 91       	ld	r20, X+
    13be:	5c 91       	ld	r21, X
    13c0:	13 97       	sbiw	r26, 0x03	; 3
    13c2:	9d 01       	movw	r18, r26
    13c4:	41 15       	cp	r20, r1
    13c6:	51 05       	cpc	r21, r1
    13c8:	09 f1       	breq	.+66     	; 0x140c <free+0x9c>
    13ca:	da 01       	movw	r26, r20
    13cc:	f3 cf       	rjmp	.-26     	; 0x13b4 <free+0x44>
    13ce:	b3 83       	std	Z+3, r27	; 0x03
    13d0:	a2 83       	std	Z+2, r26	; 0x02
    13d2:	40 81       	ld	r20, Z
    13d4:	51 81       	ldd	r21, Z+1	; 0x01
    13d6:	84 0f       	add	r24, r20
    13d8:	95 1f       	adc	r25, r21
    13da:	8a 17       	cp	r24, r26
    13dc:	9b 07       	cpc	r25, r27
    13de:	71 f4       	brne	.+28     	; 0x13fc <free+0x8c>
    13e0:	8d 91       	ld	r24, X+
    13e2:	9c 91       	ld	r25, X
    13e4:	11 97       	sbiw	r26, 0x01	; 1
    13e6:	84 0f       	add	r24, r20
    13e8:	95 1f       	adc	r25, r21
    13ea:	02 96       	adiw	r24, 0x02	; 2
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	80 83       	st	Z, r24
    13f0:	12 96       	adiw	r26, 0x02	; 2
    13f2:	8d 91       	ld	r24, X+
    13f4:	9c 91       	ld	r25, X
    13f6:	13 97       	sbiw	r26, 0x03	; 3
    13f8:	93 83       	std	Z+3, r25	; 0x03
    13fa:	82 83       	std	Z+2, r24	; 0x02
    13fc:	21 15       	cp	r18, r1
    13fe:	31 05       	cpc	r19, r1
    1400:	29 f4       	brne	.+10     	; 0x140c <free+0x9c>
    1402:	f0 93 17 02 	sts	0x0217, r31
    1406:	e0 93 16 02 	sts	0x0216, r30
    140a:	3e c0       	rjmp	.+124    	; 0x1488 <free+0x118>
    140c:	d9 01       	movw	r26, r18
    140e:	13 96       	adiw	r26, 0x03	; 3
    1410:	fc 93       	st	X, r31
    1412:	ee 93       	st	-X, r30
    1414:	12 97       	sbiw	r26, 0x02	; 2
    1416:	4d 91       	ld	r20, X+
    1418:	5d 91       	ld	r21, X+
    141a:	a4 0f       	add	r26, r20
    141c:	b5 1f       	adc	r27, r21
    141e:	ea 17       	cp	r30, r26
    1420:	fb 07       	cpc	r31, r27
    1422:	79 f4       	brne	.+30     	; 0x1442 <free+0xd2>
    1424:	80 81       	ld	r24, Z
    1426:	91 81       	ldd	r25, Z+1	; 0x01
    1428:	84 0f       	add	r24, r20
    142a:	95 1f       	adc	r25, r21
    142c:	02 96       	adiw	r24, 0x02	; 2
    142e:	d9 01       	movw	r26, r18
    1430:	11 96       	adiw	r26, 0x01	; 1
    1432:	9c 93       	st	X, r25
    1434:	8e 93       	st	-X, r24
    1436:	82 81       	ldd	r24, Z+2	; 0x02
    1438:	93 81       	ldd	r25, Z+3	; 0x03
    143a:	13 96       	adiw	r26, 0x03	; 3
    143c:	9c 93       	st	X, r25
    143e:	8e 93       	st	-X, r24
    1440:	12 97       	sbiw	r26, 0x02	; 2
    1442:	e0 e0       	ldi	r30, 0x00	; 0
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	9b 81       	ldd	r25, Y+3	; 0x03
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	19 f0       	breq	.+6      	; 0x1454 <free+0xe4>
    144e:	fe 01       	movw	r30, r28
    1450:	ec 01       	movw	r28, r24
    1452:	f9 cf       	rjmp	.-14     	; 0x1446 <free+0xd6>
    1454:	ce 01       	movw	r24, r28
    1456:	02 96       	adiw	r24, 0x02	; 2
    1458:	28 81       	ld	r18, Y
    145a:	39 81       	ldd	r19, Y+1	; 0x01
    145c:	82 0f       	add	r24, r18
    145e:	93 1f       	adc	r25, r19
    1460:	20 91 14 02 	lds	r18, 0x0214
    1464:	30 91 15 02 	lds	r19, 0x0215
    1468:	28 17       	cp	r18, r24
    146a:	39 07       	cpc	r19, r25
    146c:	69 f4       	brne	.+26     	; 0x1488 <free+0x118>
    146e:	30 97       	sbiw	r30, 0x00	; 0
    1470:	29 f4       	brne	.+10     	; 0x147c <free+0x10c>
    1472:	10 92 17 02 	sts	0x0217, r1
    1476:	10 92 16 02 	sts	0x0216, r1
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <free+0x110>
    147c:	13 82       	std	Z+3, r1	; 0x03
    147e:	12 82       	std	Z+2, r1	; 0x02
    1480:	d0 93 15 02 	sts	0x0215, r29
    1484:	c0 93 14 02 	sts	0x0214, r28
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <memset>:
    148e:	dc 01       	movw	r26, r24
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <memset+0x6>
    1492:	6d 93       	st	X+, r22
    1494:	41 50       	subi	r20, 0x01	; 1
    1496:	50 40       	sbci	r21, 0x00	; 0
    1498:	e0 f7       	brcc	.-8      	; 0x1492 <memset+0x4>
    149a:	08 95       	ret

0000149c <__eerd_word_m16a>:
    149c:	a8 e1       	ldi	r26, 0x18	; 24
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	42 e0       	ldi	r20, 0x02	; 2
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__eerd_blraw_m16a>

000014a8 <__eewr_word_m16a>:
    14a8:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__eewr_byte_m16a>
    14ac:	27 2f       	mov	r18, r23
    14ae:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__eewr_r18_m16a>

000014b2 <__eerd_block_m16a>:
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22

000014b6 <__eerd_blraw_m16a>:
    14b6:	fc 01       	movw	r30, r24
    14b8:	e1 99       	sbic	0x1c, 1	; 28
    14ba:	fe cf       	rjmp	.-4      	; 0x14b8 <__eerd_blraw_m16a+0x2>
    14bc:	06 c0       	rjmp	.+12     	; 0x14ca <__eerd_blraw_m16a+0x14>
    14be:	ff bb       	out	0x1f, r31	; 31
    14c0:	ee bb       	out	0x1e, r30	; 30
    14c2:	e0 9a       	sbi	0x1c, 0	; 28
    14c4:	31 96       	adiw	r30, 0x01	; 1
    14c6:	0d b2       	in	r0, 0x1d	; 29
    14c8:	0d 92       	st	X+, r0
    14ca:	41 50       	subi	r20, 0x01	; 1
    14cc:	50 40       	sbci	r21, 0x00	; 0
    14ce:	b8 f7       	brcc	.-18     	; 0x14be <__eerd_blraw_m16a+0x8>
    14d0:	08 95       	ret

000014d2 <__eewr_byte_m16a>:
    14d2:	26 2f       	mov	r18, r22

000014d4 <__eewr_r18_m16a>:
    14d4:	e1 99       	sbic	0x1c, 1	; 28
    14d6:	fe cf       	rjmp	.-4      	; 0x14d4 <__eewr_r18_m16a>
    14d8:	9f bb       	out	0x1f, r25	; 31
    14da:	8e bb       	out	0x1e, r24	; 30
    14dc:	2d bb       	out	0x1d, r18	; 29
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	e2 9a       	sbi	0x1c, 2	; 28
    14e4:	e1 9a       	sbi	0x1c, 1	; 28
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	08 95       	ret

000014ec <_exit>:
    14ec:	f8 94       	cli

000014ee <__stop_program>:
    14ee:	ff cf       	rjmp	.-2      	; 0x14ee <__stop_program>
